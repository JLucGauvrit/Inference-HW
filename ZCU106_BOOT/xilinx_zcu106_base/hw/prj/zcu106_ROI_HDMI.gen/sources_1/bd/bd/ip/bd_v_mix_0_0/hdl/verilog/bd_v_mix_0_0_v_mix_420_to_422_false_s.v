// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_mix_0_0_v_mix_420_to_422_false_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        srcImg_dout,
        srcImg_empty_n,
        srcImg_read,
        outImg_din,
        outImg_full_n,
        outImg_write,
        HwReg_layerHeight18_load_cast_loc_dout,
        HwReg_layerHeight18_load_cast_loc_empty_n,
        HwReg_layerHeight18_load_cast_loc_read,
        HwReg_layerWidth15_load_cast_loc_dout,
        HwReg_layerWidth15_load_cast_loc_empty_n,
        HwReg_layerWidth15_load_cast_loc_read,
        p_read3_dout,
        p_read3_empty_n,
        p_read3_read,
        HwReg_layerHeight18_load_cast_loc_out_din,
        HwReg_layerHeight18_load_cast_loc_out_full_n,
        HwReg_layerHeight18_load_cast_loc_out_write,
        HwReg_layerWidth15_load_cast_loc_out_din,
        HwReg_layerWidth15_load_cast_loc_out_full_n,
        HwReg_layerWidth15_load_cast_loc_out_write,
        p_read3_out_din,
        p_read3_out_full_n,
        p_read3_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [47:0] srcImg_dout;
input   srcImg_empty_n;
output   srcImg_read;
output  [47:0] outImg_din;
input   outImg_full_n;
output   outImg_write;
input  [11:0] HwReg_layerHeight18_load_cast_loc_dout;
input   HwReg_layerHeight18_load_cast_loc_empty_n;
output   HwReg_layerHeight18_load_cast_loc_read;
input  [11:0] HwReg_layerWidth15_load_cast_loc_dout;
input   HwReg_layerWidth15_load_cast_loc_empty_n;
output   HwReg_layerWidth15_load_cast_loc_read;
input  [0:0] p_read3_dout;
input   p_read3_empty_n;
output   p_read3_read;
output  [11:0] HwReg_layerHeight18_load_cast_loc_out_din;
input   HwReg_layerHeight18_load_cast_loc_out_full_n;
output   HwReg_layerHeight18_load_cast_loc_out_write;
output  [11:0] HwReg_layerWidth15_load_cast_loc_out_din;
input   HwReg_layerWidth15_load_cast_loc_out_full_n;
output   HwReg_layerWidth15_load_cast_loc_out_write;
output  [0:0] p_read3_out_din;
input   p_read3_out_full_n;
output   p_read3_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg srcImg_read;
reg outImg_write;
reg HwReg_layerHeight18_load_cast_loc_read;
reg HwReg_layerWidth15_load_cast_loc_read;
reg p_read3_read;
reg HwReg_layerHeight18_load_cast_loc_out_write;
reg HwReg_layerWidth15_load_cast_loc_out_write;
reg p_read3_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    srcImg_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln31_reg_238;
reg    outImg_blk_n;
reg    HwReg_layerHeight18_load_cast_loc_blk_n;
reg    HwReg_layerWidth15_load_cast_loc_blk_n;
reg    p_read3_blk_n;
reg    HwReg_layerHeight18_load_cast_loc_out_blk_n;
reg    HwReg_layerWidth15_load_cast_loc_out_blk_n;
reg    p_read3_out_blk_n;
reg   [10:0] x_reg_147;
reg   [11:0] HwReg_layerHeight18_load_cast_loc_read_reg_199;
reg   [11:0] HwReg_layerWidth15_load_cast_loc_read_reg_205;
reg   [0:0] p_read_reg_210;
wire   [0:0] and_ln29_fu_163_p2;
reg   [0:0] and_ln29_reg_215;
wire    ap_CS_fsm_state2;
reg   [10:0] lshr_ln29_cast_reg_219;
wire   [11:0] y_20_fu_177_p2;
reg   [11:0] y_20_reg_224;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln29_2_fu_183_p2;
wire   [10:0] x_20_fu_188_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln31_fu_194_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [11:0] y_reg_136;
wire    ap_CS_fsm_state6;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln29_fu_158_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln29_reg_215) | (icmp_ln29_2_fu_183_p2 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln29_2_fu_183_p2 == 1'd0) & (1'd1 == and_ln29_reg_215))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln29_2_fu_183_p2 == 1'd0) & (1'd1 == and_ln29_reg_215))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln31_fu_194_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_reg_147 <= x_20_fu_188_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln29_2_fu_183_p2 == 1'd0) & (1'd1 == and_ln29_reg_215))) begin
        x_reg_147 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == and_ln29_fu_163_p2))) begin
        y_reg_136 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        y_reg_136 <= y_20_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        HwReg_layerHeight18_load_cast_loc_read_reg_199 <= HwReg_layerHeight18_load_cast_loc_dout;
        HwReg_layerWidth15_load_cast_loc_read_reg_205 <= HwReg_layerWidth15_load_cast_loc_dout;
        p_read_reg_210 <= p_read3_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        and_ln29_reg_215 <= and_ln29_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln31_reg_238 <= icmp_ln31_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == and_ln29_fu_163_p2))) begin
        lshr_ln29_cast_reg_219 <= {{HwReg_layerWidth15_load_cast_loc_read_reg_205[11:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln29_reg_215))) begin
        y_20_reg_224 <= y_20_fu_177_p2;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_cast_loc_blk_n = HwReg_layerHeight18_load_cast_loc_empty_n;
    end else begin
        HwReg_layerHeight18_load_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_cast_loc_out_blk_n = HwReg_layerHeight18_load_cast_loc_out_full_n;
    end else begin
        HwReg_layerHeight18_load_cast_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_cast_loc_out_write = 1'b1;
    end else begin
        HwReg_layerHeight18_load_cast_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_cast_loc_read = 1'b1;
    end else begin
        HwReg_layerHeight18_load_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_cast_loc_blk_n = HwReg_layerWidth15_load_cast_loc_empty_n;
    end else begin
        HwReg_layerWidth15_load_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_cast_loc_out_blk_n = HwReg_layerWidth15_load_cast_loc_out_full_n;
    end else begin
        HwReg_layerWidth15_load_cast_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_cast_loc_out_write = 1'b1;
    end else begin
        HwReg_layerWidth15_load_cast_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_cast_loc_read = 1'b1;
    end else begin
        HwReg_layerWidth15_load_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln31_fu_194_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln29_reg_215) | (icmp_ln29_2_fu_183_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln29_reg_215) | (icmp_ln29_2_fu_183_p2 == 1'd1)))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_238 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outImg_blk_n = outImg_full_n;
    end else begin
        outImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_238 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outImg_write = 1'b1;
    end else begin
        outImg_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_blk_n = p_read3_empty_n;
    end else begin
        p_read3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_out_blk_n = p_read3_out_full_n;
    end else begin
        p_read3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_out_write = 1'b1;
    end else begin
        p_read3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_read = 1'b1;
    end else begin
        p_read3_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_238 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_blk_n = srcImg_empty_n;
    end else begin
        srcImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_238 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_read = 1'b1;
    end else begin
        srcImg_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln29_reg_215) | (icmp_ln29_2_fu_183_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln31_fu_194_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln31_fu_194_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_layerHeight18_load_cast_loc_out_din = HwReg_layerHeight18_load_cast_loc_dout;

assign HwReg_layerWidth15_load_cast_loc_out_din = HwReg_layerWidth15_load_cast_loc_dout;

assign and_ln29_fu_163_p2 = (p_read_reg_210 & icmp_ln29_fu_158_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln31_reg_238 == 1'd0) & (outImg_full_n == 1'b0)) | ((icmp_ln31_reg_238 == 1'd0) & (srcImg_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln31_reg_238 == 1'd0) & (outImg_full_n == 1'b0)) | ((icmp_ln31_reg_238 == 1'd0) & (srcImg_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln31_reg_238 == 1'd0) & (outImg_full_n == 1'b0)) | ((icmp_ln31_reg_238 == 1'd0) & (srcImg_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (((icmp_ln31_reg_238 == 1'd0) & (outImg_full_n == 1'b0)) | ((icmp_ln31_reg_238 == 1'd0) & (srcImg_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign icmp_ln29_2_fu_183_p2 = ((y_reg_136 == HwReg_layerHeight18_load_cast_loc_read_reg_199) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_158_p2 = ((HwReg_layerHeight18_load_cast_loc_read_reg_199 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_194_p2 = ((x_reg_147 == lshr_ln29_cast_reg_219) ? 1'b1 : 1'b0);

assign outImg_din = srcImg_dout;

assign p_read3_out_din = p_read3_dout;

assign start_out = real_start;

assign x_20_fu_188_p2 = (x_reg_147 + 11'd1);

assign y_20_fu_177_p2 = (y_reg_136 + 12'd1);

endmodule //bd_v_mix_0_0_v_mix_420_to_422_false_s
