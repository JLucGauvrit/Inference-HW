// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_mix_0_0_v_mix_upsample_alpha_false_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        srcLayer3Alpha_dout,
        srcLayer3Alpha_empty_n,
        srcLayer3Alpha_read,
        srcLayer3Alphax_din,
        srcLayer3Alphax_full_n,
        srcLayer3Alphax_write,
        HwReg_layerHeight18_load_cast_loc_dout,
        HwReg_layerHeight18_load_cast_loc_empty_n,
        HwReg_layerHeight18_load_cast_loc_read,
        HwReg_layerWidth15_load_cast_loc_dout,
        HwReg_layerWidth15_load_cast_loc_empty_n,
        HwReg_layerWidth15_load_cast_loc_read,
        p_read3_dout,
        p_read3_empty_n,
        p_read3_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] srcLayer3Alpha_dout;
input   srcLayer3Alpha_empty_n;
output   srcLayer3Alpha_read;
output  [15:0] srcLayer3Alphax_din;
input   srcLayer3Alphax_full_n;
output   srcLayer3Alphax_write;
input  [11:0] HwReg_layerHeight18_load_cast_loc_dout;
input   HwReg_layerHeight18_load_cast_loc_empty_n;
output   HwReg_layerHeight18_load_cast_loc_read;
input  [11:0] HwReg_layerWidth15_load_cast_loc_dout;
input   HwReg_layerWidth15_load_cast_loc_empty_n;
output   HwReg_layerWidth15_load_cast_loc_read;
input  [0:0] p_read3_dout;
input   p_read3_empty_n;
output   p_read3_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg srcLayer3Alpha_read;
reg srcLayer3Alphax_write;
reg HwReg_layerHeight18_load_cast_loc_read;
reg HwReg_layerWidth15_load_cast_loc_read;
reg p_read3_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    srcLayer3Alpha_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln199_reg_204;
reg    srcLayer3Alphax_blk_n;
reg    HwReg_layerHeight18_load_cast_loc_blk_n;
reg    HwReg_layerWidth15_load_cast_loc_blk_n;
reg    p_read3_blk_n;
reg   [10:0] x_reg_113;
reg   [0:0] p_read_reg_165;
reg   [11:0] HwReg_layerHeight18_load_cast_loc_read_reg_170;
reg   [11:0] HwReg_layerWidth15_load_cast_loc_read_reg_176;
wire   [0:0] and_ln197_fu_129_p2;
reg   [0:0] and_ln197_reg_181;
wire    ap_CS_fsm_state2;
reg   [10:0] lshr_ln197_cast_reg_185;
wire   [11:0] y_5_fu_143_p2;
reg   [11:0] y_5_reg_190;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln197_1_fu_149_p2;
wire   [10:0] x_5_fu_154_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln199_fu_160_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg   [11:0] y_reg_102;
wire    ap_CS_fsm_state6;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln197_fu_124_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln197_reg_181) | (icmp_ln197_1_fu_149_p2 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'd1 == and_ln197_reg_181) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln197_1_fu_149_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'd1 == and_ln197_reg_181) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln197_1_fu_149_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln199_fu_160_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_reg_113 <= x_5_fu_154_p2;
    end else if (((1'd1 == and_ln197_reg_181) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln197_1_fu_149_p2 == 1'd0))) begin
        x_reg_113 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln197_fu_129_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_102 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        y_reg_102 <= y_5_reg_190;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        HwReg_layerHeight18_load_cast_loc_read_reg_170 <= HwReg_layerHeight18_load_cast_loc_dout;
        HwReg_layerWidth15_load_cast_loc_read_reg_176 <= HwReg_layerWidth15_load_cast_loc_dout;
        p_read_reg_165 <= p_read3_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        and_ln197_reg_181 <= and_ln197_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln199_reg_204 <= icmp_ln199_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln197_fu_129_p2) & (1'b1 == ap_CS_fsm_state2))) begin
        lshr_ln197_cast_reg_185 <= {{HwReg_layerWidth15_load_cast_loc_read_reg_176[11:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln197_reg_181) & (1'b1 == ap_CS_fsm_state3))) begin
        y_5_reg_190 <= y_5_fu_143_p2;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_cast_loc_blk_n = HwReg_layerHeight18_load_cast_loc_empty_n;
    end else begin
        HwReg_layerHeight18_load_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_cast_loc_read = 1'b1;
    end else begin
        HwReg_layerHeight18_load_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_cast_loc_blk_n = HwReg_layerWidth15_load_cast_loc_empty_n;
    end else begin
        HwReg_layerWidth15_load_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_cast_loc_read = 1'b1;
    end else begin
        HwReg_layerWidth15_load_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln199_fu_160_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln197_reg_181) | (icmp_ln197_1_fu_149_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln197_reg_181) | (icmp_ln197_1_fu_149_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_blk_n = p_read3_empty_n;
    end else begin
        p_read3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_read = 1'b1;
    end else begin
        p_read3_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_reg_204 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcLayer3Alpha_blk_n = srcLayer3Alpha_empty_n;
    end else begin
        srcLayer3Alpha_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln199_reg_204 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcLayer3Alpha_read = 1'b1;
    end else begin
        srcLayer3Alpha_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_reg_204 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcLayer3Alphax_blk_n = srcLayer3Alphax_full_n;
    end else begin
        srcLayer3Alphax_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln199_reg_204 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcLayer3Alphax_write = 1'b1;
    end else begin
        srcLayer3Alphax_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln197_reg_181) | (icmp_ln197_1_fu_149_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln199_fu_160_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln199_fu_160_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln197_fu_129_p2 = (p_read_reg_165 & icmp_ln197_fu_124_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln199_reg_204 == 1'd0) & (srcLayer3Alphax_full_n == 1'b0)) | ((icmp_ln199_reg_204 == 1'd0) & (srcLayer3Alpha_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln199_reg_204 == 1'd0) & (srcLayer3Alphax_full_n == 1'b0)) | ((icmp_ln199_reg_204 == 1'd0) & (srcLayer3Alpha_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln199_reg_204 == 1'd0) & (srcLayer3Alphax_full_n == 1'b0)) | ((icmp_ln199_reg_204 == 1'd0) & (srcLayer3Alpha_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_cast_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (((icmp_ln199_reg_204 == 1'd0) & (srcLayer3Alphax_full_n == 1'b0)) | ((icmp_ln199_reg_204 == 1'd0) & (srcLayer3Alpha_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln197_1_fu_149_p2 = ((y_reg_102 == HwReg_layerHeight18_load_cast_loc_read_reg_170) ? 1'b1 : 1'b0);

assign icmp_ln197_fu_124_p2 = ((HwReg_layerHeight18_load_cast_loc_read_reg_170 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln199_fu_160_p2 = ((x_reg_113 == lshr_ln197_cast_reg_185) ? 1'b1 : 1'b0);

assign srcLayer3Alphax_din = srcLayer3Alpha_dout;

assign x_5_fu_154_p2 = (x_reg_113 + 11'd1);

assign y_5_fu_143_p2 = (y_reg_102 + 12'd1);

endmodule //bd_v_mix_0_0_v_mix_upsample_alpha_false_s
