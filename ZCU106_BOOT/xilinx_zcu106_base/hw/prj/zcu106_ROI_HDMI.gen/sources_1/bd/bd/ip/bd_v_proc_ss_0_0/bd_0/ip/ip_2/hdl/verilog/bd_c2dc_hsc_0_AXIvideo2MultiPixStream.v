// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_c2dc_hsc_0_AXIvideo2MultiPixStream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_in_din,
        stream_in_full_n,
        stream_in_write,
        Height,
        WidthIn,
        ColorMode_dout,
        ColorMode_empty_n,
        ColorMode_read,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_state8 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [47:0] stream_in_din;
input   stream_in_full_n;
output   stream_in_write;
input  [15:0] Height;
input  [15:0] WidthIn;
input  [7:0] ColorMode_dout;
input   ColorMode_empty_n;
output   ColorMode_read;
input  [47:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [5:0] s_axis_video_TKEEP;
input  [5:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_in_write;
reg ColorMode_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    stream_in_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln1219_reg_614;
reg    ColorMode_blk_n;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] ap_phi_mux_sof_phi_fu_195_p4;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln1219_fu_413_p2;
wire   [0:0] or_ln1223_fu_418_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] ap_phi_mux_axi_last_V_9_phi_fu_346_p4;
reg   [10:0] j_reg_251;
reg   [0:0] eol_reg_262;
reg   [0:0] sof_5_reg_274;
reg   [0:0] axi_last_V_3_reg_285;
reg   [47:0] axi_data_V_3_reg_295;
reg   [47:0] axi_data_V_8_reg_306;
reg   [0:0] axi_last_V_8_reg_318;
reg    ap_block_state2;
reg    ap_block_state8;
reg   [7:0] ColorMode_read_reg_552;
wire   [11:0] trunc_ln1192_fu_369_p1;
wire   [10:0] div697_cast_i_fu_377_p4;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln1244_fu_386_p2;
reg   [0:0] icmp_ln1244_reg_583;
wire   [0:0] icmp_ln1244_1_fu_391_p2;
reg   [0:0] icmp_ln1244_1_reg_590;
wire   [11:0] i_3_fu_396_p2;
reg   [11:0] i_3_reg_600;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln1214_fu_402_p2;
wire   [10:0] j_2_fu_407_p2;
reg    ap_predicate_op66_read_state5;
reg    ap_block_state5_pp1_stage0_iter0;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [7:0] pix_val_V_0_2_fu_438_p3;
reg   [7:0] pix_val_V_0_2_reg_622;
wire   [7:0] pix_val_V_1_2_fu_455_p3;
reg   [7:0] pix_val_V_1_2_reg_627;
wire   [7:0] pix_val_V_2_4_fu_462_p3;
reg   [7:0] pix_val_V_2_4_reg_632;
wire   [7:0] pix_val_V_3_4_fu_496_p3;
reg   [7:0] pix_val_V_3_4_reg_637;
wire   [7:0] pix_val_V_4_3_fu_520_p3;
reg   [7:0] pix_val_V_4_3_reg_642;
wire   [7:0] pix_val_V_5_6_fu_534_p3;
reg   [7:0] pix_val_V_5_6_reg_647;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg   [47:0] axi_data_V_reg_167;
reg   [0:0] axi_last_V_reg_179;
reg   [0:0] sof_reg_191;
reg    ap_block_state1;
reg   [11:0] i_reg_202;
wire    ap_CS_fsm_state9;
reg   [0:0] sof_4_reg_213;
reg   [0:0] axi_last_V_2_reg_227;
reg   [47:0] axi_data_V_2_reg_240;
reg   [47:0] axi_data_V_4_reg_331;
reg   [0:0] ap_phi_mux_eol_phi_fu_266_p4;
reg   [0:0] ap_phi_mux_sof_5_phi_fu_277_p4;
reg   [0:0] ap_phi_mux_axi_last_V_3_phi_fu_288_p4;
reg   [47:0] ap_phi_mux_axi_data_V_3_phi_fu_298_p4;
reg   [47:0] ap_phi_mux_axi_data_V_8_phi_fu_310_p4;
wire   [47:0] ap_phi_reg_pp1_iter0_axi_data_V_8_reg_306;
wire   [0:0] ap_phi_reg_pp1_iter0_axi_last_V_8_reg_318;
wire    ap_CS_fsm_state7;
reg   [0:0] axi_last_V_9_reg_343;
reg    ap_block_pp1_stage0_01001;
wire   [7:0] pix_val_V_0_3_fu_428_p4;
wire   [7:0] pix_val_V_0_fu_424_p1;
wire   [7:0] pix_val_V_1_fu_445_p4;
wire   [7:0] pix_val_V_3_5_fu_479_p4;
wire   [7:0] pix_val_V_3_fu_469_p4;
wire   [7:0] pix_val_V_3_3_fu_489_p3;
wire   [7:0] pix_val_V_4_fu_503_p4;
wire   [7:0] pix_val_V_4_2_fu_513_p3;
wire   [7:0] pix_val_V_5_5_fu_527_p3;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [47:0] s_axis_video_TDATA_int_regslice;
wire    s_axis_video_TVALID_int_regslice;
reg    s_axis_video_TREADY_int_regslice;
wire    regslice_both_AXI_video_strm_V_data_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire   [5:0] s_axis_video_TKEEP_int_regslice;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire   [5:0] s_axis_video_TSTRB_int_regslice;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int_regslice;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int_regslice;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int_regslice;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int_regslice;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in;
reg    ap_condition_174;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 48 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int_regslice),
    .vld_out(s_axis_video_TVALID_int_regslice),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 6 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 6 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int_regslice),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1214_fu_402_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1214_fu_402_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1214_fu_402_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_data_V_2_reg_240 <= axi_data_V_4_reg_331;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V_2_reg_240 <= axi_data_V_reg_167;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1214_fu_402_p2 == 1'd0))) begin
        axi_data_V_3_reg_295 <= axi_data_V_2_reg_240;
    end else if (((icmp_ln1219_reg_614 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_data_V_3_reg_295 <= axi_data_V_8_reg_306;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_data_V_4_reg_331 <= axi_data_V_3_reg_295;
    end else if ((~((axi_last_V_9_reg_343 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (axi_last_V_9_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        axi_data_V_4_reg_331 <= s_axis_video_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_174)) begin
        if (((or_ln1223_fu_418_p2 == 1'd1) & (icmp_ln1219_fu_413_p2 == 1'd0))) begin
            axi_data_V_8_reg_306 <= ap_phi_mux_axi_data_V_3_phi_fu_298_p4;
        end else if (((or_ln1223_fu_418_p2 == 1'd0) & (icmp_ln1219_fu_413_p2 == 1'd0))) begin
            axi_data_V_8_reg_306 <= s_axis_video_TDATA_int_regslice;
        end else if ((1'b1 == 1'b1)) begin
            axi_data_V_8_reg_306 <= ap_phi_reg_pp1_iter0_axi_data_V_8_reg_306;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        axi_last_V_2_reg_227 <= 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V_2_reg_227 <= axi_last_V_reg_179;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1214_fu_402_p2 == 1'd0))) begin
        axi_last_V_3_reg_285 <= axi_last_V_2_reg_227;
    end else if (((icmp_ln1219_reg_614 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_last_V_3_reg_285 <= axi_last_V_8_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_174)) begin
        if (((or_ln1223_fu_418_p2 == 1'd1) & (icmp_ln1219_fu_413_p2 == 1'd0))) begin
            axi_last_V_8_reg_318 <= ap_phi_mux_axi_last_V_3_phi_fu_288_p4;
        end else if (((or_ln1223_fu_418_p2 == 1'd0) & (icmp_ln1219_fu_413_p2 == 1'd0))) begin
            axi_last_V_8_reg_318 <= s_axis_video_TLAST_int_regslice;
        end else if ((1'b1 == 1'b1)) begin
            axi_last_V_8_reg_318 <= ap_phi_reg_pp1_iter0_axi_last_V_8_reg_318;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_last_V_9_reg_343 <= eol_reg_262;
    end else if ((~((axi_last_V_9_reg_343 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (axi_last_V_9_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        axi_last_V_9_reg_343 <= s_axis_video_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1214_fu_402_p2 == 1'd0))) begin
        eol_reg_262 <= 1'd0;
    end else if (((icmp_ln1219_reg_614 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_reg_262 <= axi_last_V_8_reg_318;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_202 <= i_3_reg_600;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_202 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1214_fu_402_p2 == 1'd0))) begin
        j_reg_251 <= 11'd0;
    end else if (((icmp_ln1219_fu_413_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_reg_251 <= j_2_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sof_4_reg_213 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sof_4_reg_213 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1214_fu_402_p2 == 1'd0))) begin
        sof_5_reg_274 <= sof_4_reg_213;
    end else if (((icmp_ln1219_reg_614 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sof_5_reg_274 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == ColorMode_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sof_reg_191 <= 1'd0;
    end else if ((~((sof_reg_191 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (sof_reg_191 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sof_reg_191 <= s_axis_video_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ColorMode_read_reg_552 <= ColorMode_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((sof_reg_191 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (sof_reg_191 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        axi_data_V_reg_167 <= s_axis_video_TDATA_int_regslice;
        axi_last_V_reg_179 <= s_axis_video_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_3_reg_600 <= i_3_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln1219_reg_614 <= icmp_ln1219_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln1244_1_reg_590 <= icmp_ln1244_1_fu_391_p2;
        icmp_ln1244_reg_583 <= icmp_ln1244_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1219_fu_413_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        pix_val_V_0_2_reg_622 <= pix_val_V_0_2_fu_438_p3;
        pix_val_V_1_2_reg_627 <= pix_val_V_1_2_fu_455_p3;
        pix_val_V_2_4_reg_632 <= pix_val_V_2_4_fu_462_p3;
        pix_val_V_3_4_reg_637 <= pix_val_V_3_4_fu_496_p3;
        pix_val_V_4_3_reg_642 <= pix_val_V_4_3_fu_520_p3;
        pix_val_V_5_6_reg_647 <= pix_val_V_5_6_fu_534_p3;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ColorMode_blk_n = ColorMode_empty_n;
    end else begin
        ColorMode_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ColorMode_read = 1'b1;
    end else begin
        ColorMode_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1219_fu_413_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1214_fu_402_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_614 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_data_V_3_phi_fu_298_p4 = axi_data_V_8_reg_306;
    end else begin
        ap_phi_mux_axi_data_V_3_phi_fu_298_p4 = axi_data_V_3_reg_295;
    end
end

always @ (*) begin
    if ((icmp_ln1219_fu_413_p2 == 1'd0)) begin
        if ((or_ln1223_fu_418_p2 == 1'd1)) begin
            ap_phi_mux_axi_data_V_8_phi_fu_310_p4 = ap_phi_mux_axi_data_V_3_phi_fu_298_p4;
        end else if ((or_ln1223_fu_418_p2 == 1'd0)) begin
            ap_phi_mux_axi_data_V_8_phi_fu_310_p4 = s_axis_video_TDATA_int_regslice;
        end else begin
            ap_phi_mux_axi_data_V_8_phi_fu_310_p4 = ap_phi_reg_pp1_iter0_axi_data_V_8_reg_306;
        end
    end else begin
        ap_phi_mux_axi_data_V_8_phi_fu_310_p4 = ap_phi_reg_pp1_iter0_axi_data_V_8_reg_306;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_614 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_last_V_3_phi_fu_288_p4 = axi_last_V_8_reg_318;
    end else begin
        ap_phi_mux_axi_last_V_3_phi_fu_288_p4 = axi_last_V_3_reg_285;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_614 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_phi_fu_266_p4 = axi_last_V_8_reg_318;
    end else begin
        ap_phi_mux_eol_phi_fu_266_p4 = eol_reg_262;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_614 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_sof_5_phi_fu_277_p4 = 1'd0;
    end else begin
        ap_phi_mux_sof_5_phi_fu_277_p4 = sof_5_reg_274;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1214_fu_402_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((axi_last_V_9_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((or_ln1223_fu_418_p2 == 1'd0) & (icmp_ln1219_fu_413_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((sof_reg_191 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int_regslice;
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_predicate_op66_read_state5 == 1'b1)) | (~((axi_last_V_9_reg_343 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (axi_last_V_9_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | (~((sof_reg_191 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (sof_reg_191 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        s_axis_video_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_video_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_614 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        stream_in_blk_n = stream_in_full_n;
    end else begin
        stream_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1219_reg_614 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        stream_in_write = 1'b1;
    end else begin
        stream_in_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == ColorMode_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((sof_reg_191 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (sof_reg_191 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((sof_reg_191 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (ap_phi_mux_sof_phi_fu_195_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln1214_fu_402_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln1219_fu_413_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln1219_fu_413_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((axi_last_V_9_reg_343 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (axi_last_V_9_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if ((~((axi_last_V_9_reg_343 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0)) & (ap_phi_mux_axi_last_V_9_phi_fu_346_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (s_axis_video_TVALID_int_regslice == 1'b0) & (ap_predicate_op66_read_state5 == 1'b1)) | ((icmp_ln1219_reg_614 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (stream_in_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter0 == 1'b1) & (s_axis_video_TVALID_int_regslice == 1'b0) & (ap_predicate_op66_read_state5 == 1'b1)) | ((icmp_ln1219_reg_614 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (stream_in_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter0 == 1'b1) & (s_axis_video_TVALID_int_regslice == 1'b0) & (ap_predicate_op66_read_state5 == 1'b1)) | ((icmp_ln1219_reg_614 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (stream_in_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ColorMode_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((sof_reg_191 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp1_stage0_iter0 = ((s_axis_video_TVALID_int_regslice == 1'b0) & (ap_predicate_op66_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((icmp_ln1219_reg_614 == 1'd0) & (stream_in_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((axi_last_V_9_reg_343 == 1'd0) & (s_axis_video_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_condition_174 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_axi_last_V_9_phi_fu_346_p4 = axi_last_V_9_reg_343;

assign ap_phi_mux_sof_phi_fu_195_p4 = sof_reg_191;

assign ap_phi_reg_pp1_iter0_axi_data_V_8_reg_306 = 'bx;

assign ap_phi_reg_pp1_iter0_axi_last_V_8_reg_318 = 'bx;

always @ (*) begin
    ap_predicate_op66_read_state5 = ((or_ln1223_fu_418_p2 == 1'd0) & (icmp_ln1219_fu_413_p2 == 1'd0));
end

assign div697_cast_i_fu_377_p4 = {{WidthIn[11:1]}};

assign i_3_fu_396_p2 = (i_reg_202 + 12'd1);

assign icmp_ln1214_fu_402_p2 = ((i_reg_202 == trunc_ln1192_fu_369_p1) ? 1'b1 : 1'b0);

assign icmp_ln1219_fu_413_p2 = ((j_reg_251 == div697_cast_i_fu_377_p4) ? 1'b1 : 1'b0);

assign icmp_ln1244_1_fu_391_p2 = ((ColorMode_read_reg_552 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln1244_fu_386_p2 = ((ColorMode_read_reg_552 == 8'd1) ? 1'b1 : 1'b0);

assign j_2_fu_407_p2 = (j_reg_251 + 11'd1);

assign or_ln1223_fu_418_p2 = (ap_phi_mux_sof_5_phi_fu_277_p4 | ap_phi_mux_eol_phi_fu_266_p4);

assign pix_val_V_0_2_fu_438_p3 = ((icmp_ln1244_1_reg_590[0:0] == 1'b1) ? pix_val_V_0_3_fu_428_p4 : pix_val_V_0_fu_424_p1);

assign pix_val_V_0_3_fu_428_p4 = {{ap_phi_mux_axi_data_V_8_phi_fu_310_p4[23:16]}};

assign pix_val_V_0_fu_424_p1 = ap_phi_mux_axi_data_V_8_phi_fu_310_p4[7:0];

assign pix_val_V_1_2_fu_455_p3 = ((icmp_ln1244_1_reg_590[0:0] == 1'b1) ? pix_val_V_0_fu_424_p1 : pix_val_V_1_fu_445_p4);

assign pix_val_V_1_fu_445_p4 = {{ap_phi_mux_axi_data_V_8_phi_fu_310_p4[15:8]}};

assign pix_val_V_2_4_fu_462_p3 = ((icmp_ln1244_1_reg_590[0:0] == 1'b1) ? pix_val_V_1_fu_445_p4 : pix_val_V_0_3_fu_428_p4);

assign pix_val_V_3_3_fu_489_p3 = ((icmp_ln1244_reg_583[0:0] == 1'b1) ? pix_val_V_3_5_fu_479_p4 : pix_val_V_0_3_fu_428_p4);

assign pix_val_V_3_4_fu_496_p3 = ((icmp_ln1244_1_reg_590[0:0] == 1'b1) ? pix_val_V_3_fu_469_p4 : pix_val_V_3_3_fu_489_p3);

assign pix_val_V_3_5_fu_479_p4 = {{ap_phi_mux_axi_data_V_8_phi_fu_310_p4[31:24]}};

assign pix_val_V_3_fu_469_p4 = {{ap_phi_mux_axi_data_V_8_phi_fu_310_p4[47:40]}};

assign pix_val_V_4_2_fu_513_p3 = ((icmp_ln1244_reg_583[0:0] == 1'b1) ? pix_val_V_4_fu_503_p4 : pix_val_V_3_5_fu_479_p4);

assign pix_val_V_4_3_fu_520_p3 = ((icmp_ln1244_1_reg_590[0:0] == 1'b1) ? pix_val_V_3_5_fu_479_p4 : pix_val_V_4_2_fu_513_p3);

assign pix_val_V_4_fu_503_p4 = {{ap_phi_mux_axi_data_V_8_phi_fu_310_p4[39:32]}};

assign pix_val_V_5_5_fu_527_p3 = ((icmp_ln1244_reg_583[0:0] == 1'b1) ? pix_val_V_3_fu_469_p4 : pix_val_V_4_fu_503_p4);

assign pix_val_V_5_6_fu_534_p3 = ((icmp_ln1244_1_reg_590[0:0] == 1'b1) ? pix_val_V_4_fu_503_p4 : pix_val_V_5_5_fu_527_p3);

assign s_axis_video_TREADY = regslice_both_AXI_video_strm_V_data_V_U_ack_in;

assign stream_in_din = {{{{{{pix_val_V_5_6_reg_647}, {pix_val_V_4_3_reg_642}}, {pix_val_V_3_4_reg_637}}, {pix_val_V_2_4_reg_632}}, {pix_val_V_1_2_reg_627}}, {pix_val_V_0_2_reg_622}};

assign trunc_ln1192_fu_369_p1 = Height[11:0];

endmodule //bd_c2dc_hsc_0_AXIvideo2MultiPixStream
