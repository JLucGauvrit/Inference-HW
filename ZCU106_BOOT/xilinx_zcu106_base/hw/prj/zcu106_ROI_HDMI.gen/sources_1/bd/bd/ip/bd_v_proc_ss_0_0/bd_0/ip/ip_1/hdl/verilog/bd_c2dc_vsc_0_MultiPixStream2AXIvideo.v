// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_c2dc_vsc_0_MultiPixStream2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        OutYUV_dout,
        OutYUV_empty_n,
        OutYUV_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        Height_dout,
        Height_empty_n,
        Height_read,
        Width_dout,
        Width_empty_n,
        Width_read,
        ColorMode_dout,
        ColorMode_empty_n,
        ColorMode_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state8 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] OutYUV_dout;
input   OutYUV_empty_n;
output   OutYUV_read;
output  [47:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [5:0] m_axis_video_TKEEP;
output  [5:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [11:0] Height_dout;
input   Height_empty_n;
output   Height_read;
input  [11:0] Width_dout;
input   Width_empty_n;
output   Width_read;
input  [7:0] ColorMode_dout;
input   ColorMode_empty_n;
output   ColorMode_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg OutYUV_read;
reg Height_read;
reg Width_read;
reg ColorMode_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    OutYUV_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln938_reg_677;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln938_reg_677_pp0_iter1_reg;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln938_reg_677_pp0_iter2_reg;
reg    Height_blk_n;
reg    Width_blk_n;
reg    ColorMode_blk_n;
reg   [10:0] j_reg_194;
reg   [0:0] sof_3_reg_205;
reg   [7:0] ColorMode_read_reg_635;
wire   [11:0] grp_reg_unsigned_short_s_fu_288_ap_return;
reg   [11:0] rows_reg_639;
wire    ap_CS_fsm_state2;
wire   [10:0] div217_i_fu_305_p4;
reg   [10:0] div217_i_reg_644;
wire   [11:0] sub_i_fu_319_p2;
reg   [11:0] sub_i_reg_649;
wire   [0:0] cmp31208_i_fu_325_p2;
reg   [0:0] cmp31208_i_reg_654;
wire   [11:0] i_1_fu_331_p2;
reg   [11:0] i_1_reg_658;
wire    ap_CS_fsm_state3;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [0:0] icmp_ln936_fu_340_p2;
wire   [10:0] j_1_fu_345_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state6_io;
reg    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln938_fu_355_p2;
wire   [0:0] icmp_ln951_fu_360_p2;
reg   [0:0] icmp_ln951_reg_681;
reg   [0:0] icmp_ln951_reg_681_pp0_iter1_reg;
wire   [7:0] trunc_ln145_fu_365_p1;
reg   [7:0] trunc_ln145_reg_686;
wire   [7:0] trunc_ln145_1_fu_369_p4;
reg   [7:0] trunc_ln145_1_reg_691;
reg   [7:0] trunc_ln145_2_reg_697;
reg   [7:0] trunc_ln145_3_reg_704;
reg   [7:0] trunc_ln145_4_reg_711;
reg   [7:0] trunc_ln145_5_reg_718;
wire   [47:0] p_Result_11_0_i_fu_419_p3;
wire   [47:0] p_Result_0_i_fu_427_p3;
wire   [47:0] p_Result_12_0_i_fu_435_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state6;
wire   [11:0] grp_reg_unsigned_short_s_fu_294_ap_return;
reg   [11:0] i_reg_183;
wire    ap_CS_fsm_state8;
reg   [0:0] ap_phi_mux_sof_3_phi_fu_210_p4;
wire   [47:0] ap_phi_reg_pp0_iter0_axi_data_V_1_0_0_i_reg_219;
reg   [47:0] ap_phi_reg_pp0_iter1_axi_data_V_1_0_0_i_reg_219;
reg   [47:0] ap_phi_reg_pp0_iter2_axi_data_V_1_0_0_i_reg_219;
reg   [47:0] ap_phi_mux_axi_data_V_1_0_1_i_phi_fu_233_p6;
wire   [47:0] p_Result_12_0_1_i_fu_467_p5;
wire   [47:0] ap_phi_reg_pp0_iter2_axi_data_V_1_0_1_i_reg_230;
wire   [47:0] p_Result_11_0_1_i_fu_443_p5;
wire   [47:0] p_Result_0_1_i_fu_455_p5;
reg   [47:0] ap_phi_mux_axi_data_V_1_0_2_i_phi_fu_244_p6;
wire   [47:0] p_Result_12_0_2_i_fu_503_p5;
wire   [47:0] ap_phi_reg_pp0_iter2_axi_data_V_1_0_2_i_reg_241;
wire   [47:0] p_Result_11_0_2_i_fu_479_p5;
wire   [47:0] p_Result_0_2_i_fu_491_p5;
reg   [47:0] ap_phi_mux_axi_data_V_1_1_0_i_phi_fu_255_p6;
wire   [47:0] p_Result_12_1_i_fu_539_p5;
wire   [47:0] ap_phi_reg_pp0_iter2_axi_data_V_1_1_0_i_reg_252;
wire   [47:0] p_Result_11_1_i_fu_515_p5;
wire   [47:0] p_Result_1_i_fu_527_p5;
reg   [47:0] ap_phi_mux_axi_data_V_1_1_1_i_phi_fu_266_p6;
wire   [47:0] p_Result_12_1_1_i_fu_575_p5;
wire   [47:0] ap_phi_reg_pp0_iter2_axi_data_V_1_1_1_i_reg_263;
wire   [47:0] p_Result_11_1_1_i_fu_551_p5;
wire   [47:0] p_Result_1_1_i_fu_563_p5;
reg   [47:0] ap_phi_mux_axi_data_V_1_1_2_i_phi_fu_278_p6;
wire   [47:0] p_Result_12_1_2_i_fu_611_p5;
wire   [47:0] ap_phi_reg_pp0_iter2_axi_data_V_1_1_2_i_reg_274;
wire   [47:0] p_Result_11_1_2_i_fu_587_p5;
wire   [47:0] p_Result_1_2_i_fu_599_p5;
reg   [0:0] sof_fu_126;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] div217_i_cast_fu_315_p1;
wire   [11:0] zext_ln938_fu_351_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    m_axis_video_TVALID_int_regslice;
wire    m_axis_video_TREADY_int_regslice;
wire    regslice_both_AXI_video_strm_V_data_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;
reg    ap_condition_206;
reg    ap_condition_257;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

bd_c2dc_vsc_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_288(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .d(Height_dout),
    .ap_return(grp_reg_unsigned_short_s_fu_288_ap_return)
);

bd_c2dc_vsc_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_294(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .d(Width_dout),
    .ap_return(grp_reg_unsigned_short_s_fu_294_ap_return)
);

bd_c2dc_vsc_0_regslice_both #(
    .DataWidth( 48 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(ap_phi_mux_axi_data_V_1_1_2_i_phi_fu_278_p6),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(m_axis_video_TREADY_int_regslice),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_AXI_video_strm_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

bd_c2dc_vsc_0_regslice_both #(
    .DataWidth( 6 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(6'd63),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

bd_c2dc_vsc_0_regslice_both #(
    .DataWidth( 6 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(6'd0),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

bd_c2dc_vsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(ap_phi_mux_sof_3_phi_fu_210_p4),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

bd_c2dc_vsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(icmp_ln951_reg_681_pp0_iter1_reg),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

bd_c2dc_vsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

bd_c2dc_vsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln936_fu_340_p2 == 1'd1) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln936_fu_340_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (cmp31208_i_reg_654 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter2_state6)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln936_fu_340_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (cmp31208_i_reg_654 == 1'd0)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state6))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln936_fu_340_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (cmp31208_i_reg_654 == 1'd0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_257)) begin
        if (((icmp_ln938_reg_677 == 1'd0) & (8'd0 == ColorMode_read_reg_635))) begin
            ap_phi_reg_pp0_iter2_axi_data_V_1_0_0_i_reg_219 <= p_Result_0_i_fu_427_p3;
        end else if (((icmp_ln938_reg_677 == 1'd0) & (8'd1 == ColorMode_read_reg_635))) begin
            ap_phi_reg_pp0_iter2_axi_data_V_1_0_0_i_reg_219 <= p_Result_11_0_i_fu_419_p3;
        end else if ((1'b1 == ap_condition_206)) begin
            ap_phi_reg_pp0_iter2_axi_data_V_1_0_0_i_reg_219 <= p_Result_12_0_i_fu_435_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_axi_data_V_1_0_0_i_reg_219 <= ap_phi_reg_pp0_iter1_axi_data_V_1_0_0_i_reg_219;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_183 <= i_1_reg_658;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_183 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln936_fu_340_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (cmp31208_i_reg_654 == 1'd0))) begin
        j_reg_194 <= 11'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln938_fu_355_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_reg_194 <= j_1_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln936_fu_340_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (cmp31208_i_reg_654 == 1'd0))) begin
        sof_3_reg_205 <= sof_fu_126;
    end else if (((icmp_ln938_reg_677_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sof_3_reg_205 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == ColorMode_empty_n) | (1'b0 == Width_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sof_fu_126 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (cmp31208_i_reg_654 == 1'd0))) begin
        sof_fu_126 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ColorMode_read_reg_635 <= ColorMode_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_axi_data_V_1_0_0_i_reg_219 <= ap_phi_reg_pp0_iter0_axi_data_V_1_0_0_i_reg_219;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cmp31208_i_reg_654 <= cmp31208_i_fu_325_p2;
        div217_i_reg_644 <= {{grp_reg_unsigned_short_s_fu_294_ap_return[11:1]}};
        rows_reg_639 <= grp_reg_unsigned_short_s_fu_288_ap_return;
        sub_i_reg_649 <= sub_i_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        i_1_reg_658 <= i_1_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln938_reg_677 <= icmp_ln938_fu_355_p2;
        icmp_ln938_reg_677_pp0_iter1_reg <= icmp_ln938_reg_677;
        icmp_ln951_reg_681_pp0_iter1_reg <= icmp_ln951_reg_681;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln938_reg_677_pp0_iter2_reg <= icmp_ln938_reg_677_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln938_fu_355_p2 == 1'd0))) begin
        icmp_ln951_reg_681 <= icmp_ln951_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln938_reg_677 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln145_1_reg_691 <= {{OutYUV_dout[15:8]}};
        trunc_ln145_2_reg_697 <= {{OutYUV_dout[23:16]}};
        trunc_ln145_3_reg_704 <= {{OutYUV_dout[31:24]}};
        trunc_ln145_4_reg_711 <= {{OutYUV_dout[39:32]}};
        trunc_ln145_5_reg_718 <= {{OutYUV_dout[47:40]}};
        trunc_ln145_reg_686 <= trunc_ln145_fu_365_p1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ColorMode_blk_n = ColorMode_empty_n;
    end else begin
        ColorMode_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_empty_n) | (1'b0 == Width_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ColorMode_read = 1'b1;
    end else begin
        ColorMode_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_blk_n = Height_empty_n;
    end else begin
        Height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_empty_n) | (1'b0 == Width_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_read = 1'b1;
    end else begin
        Height_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln938_reg_677 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutYUV_blk_n = OutYUV_empty_n;
    end else begin
        OutYUV_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln938_reg_677 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutYUV_read = 1'b1;
    end else begin
        OutYUV_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Width_blk_n = Width_empty_n;
    end else begin
        Width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ColorMode_empty_n) | (1'b0 == Width_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Width_read = 1'b1;
    end else begin
        Width_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln938_fu_355_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln936_fu_340_p2 == 1'd1) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln938_reg_677_pp0_iter1_reg == 1'd0)) begin
        if ((8'd0 == ColorMode_read_reg_635)) begin
            ap_phi_mux_axi_data_V_1_0_1_i_phi_fu_233_p6 = p_Result_0_1_i_fu_455_p5;
        end else if ((8'd1 == ColorMode_read_reg_635)) begin
            ap_phi_mux_axi_data_V_1_0_1_i_phi_fu_233_p6 = p_Result_11_0_1_i_fu_443_p5;
        end else if ((~(8'd0 == ColorMode_read_reg_635) & ~(8'd1 == ColorMode_read_reg_635))) begin
            ap_phi_mux_axi_data_V_1_0_1_i_phi_fu_233_p6 = p_Result_12_0_1_i_fu_467_p5;
        end else begin
            ap_phi_mux_axi_data_V_1_0_1_i_phi_fu_233_p6 = ap_phi_reg_pp0_iter2_axi_data_V_1_0_1_i_reg_230;
        end
    end else begin
        ap_phi_mux_axi_data_V_1_0_1_i_phi_fu_233_p6 = ap_phi_reg_pp0_iter2_axi_data_V_1_0_1_i_reg_230;
    end
end

always @ (*) begin
    if ((icmp_ln938_reg_677_pp0_iter1_reg == 1'd0)) begin
        if ((8'd0 == ColorMode_read_reg_635)) begin
            ap_phi_mux_axi_data_V_1_0_2_i_phi_fu_244_p6 = p_Result_0_2_i_fu_491_p5;
        end else if ((8'd1 == ColorMode_read_reg_635)) begin
            ap_phi_mux_axi_data_V_1_0_2_i_phi_fu_244_p6 = p_Result_11_0_2_i_fu_479_p5;
        end else if ((~(8'd0 == ColorMode_read_reg_635) & ~(8'd1 == ColorMode_read_reg_635))) begin
            ap_phi_mux_axi_data_V_1_0_2_i_phi_fu_244_p6 = p_Result_12_0_2_i_fu_503_p5;
        end else begin
            ap_phi_mux_axi_data_V_1_0_2_i_phi_fu_244_p6 = ap_phi_reg_pp0_iter2_axi_data_V_1_0_2_i_reg_241;
        end
    end else begin
        ap_phi_mux_axi_data_V_1_0_2_i_phi_fu_244_p6 = ap_phi_reg_pp0_iter2_axi_data_V_1_0_2_i_reg_241;
    end
end

always @ (*) begin
    if ((icmp_ln938_reg_677_pp0_iter1_reg == 1'd0)) begin
        if ((8'd0 == ColorMode_read_reg_635)) begin
            ap_phi_mux_axi_data_V_1_1_0_i_phi_fu_255_p6 = p_Result_1_i_fu_527_p5;
        end else if ((8'd1 == ColorMode_read_reg_635)) begin
            ap_phi_mux_axi_data_V_1_1_0_i_phi_fu_255_p6 = p_Result_11_1_i_fu_515_p5;
        end else if ((~(8'd0 == ColorMode_read_reg_635) & ~(8'd1 == ColorMode_read_reg_635))) begin
            ap_phi_mux_axi_data_V_1_1_0_i_phi_fu_255_p6 = p_Result_12_1_i_fu_539_p5;
        end else begin
            ap_phi_mux_axi_data_V_1_1_0_i_phi_fu_255_p6 = ap_phi_reg_pp0_iter2_axi_data_V_1_1_0_i_reg_252;
        end
    end else begin
        ap_phi_mux_axi_data_V_1_1_0_i_phi_fu_255_p6 = ap_phi_reg_pp0_iter2_axi_data_V_1_1_0_i_reg_252;
    end
end

always @ (*) begin
    if ((icmp_ln938_reg_677_pp0_iter1_reg == 1'd0)) begin
        if ((8'd0 == ColorMode_read_reg_635)) begin
            ap_phi_mux_axi_data_V_1_1_1_i_phi_fu_266_p6 = p_Result_1_1_i_fu_563_p5;
        end else if ((8'd1 == ColorMode_read_reg_635)) begin
            ap_phi_mux_axi_data_V_1_1_1_i_phi_fu_266_p6 = p_Result_11_1_1_i_fu_551_p5;
        end else if ((~(8'd0 == ColorMode_read_reg_635) & ~(8'd1 == ColorMode_read_reg_635))) begin
            ap_phi_mux_axi_data_V_1_1_1_i_phi_fu_266_p6 = p_Result_12_1_1_i_fu_575_p5;
        end else begin
            ap_phi_mux_axi_data_V_1_1_1_i_phi_fu_266_p6 = ap_phi_reg_pp0_iter2_axi_data_V_1_1_1_i_reg_263;
        end
    end else begin
        ap_phi_mux_axi_data_V_1_1_1_i_phi_fu_266_p6 = ap_phi_reg_pp0_iter2_axi_data_V_1_1_1_i_reg_263;
    end
end

always @ (*) begin
    if ((icmp_ln938_reg_677_pp0_iter1_reg == 1'd0)) begin
        if ((8'd0 == ColorMode_read_reg_635)) begin
            ap_phi_mux_axi_data_V_1_1_2_i_phi_fu_278_p6 = p_Result_1_2_i_fu_599_p5;
        end else if ((8'd1 == ColorMode_read_reg_635)) begin
            ap_phi_mux_axi_data_V_1_1_2_i_phi_fu_278_p6 = p_Result_11_1_2_i_fu_587_p5;
        end else if ((~(8'd0 == ColorMode_read_reg_635) & ~(8'd1 == ColorMode_read_reg_635))) begin
            ap_phi_mux_axi_data_V_1_1_2_i_phi_fu_278_p6 = p_Result_12_1_2_i_fu_611_p5;
        end else begin
            ap_phi_mux_axi_data_V_1_1_2_i_phi_fu_278_p6 = ap_phi_reg_pp0_iter2_axi_data_V_1_1_2_i_reg_274;
        end
    end else begin
        ap_phi_mux_axi_data_V_1_1_2_i_phi_fu_278_p6 = ap_phi_reg_pp0_iter2_axi_data_V_1_1_2_i_reg_274;
    end
end

always @ (*) begin
    if (((icmp_ln938_reg_677_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_sof_3_phi_fu_210_p4 = 1'd0;
    end else begin
        ap_phi_mux_sof_3_phi_fu_210_p4 = sof_3_reg_205;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln936_fu_340_p2 == 1'd1) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln938_reg_677_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln938_reg_677_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int_regslice;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln938_reg_677_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_video_TVALID_int_regslice = 1'b1;
    end else begin
        m_axis_video_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == ColorMode_empty_n) | (1'b0 == Width_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln936_fu_340_p2 == 1'd1) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln936_fu_340_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (cmp31208_i_reg_654 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln936_fu_340_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0) & (cmp31208_i_reg_654 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln938_reg_677_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (m_axis_video_TREADY_int_regslice == 1'b0)) | ((icmp_ln938_reg_677_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (m_axis_video_TREADY_int_regslice == 1'b0)) | ((icmp_ln938_reg_677 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == OutYUV_empty_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln938_reg_677_pp0_iter2_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln938_reg_677_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)))) | ((icmp_ln938_reg_677 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == OutYUV_empty_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln938_reg_677_pp0_iter2_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state6_io) | ((icmp_ln938_reg_677_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)))) | ((icmp_ln938_reg_677 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == OutYUV_empty_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ColorMode_empty_n) | (1'b0 == Width_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((icmp_ln938_reg_677 == 1'd0) & (1'b0 == OutYUV_empty_n));
end

always @ (*) begin
    ap_block_state6_io = ((icmp_ln938_reg_677_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((icmp_ln938_reg_677_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((icmp_ln938_reg_677_pp0_iter2_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter3 = ((icmp_ln938_reg_677_pp0_iter2_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_condition_206 = (~(8'd0 == ColorMode_read_reg_635) & ~(8'd1 == ColorMode_read_reg_635) & (icmp_ln938_reg_677 == 1'd0));
end

always @ (*) begin
    ap_condition_257 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_axi_data_V_1_0_0_i_reg_219 = 'bx;

assign ap_phi_reg_pp0_iter2_axi_data_V_1_0_1_i_reg_230 = 'bx;

assign ap_phi_reg_pp0_iter2_axi_data_V_1_0_2_i_reg_241 = 'bx;

assign ap_phi_reg_pp0_iter2_axi_data_V_1_1_0_i_reg_252 = 'bx;

assign ap_phi_reg_pp0_iter2_axi_data_V_1_1_1_i_reg_263 = 'bx;

assign ap_phi_reg_pp0_iter2_axi_data_V_1_1_2_i_reg_274 = 'bx;

assign cmp31208_i_fu_325_p2 = ((div217_i_fu_305_p4 == 11'd0) ? 1'b1 : 1'b0);

assign div217_i_cast_fu_315_p1 = div217_i_fu_305_p4;

assign div217_i_fu_305_p4 = {{grp_reg_unsigned_short_s_fu_294_ap_return[11:1]}};

assign i_1_fu_331_p2 = (i_reg_183 + 12'd1);

assign icmp_ln936_fu_340_p2 = ((i_reg_183 == rows_reg_639) ? 1'b1 : 1'b0);

assign icmp_ln938_fu_355_p2 = ((j_reg_194 == div217_i_reg_644) ? 1'b1 : 1'b0);

assign icmp_ln951_fu_360_p2 = ((zext_ln938_fu_351_p1 == sub_i_reg_649) ? 1'b1 : 1'b0);

assign j_1_fu_345_p2 = (j_reg_194 + 11'd1);

assign m_axis_video_TVALID = regslice_both_AXI_video_strm_V_data_V_U_vld_out;

assign p_Result_0_1_i_fu_455_p5 = {{ap_phi_reg_pp0_iter2_axi_data_V_1_0_0_i_reg_219[47:16]}, {trunc_ln145_2_reg_697}, {ap_phi_reg_pp0_iter2_axi_data_V_1_0_0_i_reg_219[7:0]}};

assign p_Result_0_2_i_fu_491_p5 = {{ap_phi_mux_axi_data_V_1_0_1_i_phi_fu_233_p6[47:24]}, {trunc_ln145_reg_686}, {ap_phi_mux_axi_data_V_1_0_1_i_phi_fu_233_p6[15:0]}};

assign p_Result_0_i_fu_427_p3 = {{40'd1099511627775}, {trunc_ln145_1_fu_369_p4}};

assign p_Result_11_0_1_i_fu_443_p5 = {{ap_phi_reg_pp0_iter2_axi_data_V_1_0_0_i_reg_219[47:16]}, {trunc_ln145_1_reg_691}, {ap_phi_reg_pp0_iter2_axi_data_V_1_0_0_i_reg_219[7:0]}};

assign p_Result_11_0_2_i_fu_479_p5 = {{ap_phi_mux_axi_data_V_1_0_1_i_phi_fu_233_p6[47:24]}, {trunc_ln145_2_reg_697}, {ap_phi_mux_axi_data_V_1_0_1_i_phi_fu_233_p6[15:0]}};

assign p_Result_11_0_i_fu_419_p3 = {{40'd1099511627775}, {trunc_ln145_fu_365_p1}};

assign p_Result_11_1_1_i_fu_551_p5 = {{ap_phi_mux_axi_data_V_1_1_0_i_phi_fu_255_p6[47:40]}, {trunc_ln145_4_reg_711}, {ap_phi_mux_axi_data_V_1_1_0_i_phi_fu_255_p6[31:0]}};

assign p_Result_11_1_2_i_fu_587_p5 = {{trunc_ln145_5_reg_718}, {ap_phi_mux_axi_data_V_1_1_1_i_phi_fu_266_p6[39:0]}};

assign p_Result_11_1_i_fu_515_p5 = {{ap_phi_mux_axi_data_V_1_0_2_i_phi_fu_244_p6[47:32]}, {trunc_ln145_3_reg_704}, {ap_phi_mux_axi_data_V_1_0_2_i_phi_fu_244_p6[23:0]}};

assign p_Result_12_0_1_i_fu_467_p5 = {{ap_phi_reg_pp0_iter2_axi_data_V_1_0_0_i_reg_219[47:16]}, {trunc_ln145_1_reg_691}, {ap_phi_reg_pp0_iter2_axi_data_V_1_0_0_i_reg_219[7:0]}};

assign p_Result_12_0_2_i_fu_503_p5 = {{ap_phi_mux_axi_data_V_1_0_1_i_phi_fu_233_p6[47:24]}, {trunc_ln145_3_reg_704}, {ap_phi_mux_axi_data_V_1_0_1_i_phi_fu_233_p6[15:0]}};

assign p_Result_12_0_i_fu_435_p3 = {{40'd1099511627775}, {trunc_ln145_fu_365_p1}};

assign p_Result_12_1_1_i_fu_575_p5 = {{ap_phi_mux_axi_data_V_1_1_0_i_phi_fu_255_p6[47:40]}, {trunc_ln145_5_reg_718}, {ap_phi_mux_axi_data_V_1_1_0_i_phi_fu_255_p6[31:0]}};

assign p_Result_12_1_2_i_fu_611_p5 = {{trunc_ln145_2_reg_697}, {ap_phi_mux_axi_data_V_1_1_1_i_phi_fu_266_p6[39:0]}};

assign p_Result_12_1_i_fu_539_p5 = {{ap_phi_mux_axi_data_V_1_0_2_i_phi_fu_244_p6[47:32]}, {trunc_ln145_4_reg_711}, {ap_phi_mux_axi_data_V_1_0_2_i_phi_fu_244_p6[23:0]}};

assign p_Result_1_1_i_fu_563_p5 = {{ap_phi_mux_axi_data_V_1_1_0_i_phi_fu_255_p6[47:40]}, {trunc_ln145_5_reg_718}, {ap_phi_mux_axi_data_V_1_1_0_i_phi_fu_255_p6[31:0]}};

assign p_Result_1_2_i_fu_599_p5 = {{trunc_ln145_3_reg_704}, {ap_phi_mux_axi_data_V_1_1_1_i_phi_fu_266_p6[39:0]}};

assign p_Result_1_i_fu_527_p5 = {{ap_phi_mux_axi_data_V_1_0_2_i_phi_fu_244_p6[47:32]}, {trunc_ln145_4_reg_711}, {ap_phi_mux_axi_data_V_1_0_2_i_phi_fu_244_p6[23:0]}};

assign sub_i_fu_319_p2 = ($signed(div217_i_cast_fu_315_p1) + $signed(12'd4095));

assign trunc_ln145_1_fu_369_p4 = {{OutYUV_dout[15:8]}};

assign trunc_ln145_fu_365_p1 = OutYUV_dout[7:0];

assign zext_ln938_fu_351_p1 = j_reg_194;

endmodule //bd_c2dc_vsc_0_MultiPixStream2AXIvideo
