// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_mix_0_0_v_mix_core_alpha_false_false_21 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        outLayer0_dout,
        outLayer0_empty_n,
        outLayer0_read,
        srcLayer1x_dout,
        srcLayer1x_empty_n,
        srcLayer1x_read,
        outLayer1_din,
        outLayer1_full_n,
        outLayer1_write,
        p_read_dout,
        p_read_empty_n,
        p_read_read,
        p_read1_dout,
        p_read1_empty_n,
        p_read1_read,
        hwReg_6_dout,
        hwReg_6_empty_n,
        hwReg_6_read,
        hwReg_152_dout,
        hwReg_152_empty_n,
        hwReg_152_read,
        hwReg_165_dout,
        hwReg_165_empty_n,
        hwReg_165_read,
        hwReg_178_dout,
        hwReg_178_empty_n,
        hwReg_178_read,
        hwReg_1811_dout,
        hwReg_1811_empty_n,
        hwReg_1811_read,
        hwReg_1914_dout,
        hwReg_1914_empty_n,
        hwReg_1914_read,
        hwReg_6_out_din,
        hwReg_6_out_full_n,
        hwReg_6_out_write,
        p_read_out_din,
        p_read_out_full_n,
        p_read_out_write,
        p_read1_out_din,
        p_read1_out_full_n,
        p_read1_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] outLayer0_dout;
input   outLayer0_empty_n;
output   outLayer0_read;
input  [47:0] srcLayer1x_dout;
input   srcLayer1x_empty_n;
output   srcLayer1x_read;
output  [47:0] outLayer1_din;
input   outLayer1_full_n;
output   outLayer1_write;
input  [11:0] p_read_dout;
input   p_read_empty_n;
output   p_read_read;
input  [11:0] p_read1_dout;
input   p_read1_empty_n;
output   p_read1_read;
input  [3:0] hwReg_6_dout;
input   hwReg_6_empty_n;
output   hwReg_6_read;
input  [15:0] hwReg_152_dout;
input   hwReg_152_empty_n;
output   hwReg_152_read;
input  [15:0] hwReg_165_dout;
input   hwReg_165_empty_n;
output   hwReg_165_read;
input  [15:0] hwReg_178_dout;
input   hwReg_178_empty_n;
output   hwReg_178_read;
input  [15:0] hwReg_1811_dout;
input   hwReg_1811_empty_n;
output   hwReg_1811_read;
input  [7:0] hwReg_1914_dout;
input   hwReg_1914_empty_n;
output   hwReg_1914_read;
output  [3:0] hwReg_6_out_din;
input   hwReg_6_out_full_n;
output   hwReg_6_out_write;
output  [11:0] p_read_out_din;
input   p_read_out_full_n;
output   p_read_out_write;
output  [11:0] p_read1_out_din;
input   p_read1_out_full_n;
output   p_read1_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg outLayer0_read;
reg srcLayer1x_read;
reg outLayer1_write;
reg p_read_read;
reg p_read1_read;
reg hwReg_6_read;
reg hwReg_152_read;
reg hwReg_165_read;
reg hwReg_178_read;
reg hwReg_1811_read;
reg hwReg_1914_read;
reg hwReg_6_out_write;
reg p_read_out_write;
reg p_read1_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    outLayer0_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln464_reg_457;
reg    srcLayer1x_blk_n;
reg   [0:0] and_ln475_3_reg_461;
reg    outLayer1_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln464_reg_457_pp0_iter1_reg;
reg    p_read_blk_n;
reg    p_read1_blk_n;
reg    hwReg_6_blk_n;
reg    hwReg_152_blk_n;
reg    hwReg_165_blk_n;
reg    hwReg_178_blk_n;
reg    hwReg_1811_blk_n;
reg    hwReg_1914_blk_n;
reg    hwReg_6_out_blk_n;
reg    p_read_out_blk_n;
reg    p_read1_out_blk_n;
reg   [10:0] x_reg_204;
reg   [11:0] height_reg_403;
reg   [15:0] layerStartY_reg_408;
wire   [16:0] add56_i_i_fu_253_p2;
reg   [16:0] add56_i_i_reg_413;
reg   [14:0] div60_cast_i_i_reg_418;
reg   [15:0] div66_cast_i_i_reg_423;
reg   [0:0] tmp_reg_428;
reg   [10:0] lshr_ln462_cast_i_reg_433;
wire   [11:0] y_11_fu_311_p2;
reg   [11:0] y_11_reg_438;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln462_fu_325_p2;
wire   [0:0] and_ln475_fu_346_p2;
reg   [0:0] and_ln475_reg_447;
wire   [10:0] x_11_fu_352_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op93_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln464_fu_366_p2;
wire   [0:0] and_ln475_3_fu_398_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [11:0] y_reg_193;
reg    ap_block_state1;
wire    ap_CS_fsm_state6;
wire   [47:0] ap_phi_reg_pp0_iter0_srcpix_val_V_5_0_in_in_i_i_reg_215;
reg   [47:0] ap_phi_reg_pp0_iter1_srcpix_val_V_5_0_in_in_i_i_reg_215;
reg   [47:0] ap_phi_reg_pp0_iter2_srcpix_val_V_5_0_in_in_i_i_reg_215;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] hwReg_1914_readcast_fu_225_p1;
wire   [15:0] hwReg_1914_readcast8_fu_235_p1;
wire   [15:0] shl_ln448_fu_229_p2;
wire   [16:0] trunc_ln448_cast_i_i_fu_249_p1;
wire   [16:0] layerStartY_cast_i_i_fu_245_p1;
wire   [15:0] shl_ln449_fu_239_p2;
wire   [16:0] trunc_ln449_cast_i_i_fu_273_p1;
wire   [16:0] layerStartX_cast_i_i_fu_259_p1;
wire   [16:0] add65_i_i_fu_277_p2;
wire   [15:0] zext_ln462_fu_317_p1;
wire   [0:0] ult_fu_330_p2;
wire   [16:0] zext_ln462_1_fu_321_p1;
wire   [0:0] notrhs_i_i_fu_341_p2;
wire   [0:0] rev_fu_335_p2;
wire   [14:0] zext_ln464_fu_358_p1;
wire   [0:0] icmp_ln475_fu_371_p2;
wire   [15:0] zext_ln464_1_fu_362_p1;
wire   [0:0] xor_ln475_fu_376_p2;
wire   [0:0] icmp_ln475_1_fu_382_p2;
wire   [0:0] and_ln475_1_fu_387_p2;
wire   [0:0] and_ln475_2_fu_393_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_251;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln462_fu_325_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln462_fu_325_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln462_fu_325_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_251)) begin
        if (((icmp_ln464_reg_457 == 1'd0) & (1'd1 == and_ln475_3_reg_461))) begin
            ap_phi_reg_pp0_iter2_srcpix_val_V_5_0_in_in_i_i_reg_215 <= srcLayer1x_dout;
        end else if (((1'd0 == and_ln475_3_reg_461) & (icmp_ln464_reg_457 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_srcpix_val_V_5_0_in_in_i_i_reg_215 <= outLayer0_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_srcpix_val_V_5_0_in_in_i_i_reg_215 <= ap_phi_reg_pp0_iter1_srcpix_val_V_5_0_in_in_i_i_reg_215;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln464_fu_366_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_reg_204 <= x_11_fu_352_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln462_fu_325_p2 == 1'd0))) begin
        x_reg_204 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_reg_193 <= y_11_reg_438;
    end else if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_193 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add56_i_i_reg_413 <= add56_i_i_fu_253_p2;
        div60_cast_i_i_reg_418 <= {{hwReg_152_dout[15:1]}};
        div66_cast_i_i_reg_423 <= {{add65_i_i_fu_277_p2[16:1]}};
        height_reg_403 <= p_read1_dout;
        layerStartY_reg_408 <= hwReg_165_dout;
        lshr_ln462_cast_i_reg_433 <= {{p_read_dout[11:1]}};
        tmp_reg_428 <= hwReg_6_dout[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln464_fu_366_p2 == 1'd0))) begin
        and_ln475_3_reg_461 <= and_ln475_3_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln462_fu_325_p2 == 1'd0))) begin
        and_ln475_reg_447 <= and_ln475_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_srcpix_val_V_5_0_in_in_i_i_reg_215 <= ap_phi_reg_pp0_iter0_srcpix_val_V_5_0_in_in_i_i_reg_215;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln464_reg_457 <= icmp_ln464_fu_366_p2;
        icmp_ln464_reg_457_pp0_iter1_reg <= icmp_ln464_reg_457;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_11_reg_438 <= y_11_fu_311_p2;
    end
end

always @ (*) begin
    if ((icmp_ln464_fu_366_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln462_fu_325_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln462_fu_325_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_152_blk_n = hwReg_152_empty_n;
    end else begin
        hwReg_152_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_152_read = 1'b1;
    end else begin
        hwReg_152_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_165_blk_n = hwReg_165_empty_n;
    end else begin
        hwReg_165_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_165_read = 1'b1;
    end else begin
        hwReg_165_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_178_blk_n = hwReg_178_empty_n;
    end else begin
        hwReg_178_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_178_read = 1'b1;
    end else begin
        hwReg_178_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_1811_blk_n = hwReg_1811_empty_n;
    end else begin
        hwReg_1811_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_1811_read = 1'b1;
    end else begin
        hwReg_1811_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_1914_blk_n = hwReg_1914_empty_n;
    end else begin
        hwReg_1914_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_1914_read = 1'b1;
    end else begin
        hwReg_1914_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_6_blk_n = hwReg_6_empty_n;
    end else begin
        hwReg_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_6_out_blk_n = hwReg_6_out_full_n;
    end else begin
        hwReg_6_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_6_out_write = 1'b1;
    end else begin
        hwReg_6_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_6_read = 1'b1;
    end else begin
        hwReg_6_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln464_reg_457 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outLayer0_blk_n = outLayer0_empty_n;
    end else begin
        outLayer0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln464_reg_457 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outLayer0_read = 1'b1;
    end else begin
        outLayer0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln464_reg_457_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outLayer1_blk_n = outLayer1_full_n;
    end else begin
        outLayer1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln464_reg_457_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outLayer1_write = 1'b1;
    end else begin
        outLayer1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_blk_n = p_read1_empty_n;
    end else begin
        p_read1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_out_blk_n = p_read1_out_full_n;
    end else begin
        p_read1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_out_write = 1'b1;
    end else begin
        p_read1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_read = 1'b1;
    end else begin
        p_read1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read_blk_n = p_read_empty_n;
    end else begin
        p_read_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read_out_blk_n = p_read_out_full_n;
    end else begin
        p_read_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read_out_write = 1'b1;
    end else begin
        p_read_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read_read = 1'b1;
    end else begin
        p_read_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln464_reg_457 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln475_3_reg_461))) begin
        srcLayer1x_blk_n = srcLayer1x_empty_n;
    end else begin
        srcLayer1x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op93_read_state4 == 1'b1))) begin
        srcLayer1x_read = 1'b1;
    end else begin
        srcLayer1x_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln462_fu_325_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln464_fu_366_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln464_fu_366_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add56_i_i_fu_253_p2 = (trunc_ln448_cast_i_i_fu_249_p1 + layerStartY_cast_i_i_fu_245_p1);

assign add65_i_i_fu_277_p2 = (trunc_ln449_cast_i_i_fu_273_p1 + layerStartX_cast_i_i_fu_259_p1);

assign and_ln475_1_fu_387_p2 = (xor_ln475_fu_376_p2 & icmp_ln475_1_fu_382_p2);

assign and_ln475_2_fu_393_p2 = (and_ln475_reg_447 & and_ln475_1_fu_387_p2);

assign and_ln475_3_fu_398_p2 = (tmp_reg_428 & and_ln475_2_fu_393_p2);

assign and_ln475_fu_346_p2 = (rev_fu_335_p2 & notrhs_i_i_fu_341_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln464_reg_457 == 1'd0) & (outLayer0_empty_n == 1'b0)) | ((srcLayer1x_empty_n == 1'b0) & (ap_predicate_op93_read_state4 == 1'b1)))) | ((outLayer1_full_n == 1'b0) & (icmp_ln464_reg_457_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln464_reg_457 == 1'd0) & (outLayer0_empty_n == 1'b0)) | ((srcLayer1x_empty_n == 1'b0) & (ap_predicate_op93_read_state4 == 1'b1)))) | ((outLayer1_full_n == 1'b0) & (icmp_ln464_reg_457_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln464_reg_457 == 1'd0) & (outLayer0_empty_n == 1'b0)) | ((srcLayer1x_empty_n == 1'b0) & (ap_predicate_op93_read_state4 == 1'b1)))) | ((outLayer1_full_n == 1'b0) & (icmp_ln464_reg_457_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_read1_out_full_n == 1'b0) | (p_read_out_full_n == 1'b0) | (hwReg_6_out_full_n == 1'b0) | (hwReg_1914_empty_n == 1'b0) | (hwReg_1811_empty_n == 1'b0) | (hwReg_178_empty_n == 1'b0) | (hwReg_165_empty_n == 1'b0) | (hwReg_152_empty_n == 1'b0) | (hwReg_6_empty_n == 1'b0) | (p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln464_reg_457 == 1'd0) & (outLayer0_empty_n == 1'b0)) | ((srcLayer1x_empty_n == 1'b0) & (ap_predicate_op93_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((outLayer1_full_n == 1'b0) & (icmp_ln464_reg_457_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_251 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_srcpix_val_V_5_0_in_in_i_i_reg_215 = 'bx;

always @ (*) begin
    ap_predicate_op93_read_state4 = ((icmp_ln464_reg_457 == 1'd0) & (1'd1 == and_ln475_3_reg_461));
end

assign hwReg_1914_readcast8_fu_235_p1 = hwReg_1914_dout;

assign hwReg_1914_readcast_fu_225_p1 = hwReg_1914_dout;

assign hwReg_6_out_din = hwReg_6_dout;

assign icmp_ln462_fu_325_p2 = ((y_reg_193 == height_reg_403) ? 1'b1 : 1'b0);

assign icmp_ln464_fu_366_p2 = ((x_reg_204 == lshr_ln462_cast_i_reg_433) ? 1'b1 : 1'b0);

assign icmp_ln475_1_fu_382_p2 = ((zext_ln464_1_fu_362_p1 < div66_cast_i_i_reg_423) ? 1'b1 : 1'b0);

assign icmp_ln475_fu_371_p2 = ((zext_ln464_fu_358_p1 < div60_cast_i_i_reg_418) ? 1'b1 : 1'b0);

assign layerStartX_cast_i_i_fu_259_p1 = hwReg_152_dout;

assign layerStartY_cast_i_i_fu_245_p1 = hwReg_165_dout;

assign notrhs_i_i_fu_341_p2 = ((zext_ln462_1_fu_321_p1 < add56_i_i_reg_413) ? 1'b1 : 1'b0);

assign outLayer1_din = ap_phi_reg_pp0_iter2_srcpix_val_V_5_0_in_in_i_i_reg_215;

assign p_read1_out_din = p_read1_dout;

assign p_read_out_din = p_read_dout;

assign rev_fu_335_p2 = (ult_fu_330_p2 ^ 1'd1);

assign shl_ln448_fu_229_p2 = hwReg_1811_dout << hwReg_1914_readcast_fu_225_p1;

assign shl_ln449_fu_239_p2 = hwReg_178_dout << hwReg_1914_readcast8_fu_235_p1;

assign trunc_ln448_cast_i_i_fu_249_p1 = shl_ln448_fu_229_p2;

assign trunc_ln449_cast_i_i_fu_273_p1 = shl_ln449_fu_239_p2;

assign ult_fu_330_p2 = ((zext_ln462_fu_317_p1 < layerStartY_reg_408) ? 1'b1 : 1'b0);

assign x_11_fu_352_p2 = (x_reg_204 + 11'd1);

assign xor_ln475_fu_376_p2 = (icmp_ln475_fu_371_p2 ^ 1'd1);

assign y_11_fu_311_p2 = (y_reg_193 + 12'd1);

assign zext_ln462_1_fu_321_p1 = y_reg_193;

assign zext_ln462_fu_317_p1 = y_reg_193;

assign zext_ln464_1_fu_362_p1 = x_reg_204;

assign zext_ln464_fu_358_p1 = x_reg_204;

endmodule //bd_v_mix_0_0_v_mix_core_alpha_false_false_21
