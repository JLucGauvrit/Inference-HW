// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_c2dc_hsc_0_MultiPixStream2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_out_420_dout,
        stream_out_420_empty_n,
        stream_out_420_read,
        Height,
        WidthOut,
        ColorModeOut,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_state4 = 6'd4;
parameter    ap_ST_fsm_state5 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state9 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] stream_out_420_dout;
input   stream_out_420_empty_n;
output   stream_out_420_read;
input  [15:0] Height;
input  [15:0] WidthOut;
input  [7:0] ColorModeOut;
output  [47:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [5:0] m_axis_video_TKEEP;
output  [5:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_out_420_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] mapComp_address0;
reg    mapComp_ce0;
wire   [2:0] mapComp_q0;
reg    stream_out_420_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln1351_reg_761;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln1351_reg_761_pp1_iter1_reg;
reg   [2:0] i_reg_228;
reg   [10:0] j_reg_265;
reg   [0:0] sof_2_reg_276;
wire   [11:0] trunc_ln1298_fu_291_p1;
wire   [4:0] sub_ln1344_fu_319_p2;
wire   [2:0] add_ln1342_fu_325_p2;
reg   [2:0] add_ln1342_reg_693;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1342_fu_331_p2;
reg   [0:0] icmp_ln1342_reg_698;
wire   [10:0] div168_cast_fu_403_p4;
wire    ap_CS_fsm_state4;
wire   [10:0] sub_fu_412_p2;
wire   [2:0] trunc_ln215_fu_418_p1;
reg   [2:0] trunc_ln215_reg_717;
wire   [2:0] trunc_ln215_1_fu_422_p1;
reg   [2:0] trunc_ln215_1_reg_722;
wire   [2:0] trunc_ln215_2_fu_426_p1;
reg   [2:0] trunc_ln215_2_reg_727;
wire   [2:0] trunc_ln215_3_fu_430_p1;
reg   [2:0] trunc_ln215_3_reg_732;
wire   [2:0] trunc_ln215_4_fu_434_p1;
reg   [2:0] trunc_ln215_4_reg_737;
wire   [2:0] trunc_ln215_5_fu_438_p1;
reg   [2:0] trunc_ln215_5_reg_742;
wire   [11:0] i_2_fu_442_p2;
reg   [11:0] i_2_reg_747;
wire    ap_CS_fsm_state5;
wire    regslice_both_AXI_video_strm_V_data_V_U_apdone_blk;
wire   [0:0] icmp_ln1348_fu_448_p2;
wire   [10:0] j_1_fu_453_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state6_pp1_stage0_iter0;
reg    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_state7_io;
reg    ap_block_state8_pp1_stage0_iter2;
reg    ap_block_state8_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln1351_fu_459_p2;
wire   [0:0] axi_last_V_fu_464_p2;
reg   [0:0] axi_last_V_reg_765;
reg    ap_block_state1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg    ap_condition_pp1_exit_iter1_state7;
reg   [2:0] ap_phi_mux_i_phi_fu_232_p4;
wire    ap_block_pp0_stage0;
reg   [11:0] i_1_reg_240;
wire    ap_CS_fsm_state9;
reg   [0:0] sof_reg_251;
reg   [0:0] ap_phi_mux_sof_2_phi_fu_281_p4;
wire   [63:0] zext_ln1344_2_fu_346_p1;
reg   [4:0] map_V_0_0131_fu_138;
wire   [4:0] zext_ln1344_fu_351_p1;
reg   [4:0] map_V_1_0132_fu_142;
reg   [4:0] map_V_2_0133_fu_146;
reg   [4:0] map_V_3_0134_fu_150;
reg   [4:0] map_V_4_0135_fu_154;
reg   [4:0] map_V_5_0136_fu_158;
reg    ap_block_pp1_stage0_01001;
wire   [1:0] trunc_ln1344_fu_295_p1;
wire   [3:0] trunc_ln1344_1_fu_307_p1;
wire   [4:0] tmp_20_cast_fu_299_p3;
wire   [4:0] tmp_21_cast_fu_311_p3;
wire   [4:0] zext_ln1344_1_fu_337_p1;
wire   [4:0] add_ln1344_fu_341_p2;
wire   [7:0] pix_val_V_0_fu_469_p1;
wire   [7:0] tmp_fu_523_p2;
wire   [7:0] tmp_fu_523_p3;
wire   [7:0] tmp_fu_523_p4;
wire   [7:0] tmp_fu_523_p5;
wire   [7:0] tmp_fu_523_p6;
wire   [7:0] tmp_7_fu_540_p2;
wire   [7:0] tmp_7_fu_540_p3;
wire   [7:0] tmp_7_fu_540_p4;
wire   [7:0] tmp_7_fu_540_p5;
wire   [7:0] tmp_7_fu_540_p6;
wire   [7:0] tmp_8_fu_557_p2;
wire   [7:0] tmp_8_fu_557_p3;
wire   [7:0] tmp_8_fu_557_p4;
wire   [7:0] tmp_8_fu_557_p5;
wire   [7:0] tmp_8_fu_557_p6;
wire   [7:0] tmp_9_fu_574_p2;
wire   [7:0] tmp_9_fu_574_p3;
wire   [7:0] tmp_9_fu_574_p4;
wire   [7:0] tmp_9_fu_574_p5;
wire   [7:0] tmp_9_fu_574_p6;
wire   [7:0] tmp_s_fu_591_p2;
wire   [7:0] tmp_s_fu_591_p3;
wire   [7:0] tmp_s_fu_591_p4;
wire   [7:0] tmp_s_fu_591_p5;
wire   [7:0] tmp_s_fu_591_p6;
wire   [7:0] tmp_1_fu_608_p2;
wire   [7:0] tmp_1_fu_608_p3;
wire   [7:0] tmp_1_fu_608_p4;
wire   [7:0] tmp_1_fu_608_p5;
wire   [7:0] tmp_1_fu_608_p6;
wire   [7:0] tmp_1_fu_608_p8;
wire   [7:0] tmp_s_fu_591_p8;
wire   [7:0] tmp_9_fu_574_p8;
wire   [7:0] tmp_8_fu_557_p8;
wire   [7:0] tmp_7_fu_540_p8;
wire   [7:0] tmp_fu_523_p8;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [47:0] m_axis_video_TDATA_int_regslice;
reg    m_axis_video_TVALID_int_regslice;
wire    m_axis_video_TREADY_int_regslice;
wire    regslice_both_AXI_video_strm_V_data_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_keep_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_strb_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_user_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_user_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_last_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_last_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_id_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_id_V_U_vld_out;
wire    regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk;
wire    regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy;
wire    regslice_both_AXI_video_strm_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

bd_c2dc_hsc_0_MultiPixStream2AXIvideo_mapComp #(
    .DataWidth( 3 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
mapComp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mapComp_address0),
    .ce0(mapComp_ce0),
    .q0(mapComp_q0)
);

bd_c2dc_hsc_0_mux_63_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_63_8_1_1_U183(
    .din0(pix_val_V_0_fu_469_p1),
    .din1(tmp_fu_523_p2),
    .din2(tmp_fu_523_p3),
    .din3(tmp_fu_523_p4),
    .din4(tmp_fu_523_p5),
    .din5(tmp_fu_523_p6),
    .din6(trunc_ln215_reg_717),
    .dout(tmp_fu_523_p8)
);

bd_c2dc_hsc_0_mux_63_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_63_8_1_1_U184(
    .din0(pix_val_V_0_fu_469_p1),
    .din1(tmp_7_fu_540_p2),
    .din2(tmp_7_fu_540_p3),
    .din3(tmp_7_fu_540_p4),
    .din4(tmp_7_fu_540_p5),
    .din5(tmp_7_fu_540_p6),
    .din6(trunc_ln215_1_reg_722),
    .dout(tmp_7_fu_540_p8)
);

bd_c2dc_hsc_0_mux_63_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_63_8_1_1_U185(
    .din0(pix_val_V_0_fu_469_p1),
    .din1(tmp_8_fu_557_p2),
    .din2(tmp_8_fu_557_p3),
    .din3(tmp_8_fu_557_p4),
    .din4(tmp_8_fu_557_p5),
    .din5(tmp_8_fu_557_p6),
    .din6(trunc_ln215_2_reg_727),
    .dout(tmp_8_fu_557_p8)
);

bd_c2dc_hsc_0_mux_63_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_63_8_1_1_U186(
    .din0(pix_val_V_0_fu_469_p1),
    .din1(tmp_9_fu_574_p2),
    .din2(tmp_9_fu_574_p3),
    .din3(tmp_9_fu_574_p4),
    .din4(tmp_9_fu_574_p5),
    .din5(tmp_9_fu_574_p6),
    .din6(trunc_ln215_3_reg_732),
    .dout(tmp_9_fu_574_p8)
);

bd_c2dc_hsc_0_mux_63_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_63_8_1_1_U187(
    .din0(pix_val_V_0_fu_469_p1),
    .din1(tmp_s_fu_591_p2),
    .din2(tmp_s_fu_591_p3),
    .din3(tmp_s_fu_591_p4),
    .din4(tmp_s_fu_591_p5),
    .din5(tmp_s_fu_591_p6),
    .din6(trunc_ln215_4_reg_737),
    .dout(tmp_s_fu_591_p8)
);

bd_c2dc_hsc_0_mux_63_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_63_8_1_1_U188(
    .din0(pix_val_V_0_fu_469_p1),
    .din1(tmp_1_fu_608_p2),
    .din2(tmp_1_fu_608_p3),
    .din3(tmp_1_fu_608_p4),
    .din4(tmp_1_fu_608_p5),
    .din5(tmp_1_fu_608_p6),
    .din6(trunc_ln215_5_reg_742),
    .dout(tmp_1_fu_608_p8)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 48 ))
regslice_both_AXI_video_strm_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_video_TDATA_int_regslice),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(m_axis_video_TREADY_int_regslice),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_AXI_video_strm_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_data_V_U_apdone_blk)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 6 ))
regslice_both_AXI_video_strm_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(6'd63),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_AXI_video_strm_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 6 ))
regslice_both_AXI_video_strm_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(6'd0),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_AXI_video_strm_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(ap_phi_mux_sof_2_phi_fu_281_p4),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_AXI_video_strm_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_user_V_U_apdone_blk)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(axi_last_V_reg_765),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_AXI_video_strm_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_last_V_U_apdone_blk)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_AXI_video_strm_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_id_V_U_apdone_blk)
);

bd_c2dc_hsc_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_AXI_video_strm_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd0),
    .vld_in(m_axis_video_TVALID_int_regslice),
    .ack_in(regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_AXI_video_strm_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_448_p2 == 1'd1) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_448_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state7) & (ap_enable_reg_pp1_iter0 == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_448_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter1_state7))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_448_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_240 <= i_2_reg_747;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_240 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1342_reg_698 == 1'd0))) begin
        i_reg_228 <= add_ln1342_reg_693;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_228 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_448_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        j_reg_265 <= 11'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln1351_fu_459_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_reg_265 <= j_1_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_448_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        sof_2_reg_276 <= sof_reg_251;
    end else if (((icmp_ln1351_reg_761_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sof_2_reg_276 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sof_reg_251 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sof_reg_251 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln1342_reg_693 <= add_ln1342_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln1351_fu_459_p2 == 1'd0))) begin
        axi_last_V_reg_765 <= axi_last_V_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        i_2_reg_747 <= i_2_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1342_reg_698 <= icmp_ln1342_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln1351_reg_761 <= icmp_ln1351_fu_459_p2;
        icmp_ln1351_reg_761_pp1_iter1_reg <= icmp_ln1351_reg_761;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_228 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_0_0131_fu_138[2 : 0] <= zext_ln1344_fu_351_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_228 == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_1_0132_fu_142[2 : 0] <= zext_ln1344_fu_351_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_228 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_2_0133_fu_146[2 : 0] <= zext_ln1344_fu_351_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_228 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_3_0134_fu_150[2 : 0] <= zext_ln1344_fu_351_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_228 == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_4_0135_fu_154[2 : 0] <= zext_ln1344_fu_351_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & ((i_reg_228 == 3'd5) | ((i_reg_228 == 3'd6) | (i_reg_228 == 3'd7))))) begin
        map_V_5_0136_fu_158[2 : 0] <= zext_ln1344_fu_351_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln215_1_reg_722 <= trunc_ln215_1_fu_422_p1;
        trunc_ln215_2_reg_727 <= trunc_ln215_2_fu_426_p1;
        trunc_ln215_3_reg_732 <= trunc_ln215_3_fu_430_p1;
        trunc_ln215_4_reg_737 <= trunc_ln215_4_fu_434_p1;
        trunc_ln215_5_reg_742 <= trunc_ln215_5_fu_438_p1;
        trunc_ln215_reg_717 <= trunc_ln215_fu_418_p1;
    end
end

always @ (*) begin
    if ((icmp_ln1342_fu_331_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_condition_pp1_exit_iter1_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter1_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln1351_fu_459_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_448_p2 == 1'd1) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1342_reg_698 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_232_p4 = add_ln1342_reg_693;
    end else begin
        ap_phi_mux_i_phi_fu_232_p4 = i_reg_228;
    end
end

always @ (*) begin
    if (((icmp_ln1351_reg_761_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_sof_2_phi_fu_281_p4 = 1'd0;
    end else begin
        ap_phi_mux_sof_2_phi_fu_281_p4 = sof_2_reg_276;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_448_p2 == 1'd1) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln1351_reg_761_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln1351_reg_761 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int_regslice;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1351_reg_761 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        m_axis_video_TVALID_int_regslice = 1'b1;
    end else begin
        m_axis_video_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mapComp_ce0 = 1'b1;
    end else begin
        mapComp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1351_reg_761 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        stream_out_420_blk_n = stream_out_420_empty_n;
    end else begin
        stream_out_420_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1351_reg_761 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        stream_out_420_read = 1'b1;
    end else begin
        stream_out_420_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1342_fu_331_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln1342_fu_331_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_448_p2 == 1'd1) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln1348_fu_448_p2 == 1'd0) & (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1342_fu_325_p2 = (ap_phi_mux_i_phi_fu_232_p4 + 3'd1);

assign add_ln1344_fu_341_p2 = (sub_ln1344_fu_319_p2 + zext_ln1344_1_fu_337_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln1351_reg_761_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (m_axis_video_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (((icmp_ln1351_reg_761 == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)) | ((icmp_ln1351_reg_761 == 1'd0) & (stream_out_420_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter2 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((icmp_ln1351_reg_761_pp1_iter1_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln1351_reg_761 == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)) | ((icmp_ln1351_reg_761 == 1'd0) & (stream_out_420_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter2 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((icmp_ln1351_reg_761_pp1_iter1_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state7_io) | ((icmp_ln1351_reg_761 == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)) | ((icmp_ln1351_reg_761 == 1'd0) & (stream_out_420_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((icmp_ln1351_reg_761 == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = (((icmp_ln1351_reg_761 == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0)) | ((icmp_ln1351_reg_761 == 1'd0) & (stream_out_420_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state8_io = ((icmp_ln1351_reg_761_pp1_iter1_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp1_stage0_iter2 = ((icmp_ln1351_reg_761_pp1_iter1_reg == 1'd0) & (m_axis_video_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign axi_last_V_fu_464_p2 = ((j_reg_265 == sub_fu_412_p2) ? 1'b1 : 1'b0);

assign div168_cast_fu_403_p4 = {{WidthOut[11:1]}};

assign i_2_fu_442_p2 = (i_1_reg_240 + 12'd1);

assign icmp_ln1342_fu_331_p2 = ((ap_phi_mux_i_phi_fu_232_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln1348_fu_448_p2 = ((i_1_reg_240 == trunc_ln1298_fu_291_p1) ? 1'b1 : 1'b0);

assign icmp_ln1351_fu_459_p2 = ((j_reg_265 == div168_cast_fu_403_p4) ? 1'b1 : 1'b0);

assign j_1_fu_453_p2 = (j_reg_265 + 11'd1);

assign m_axis_video_TDATA_int_regslice = {{{{{{tmp_1_fu_608_p8}, {tmp_s_fu_591_p8}}, {tmp_9_fu_574_p8}}, {tmp_8_fu_557_p8}}, {tmp_7_fu_540_p8}}, {tmp_fu_523_p8}};

assign m_axis_video_TVALID = regslice_both_AXI_video_strm_V_data_V_U_vld_out;

assign mapComp_address0 = zext_ln1344_2_fu_346_p1;

assign pix_val_V_0_fu_469_p1 = stream_out_420_dout[7:0];

assign sub_fu_412_p2 = ($signed(div168_cast_fu_403_p4) + $signed(11'd2047));

assign sub_ln1344_fu_319_p2 = (tmp_20_cast_fu_299_p3 - tmp_21_cast_fu_311_p3);

assign tmp_1_fu_608_p2 = {{stream_out_420_dout[15:8]}};

assign tmp_1_fu_608_p3 = {{stream_out_420_dout[23:16]}};

assign tmp_1_fu_608_p4 = {{stream_out_420_dout[31:24]}};

assign tmp_1_fu_608_p5 = {{stream_out_420_dout[39:32]}};

assign tmp_1_fu_608_p6 = {{stream_out_420_dout[47:40]}};

assign tmp_20_cast_fu_299_p3 = {{trunc_ln1344_fu_295_p1}, {3'd0}};

assign tmp_21_cast_fu_311_p3 = {{trunc_ln1344_1_fu_307_p1}, {1'd0}};

assign tmp_7_fu_540_p2 = {{stream_out_420_dout[15:8]}};

assign tmp_7_fu_540_p3 = {{stream_out_420_dout[23:16]}};

assign tmp_7_fu_540_p4 = {{stream_out_420_dout[31:24]}};

assign tmp_7_fu_540_p5 = {{stream_out_420_dout[39:32]}};

assign tmp_7_fu_540_p6 = {{stream_out_420_dout[47:40]}};

assign tmp_8_fu_557_p2 = {{stream_out_420_dout[15:8]}};

assign tmp_8_fu_557_p3 = {{stream_out_420_dout[23:16]}};

assign tmp_8_fu_557_p4 = {{stream_out_420_dout[31:24]}};

assign tmp_8_fu_557_p5 = {{stream_out_420_dout[39:32]}};

assign tmp_8_fu_557_p6 = {{stream_out_420_dout[47:40]}};

assign tmp_9_fu_574_p2 = {{stream_out_420_dout[15:8]}};

assign tmp_9_fu_574_p3 = {{stream_out_420_dout[23:16]}};

assign tmp_9_fu_574_p4 = {{stream_out_420_dout[31:24]}};

assign tmp_9_fu_574_p5 = {{stream_out_420_dout[39:32]}};

assign tmp_9_fu_574_p6 = {{stream_out_420_dout[47:40]}};

assign tmp_fu_523_p2 = {{stream_out_420_dout[15:8]}};

assign tmp_fu_523_p3 = {{stream_out_420_dout[23:16]}};

assign tmp_fu_523_p4 = {{stream_out_420_dout[31:24]}};

assign tmp_fu_523_p5 = {{stream_out_420_dout[39:32]}};

assign tmp_fu_523_p6 = {{stream_out_420_dout[47:40]}};

assign tmp_s_fu_591_p2 = {{stream_out_420_dout[15:8]}};

assign tmp_s_fu_591_p3 = {{stream_out_420_dout[23:16]}};

assign tmp_s_fu_591_p4 = {{stream_out_420_dout[31:24]}};

assign tmp_s_fu_591_p5 = {{stream_out_420_dout[39:32]}};

assign tmp_s_fu_591_p6 = {{stream_out_420_dout[47:40]}};

assign trunc_ln1298_fu_291_p1 = Height[11:0];

assign trunc_ln1344_1_fu_307_p1 = ColorModeOut[3:0];

assign trunc_ln1344_fu_295_p1 = ColorModeOut[1:0];

assign trunc_ln215_1_fu_422_p1 = map_V_1_0132_fu_142[2:0];

assign trunc_ln215_2_fu_426_p1 = map_V_2_0133_fu_146[2:0];

assign trunc_ln215_3_fu_430_p1 = map_V_3_0134_fu_150[2:0];

assign trunc_ln215_4_fu_434_p1 = map_V_4_0135_fu_154[2:0];

assign trunc_ln215_5_fu_438_p1 = map_V_5_0136_fu_158[2:0];

assign trunc_ln215_fu_418_p1 = map_V_0_0131_fu_138[2:0];

assign zext_ln1344_1_fu_337_p1 = ap_phi_mux_i_phi_fu_232_p4;

assign zext_ln1344_2_fu_346_p1 = add_ln1344_fu_341_p2;

assign zext_ln1344_fu_351_p1 = mapComp_q0;

always @ (posedge ap_clk) begin
    map_V_0_0131_fu_138[4:3] <= 2'b00;
    map_V_1_0132_fu_142[4:3] <= 2'b00;
    map_V_2_0133_fu_146[4:3] <= 2'b00;
    map_V_3_0134_fu_150[4:3] <= 2'b00;
    map_V_4_0135_fu_154[4:3] <= 2'b00;
    map_V_5_0136_fu_158[4:3] <= 2'b00;
end

endmodule //bd_c2dc_hsc_0_MultiPixStream2AXIvideo
