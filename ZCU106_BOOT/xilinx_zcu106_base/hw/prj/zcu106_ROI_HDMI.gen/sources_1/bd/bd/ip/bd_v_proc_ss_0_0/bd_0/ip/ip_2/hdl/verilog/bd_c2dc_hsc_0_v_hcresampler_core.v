// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_c2dc_hsc_0_v_hcresampler_core (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        srcImg_dout,
        srcImg_empty_n,
        srcImg_read,
        height,
        width,
        outImg_din,
        outImg_full_n,
        outImg_write,
        bPassThru_dout,
        bPassThru_empty_n,
        bPassThru_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] srcImg_dout;
input   srcImg_empty_n;
output   srcImg_read;
input  [15:0] height;
input  [15:0] width;
output  [47:0] outImg_din;
input   outImg_full_n;
output   outImg_write;
input   bPassThru_dout;
input   bPassThru_empty_n;
output   bPassThru_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg srcImg_read;
reg[47:0] outImg_din;
reg outImg_write;
reg bPassThru_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    srcImg_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1448_reg_1017;
reg   [0:0] icmp_ln1458_reg_1021;
reg    outImg_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln1448_reg_1017_pp0_iter1_reg;
reg   [0:0] tmp_2_reg_1039;
reg   [0:0] tmp_2_reg_1039_pp0_iter1_reg;
reg   [0:0] bPassThru_read_reg_978;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_2_reg_1039_pp0_iter2_reg;
reg    bPassThru_blk_n;
reg   [14:0] x_reg_240;
wire   [15:0] zext_ln1411_fu_257_p1;
reg   [15:0] zext_ln1411_reg_983;
wire   [14:0] lshr_ln_fu_261_p4;
wire   [15:0] loopWidth_fu_275_p2;
reg   [15:0] loopWidth_reg_993;
wire   [2:0] select_ln1561_fu_281_p3;
reg   [2:0] select_ln1561_reg_998;
wire   [14:0] y_2_fu_289_p2;
reg   [14:0] y_2_reg_1003;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1445_fu_299_p2;
wire   [14:0] x_2_fu_304_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op70_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_predicate_op146_write_state5;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_predicate_op164_write_state6;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1448_fu_314_p2;
wire   [0:0] icmp_ln1458_fu_324_p2;
reg   [0:0] icmp_ln1458_reg_1021_pp0_iter1_reg;
wire   [0:0] cmp119_i_fu_329_p2;
reg   [0:0] cmp119_i_reg_1027;
reg   [0:0] cmp119_i_reg_1027_pp0_iter1_reg;
wire   [7:0] select_ln1561_1_fu_665_p3;
reg   [7:0] select_ln1561_1_reg_1043;
reg   [7:0] outpix_val_V_1_reg_1048;
wire   [7:0] tmp_1_fu_682_p10;
reg   [7:0] tmp_1_reg_1053;
reg   [7:0] outpix_val_V_4_reg_1058;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state5;
reg   [14:0] y_reg_229;
reg    ap_block_state1;
wire    ap_CS_fsm_state7;
reg   [7:0] mpix_y_val_V_0_fu_102;
wire   [7:0] inpix_val_V_0_fu_343_p1;
reg   [7:0] mpix_cb_val_V_0_fu_106;
reg   [7:0] mpix_cr_val_V_0_fu_110;
reg   [7:0] mpix_y_val_V_1_fu_114;
reg   [7:0] mpix_cb_val_V_1_fu_118;
reg   [7:0] mpix_cr_val_V_1_fu_122;
reg   [7:0] pixbuf_cr_val_V_4_0_0_i_fu_126;
reg   [7:0] pixbuf_cr_val_V_3_0_0_i_fu_130;
wire   [7:0] select_ln1539_10_fu_560_p3;
reg   [7:0] pixbuf_cr_val_V_2_0_0_i_fu_134;
wire   [7:0] select_ln1539_9_fu_553_p3;
reg   [7:0] mpix_y_val_V_0_6_fu_138;
reg   [7:0] mpix_y_val_V_1_7_fu_142;
reg   [7:0] mpix_cb_val_V_0_4_fu_146;
reg   [7:0] mpix_cb_val_V_1_1_fu_150;
reg   [7:0] mpix_cr_val_V_0_3_fu_154;
reg   [7:0] mpix_cr_val_V_1_1_fu_158;
reg   [7:0] pixbuf_cb_val_V_2_0_0_i_fu_162;
wire   [7:0] select_ln1539_7_fu_539_p3;
reg   [7:0] pixbuf_cb_val_V_3_0_0_i_fu_166;
wire   [7:0] select_ln1539_6_fu_532_p3;
reg   [7:0] mpix_cb_val_V_1_2_fu_170;
reg   [7:0] mpix_y_val_V_1_8_fu_174;
reg   [7:0] mpix_y_val_V_0_7_fu_178;
reg   [7:0] pixbuf_y_val_V_2_0_i_03_fu_182;
reg   [7:0] pixbuf_y_val_V_3_0_i_04_fu_186;
reg   [7:0] mpix_y_val_V_0_8_fu_190;
reg   [7:0] mpix_y_val_V_1_9_fu_194;
wire   [47:0] or_ln174_i_fu_731_p7;
reg    ap_block_pp0_stage0_01001;
wire   [47:0] or_ln174_2_i_fu_814_p7;
wire   [0:0] xOffset_fu_251_p0;
wire   [0:0] xOffset_fu_251_p2;
wire   [15:0] zext_ln1443_fu_271_p1;
wire   [0:0] select_ln1561_fu_281_p0;
wire   [15:0] zext_ln1445_fu_295_p1;
wire   [15:0] zext_ln1448_fu_310_p1;
wire   [15:0] out_x_fu_319_p2;
wire   [7:0] select_ln1527_fu_511_p3;
wire   [7:0] select_ln1527_1_fu_518_p3;
wire   [7:0] select_ln1539_11_fu_567_p3;
wire   [7:0] select_ln1539_8_fu_546_p3;
wire   [8:0] mul_i_i270_i_fu_574_p3;
wire   [9:0] mul_i_i270_cast_i_fu_586_p1;
wire   [9:0] select_ln1539_15_cast_i_fu_582_p1;
wire   [8:0] select_ln1539_7_cast_fu_590_p1;
wire   [8:0] tmp7_fu_600_p2;
wire   [9:0] tmp7_cast_fu_606_p1;
wire   [9:0] tmp_fu_594_p2;
wire   [7:0] select_ln1539_12_fu_616_p3;
wire   [7:0] select_ln1539_fu_525_p3;
wire   [8:0] mul_i_i_i_fu_623_p3;
wire   [9:0] mul_i_i_cast_i_fu_635_p1;
wire   [9:0] select_ln1539_11_cast_i_fu_631_p1;
wire   [8:0] select_ln1539_11_cast_fu_639_p1;
wire   [8:0] tmp9_fu_649_p2;
wire   [9:0] tmp9_cast_fu_655_p1;
wire   [9:0] tmp8_fu_643_p2;
wire   [9:0] addconv_i_fu_610_p2;
wire   [9:0] addconv6_i_fu_659_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

bd_c2dc_hsc_0_mux_83_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_83_8_1_1_U170(
    .din0(pixbuf_y_val_V_2_0_i_03_fu_182),
    .din1(pixbuf_y_val_V_3_0_i_04_fu_186),
    .din2(mpix_y_val_V_0_8_fu_190),
    .din3(mpix_y_val_V_1_9_fu_194),
    .din4(mpix_y_val_V_0_7_fu_178),
    .din5(mpix_y_val_V_1_8_fu_174),
    .din6(mpix_y_val_V_0_6_fu_138),
    .din7(mpix_y_val_V_1_7_fu_142),
    .din8(select_ln1561_reg_998),
    .dout(tmp_1_fu_682_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_299_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_299_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter2_state5)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_299_p2 == 1'd1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_299_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1448_fu_314_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_reg_240 <= x_2_fu_304_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_299_p2 == 1'd1))) begin
        x_reg_240 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_reg_229 <= y_2_reg_1003;
    end else if ((~((ap_start == 1'b0) | (bPassThru_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_229 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bPassThru_read_reg_978 <= bPassThru_dout;
        loopWidth_reg_993 <= loopWidth_fu_275_p2;
        select_ln1561_reg_998[2] <= select_ln1561_fu_281_p3[2];
        zext_ln1411_reg_983[0] <= zext_ln1411_fu_257_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1448_fu_314_p2 == 1'd1))) begin
        cmp119_i_reg_1027 <= cmp119_i_fu_329_p2;
        icmp_ln1458_reg_1021 <= icmp_ln1458_fu_324_p2;
        tmp_2_reg_1039 <= out_x_fu_319_p2[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp119_i_reg_1027_pp0_iter1_reg <= cmp119_i_reg_1027;
        icmp_ln1448_reg_1017 <= icmp_ln1448_fu_314_p2;
        icmp_ln1448_reg_1017_pp0_iter1_reg <= icmp_ln1448_reg_1017;
        icmp_ln1458_reg_1021_pp0_iter1_reg <= icmp_ln1458_reg_1021;
        tmp_2_reg_1039_pp0_iter1_reg <= tmp_2_reg_1039;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1458_reg_1021 == 1'd1) & (icmp_ln1448_reg_1017 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mpix_cb_val_V_0_4_fu_146 <= {{srcImg_dout[15:8]}};
        mpix_cb_val_V_0_fu_106 <= {{srcImg_dout[15:8]}};
        mpix_cb_val_V_1_1_fu_150 <= {{srcImg_dout[39:32]}};
        mpix_cb_val_V_1_fu_118 <= {{srcImg_dout[39:32]}};
        mpix_cr_val_V_0_3_fu_154 <= {{srcImg_dout[23:16]}};
        mpix_cr_val_V_0_fu_110 <= {{srcImg_dout[23:16]}};
        mpix_cr_val_V_1_1_fu_158 <= {{srcImg_dout[47:40]}};
        mpix_cr_val_V_1_fu_122 <= {{srcImg_dout[47:40]}};
        mpix_y_val_V_0_6_fu_138 <= inpix_val_V_0_fu_343_p1;
        mpix_y_val_V_0_fu_102 <= inpix_val_V_0_fu_343_p1;
        mpix_y_val_V_1_7_fu_142 <= {{srcImg_dout[31:24]}};
        mpix_y_val_V_1_fu_114 <= {{srcImg_dout[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1448_reg_1017_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mpix_cb_val_V_1_2_fu_170 <= mpix_cb_val_V_1_1_fu_150;
        mpix_y_val_V_0_7_fu_178 <= mpix_y_val_V_0_6_fu_138;
        mpix_y_val_V_0_8_fu_190 <= mpix_y_val_V_0_7_fu_178;
        mpix_y_val_V_1_8_fu_174 <= mpix_y_val_V_1_7_fu_142;
        mpix_y_val_V_1_9_fu_194 <= mpix_y_val_V_1_8_fu_174;
        pixbuf_cb_val_V_2_0_0_i_fu_162 <= select_ln1539_7_fu_539_p3;
        pixbuf_cb_val_V_3_0_0_i_fu_166 <= select_ln1539_6_fu_532_p3;
        pixbuf_cr_val_V_2_0_0_i_fu_134 <= select_ln1539_9_fu_553_p3;
        pixbuf_cr_val_V_3_0_0_i_fu_130 <= select_ln1539_10_fu_560_p3;
        pixbuf_cr_val_V_4_0_0_i_fu_126 <= mpix_cr_val_V_1_1_fu_158;
        pixbuf_y_val_V_2_0_i_03_fu_182 <= mpix_y_val_V_0_8_fu_190;
        pixbuf_y_val_V_3_0_i_04_fu_186 <= mpix_y_val_V_1_9_fu_194;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1448_reg_1017_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        outpix_val_V_1_reg_1048 <= {{addconv_i_fu_610_p2[9:2]}};
        outpix_val_V_4_reg_1058 <= {{addconv6_i_fu_659_p2[9:2]}};
        select_ln1561_1_reg_1043 <= select_ln1561_1_fu_665_p3;
        tmp_1_reg_1053 <= tmp_1_fu_682_p10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_2_reg_1039_pp0_iter2_reg <= tmp_2_reg_1039_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_2_reg_1003 <= y_2_fu_289_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1448_fu_314_p2 == 1'd0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_299_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_299_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bPassThru_blk_n = bPassThru_empty_n;
    end else begin
        bPassThru_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (bPassThru_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bPassThru_read = 1'b1;
    end else begin
        bPassThru_read = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_2_reg_1039_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (bPassThru_read_reg_978 == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((bPassThru_read_reg_978 == 1'd1) & (tmp_2_reg_1039_pp0_iter1_reg == 1'd0) & (icmp_ln1448_reg_1017_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        outImg_blk_n = outImg_full_n;
    end else begin
        outImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_01001)) begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op164_write_state6 == 1'b1))) begin
            outImg_din = or_ln174_2_i_fu_814_p7;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op146_write_state5 == 1'b1))) begin
            outImg_din = or_ln174_i_fu_731_p7;
        end else begin
            outImg_din = 'bx;
        end
    end else begin
        outImg_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op164_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op146_write_state5 == 1'b1)))) begin
        outImg_write = 1'b1;
    end else begin
        outImg_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1458_reg_1021 == 1'd1) & (icmp_ln1448_reg_1017 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_blk_n = srcImg_empty_n;
    end else begin
        srcImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op70_read_state4 == 1'b1))) begin
        srcImg_read = 1'b1;
    end else begin
        srcImg_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (bPassThru_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_299_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addconv6_i_fu_659_p2 = (tmp9_cast_fu_655_p1 + tmp8_fu_643_p2);

assign addconv_i_fu_610_p2 = (tmp7_cast_fu_606_p1 + tmp_fu_594_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op164_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op146_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op70_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op164_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op146_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op70_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op164_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op146_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op70_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (bPassThru_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((srcImg_empty_n == 1'b0) & (ap_predicate_op70_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((outImg_full_n == 1'b0) & (ap_predicate_op146_write_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((outImg_full_n == 1'b0) & (ap_predicate_op164_write_state6 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op146_write_state5 = ((bPassThru_read_reg_978 == 1'd1) & (tmp_2_reg_1039_pp0_iter1_reg == 1'd0) & (icmp_ln1448_reg_1017_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op164_write_state6 = ((tmp_2_reg_1039_pp0_iter2_reg == 1'd0) & (bPassThru_read_reg_978 == 1'd0));
end

always @ (*) begin
    ap_predicate_op70_read_state4 = ((icmp_ln1458_reg_1021 == 1'd1) & (icmp_ln1448_reg_1017 == 1'd1));
end

assign cmp119_i_fu_329_p2 = ((x_reg_240 == 15'd0) ? 1'b1 : 1'b0);

assign icmp_ln1445_fu_299_p2 = (($signed(zext_ln1445_fu_295_p1) < $signed(height)) ? 1'b1 : 1'b0);

assign icmp_ln1448_fu_314_p2 = (($signed(zext_ln1448_fu_310_p1) < $signed(loopWidth_reg_993)) ? 1'b1 : 1'b0);

assign icmp_ln1458_fu_324_p2 = ((x_reg_240 < lshr_ln_fu_261_p4) ? 1'b1 : 1'b0);

assign inpix_val_V_0_fu_343_p1 = srcImg_dout[7:0];

assign loopWidth_fu_275_p2 = (zext_ln1443_fu_271_p1 + zext_ln1411_fu_257_p1);

assign lshr_ln_fu_261_p4 = {{width[15:1]}};

assign mul_i_i270_cast_i_fu_586_p1 = mul_i_i270_i_fu_574_p3;

assign mul_i_i270_i_fu_574_p3 = {{select_ln1539_11_fu_567_p3}, {1'd0}};

assign mul_i_i_cast_i_fu_635_p1 = mul_i_i_i_fu_623_p3;

assign mul_i_i_i_fu_623_p3 = {{select_ln1539_12_fu_616_p3}, {1'd0}};

assign or_ln174_2_i_fu_814_p7 = {{{{{{{{{{8'd0}, {outpix_val_V_4_reg_1058}}}, {tmp_1_reg_1053}}}, {8'd0}}}, {outpix_val_V_1_reg_1048}}}, {select_ln1561_1_reg_1043}};

assign or_ln174_i_fu_731_p7 = {{{{{{mpix_cr_val_V_1_fu_122}, {mpix_cb_val_V_1_fu_118}}, {mpix_y_val_V_1_fu_114}}, {mpix_cr_val_V_0_fu_110}}, {mpix_cb_val_V_0_fu_106}}, {mpix_y_val_V_0_fu_102}};

assign out_x_fu_319_p2 = (zext_ln1448_fu_310_p1 - zext_ln1411_reg_983);

assign select_ln1527_1_fu_518_p3 = ((icmp_ln1458_reg_1021_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_3_fu_154 : mpix_cr_val_V_1_1_fu_158);

assign select_ln1527_fu_511_p3 = ((icmp_ln1458_reg_1021_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_4_fu_146 : mpix_cb_val_V_1_1_fu_150);

assign select_ln1539_10_fu_560_p3 = ((cmp119_i_reg_1027_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_3_fu_154 : select_ln1527_1_fu_518_p3);

assign select_ln1539_11_cast_fu_639_p1 = select_ln1539_9_fu_553_p3;

assign select_ln1539_11_cast_i_fu_631_p1 = select_ln1539_fu_525_p3;

assign select_ln1539_11_fu_567_p3 = ((cmp119_i_reg_1027_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_4_fu_146 : pixbuf_cb_val_V_3_0_0_i_fu_166);

assign select_ln1539_12_fu_616_p3 = ((cmp119_i_reg_1027_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_3_fu_154 : pixbuf_cr_val_V_3_0_0_i_fu_130);

assign select_ln1539_15_cast_i_fu_582_p1 = select_ln1539_8_fu_546_p3;

assign select_ln1539_6_fu_532_p3 = ((cmp119_i_reg_1027_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_4_fu_146 : select_ln1527_fu_511_p3);

assign select_ln1539_7_cast_fu_590_p1 = select_ln1539_7_fu_539_p3;

assign select_ln1539_7_fu_539_p3 = ((cmp119_i_reg_1027_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_4_fu_146 : mpix_cb_val_V_1_2_fu_170);

assign select_ln1539_8_fu_546_p3 = ((cmp119_i_reg_1027_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_4_fu_146 : pixbuf_cb_val_V_2_0_0_i_fu_162);

assign select_ln1539_9_fu_553_p3 = ((cmp119_i_reg_1027_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_3_fu_154 : pixbuf_cr_val_V_4_0_0_i_fu_126);

assign select_ln1539_fu_525_p3 = ((cmp119_i_reg_1027_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_3_fu_154 : pixbuf_cr_val_V_2_0_0_i_fu_134);

assign select_ln1561_1_fu_665_p3 = ((bPassThru_read_reg_978[0:0] == 1'b1) ? pixbuf_y_val_V_2_0_i_03_fu_182 : mpix_y_val_V_0_7_fu_178);

assign select_ln1561_fu_281_p0 = bPassThru_dout;

assign select_ln1561_fu_281_p3 = ((select_ln1561_fu_281_p0[0:0] == 1'b1) ? 3'd1 : 3'd5);

assign tmp7_cast_fu_606_p1 = tmp7_fu_600_p2;

assign tmp7_fu_600_p2 = (select_ln1539_7_cast_fu_590_p1 + 9'd2);

assign tmp8_fu_643_p2 = (mul_i_i_cast_i_fu_635_p1 + select_ln1539_11_cast_i_fu_631_p1);

assign tmp9_cast_fu_655_p1 = tmp9_fu_649_p2;

assign tmp9_fu_649_p2 = (select_ln1539_11_cast_fu_639_p1 + 9'd2);

assign tmp_fu_594_p2 = (mul_i_i270_cast_i_fu_586_p1 + select_ln1539_15_cast_i_fu_582_p1);

assign xOffset_fu_251_p0 = bPassThru_dout;

assign xOffset_fu_251_p2 = (xOffset_fu_251_p0 ^ 1'd1);

assign x_2_fu_304_p2 = (x_reg_240 + 15'd1);

assign y_2_fu_289_p2 = (y_reg_229 + 15'd1);

assign zext_ln1411_fu_257_p1 = xOffset_fu_251_p2;

assign zext_ln1443_fu_271_p1 = lshr_ln_fu_261_p4;

assign zext_ln1445_fu_295_p1 = y_reg_229;

assign zext_ln1448_fu_310_p1 = x_reg_240;

always @ (posedge ap_clk) begin
    zext_ln1411_reg_983[15:1] <= 15'b000000000000000;
    select_ln1561_reg_998[1:0] <= 2'b01;
end

endmodule //bd_c2dc_hsc_0_v_hcresampler_core
