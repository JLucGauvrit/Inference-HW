// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_multi_scaler_0_0_v_hscaler (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_3_dout,
        stream_3_empty_n,
        stream_3_read,
        stream_4_din,
        stream_4_full_n,
        stream_4_write,
        HeightOut_cast_loc_dout,
        HeightOut_cast_loc_empty_n,
        HeightOut_cast_loc_read,
        WidthIn_dout,
        WidthIn_empty_n,
        WidthIn_read,
        WidthOut_dout,
        WidthOut_empty_n,
        WidthOut_read,
        blkmm_hfltCoeff_0_address0,
        blkmm_hfltCoeff_0_ce0,
        blkmm_hfltCoeff_0_q0,
        blkmm_phasesH_address0,
        blkmm_phasesH_ce0,
        blkmm_phasesH_q0,
        HeightOut_cast_loc_out_din,
        HeightOut_cast_loc_out_full_n,
        HeightOut_cast_loc_out_write,
        WidthOut_out_din,
        WidthOut_out_full_n,
        WidthOut_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] stream_3_dout;
input   stream_3_empty_n;
output   stream_3_read;
output  [47:0] stream_4_din;
input   stream_4_full_n;
output   stream_4_write;
input  [11:0] HeightOut_cast_loc_dout;
input   HeightOut_cast_loc_empty_n;
output   HeightOut_cast_loc_read;
input  [15:0] WidthIn_dout;
input   WidthIn_empty_n;
output   WidthIn_read;
input  [15:0] WidthOut_dout;
input   WidthOut_empty_n;
output   WidthOut_read;
output  [8:0] blkmm_hfltCoeff_0_address0;
output   blkmm_hfltCoeff_0_ce0;
input  [15:0] blkmm_hfltCoeff_0_q0;
output  [10:0] blkmm_phasesH_address0;
output   blkmm_phasesH_ce0;
input  [17:0] blkmm_phasesH_q0;
output  [11:0] HeightOut_cast_loc_out_din;
input   HeightOut_cast_loc_out_full_n;
output   HeightOut_cast_loc_out_write;
output  [15:0] WidthOut_out_din;
input   WidthOut_out_full_n;
output   WidthOut_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_3_read;
reg stream_4_write;
reg HeightOut_cast_loc_read;
reg WidthIn_read;
reg WidthOut_read;
reg HeightOut_cast_loc_out_write;
reg WidthOut_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    HeightOut_cast_loc_blk_n;
reg    WidthIn_blk_n;
reg    WidthOut_blk_n;
reg    HeightOut_cast_loc_out_blk_n;
reg    WidthOut_out_blk_n;
reg   [11:0] HeightOut_cast_loc_read_reg_103;
reg   [15:0] WidthIn_read_reg_108;
reg   [15:0] WidthOut_read_reg_113;
wire    grp_hscale_core_polyphase_fu_84_ap_start;
wire    grp_hscale_core_polyphase_fu_84_ap_done;
wire    grp_hscale_core_polyphase_fu_84_ap_idle;
wire    grp_hscale_core_polyphase_fu_84_ap_ready;
wire    grp_hscale_core_polyphase_fu_84_stream_3_read;
wire   [47:0] grp_hscale_core_polyphase_fu_84_stream_4_din;
wire    grp_hscale_core_polyphase_fu_84_stream_4_write;
wire   [8:0] grp_hscale_core_polyphase_fu_84_hfltCoeff_0_address0;
wire    grp_hscale_core_polyphase_fu_84_hfltCoeff_0_ce0;
wire   [10:0] grp_hscale_core_polyphase_fu_84_arrPhasesH_address0;
wire    grp_hscale_core_polyphase_fu_84_arrPhasesH_ce0;
reg    grp_hscale_core_polyphase_fu_84_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_hscale_core_polyphase_fu_84_ap_start_reg = 1'b0;
end

bd_v_multi_scaler_0_0_hscale_core_polyphase grp_hscale_core_polyphase_fu_84(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_hscale_core_polyphase_fu_84_ap_start),
    .ap_done(grp_hscale_core_polyphase_fu_84_ap_done),
    .ap_idle(grp_hscale_core_polyphase_fu_84_ap_idle),
    .ap_ready(grp_hscale_core_polyphase_fu_84_ap_ready),
    .stream_3_dout(stream_3_dout),
    .stream_3_empty_n(stream_3_empty_n),
    .stream_3_read(grp_hscale_core_polyphase_fu_84_stream_3_read),
    .stream_4_din(grp_hscale_core_polyphase_fu_84_stream_4_din),
    .stream_4_full_n(stream_4_full_n),
    .stream_4_write(grp_hscale_core_polyphase_fu_84_stream_4_write),
    .Height(HeightOut_cast_loc_read_reg_103),
    .InPixels(WidthIn_read_reg_108),
    .OutPixels(WidthOut_read_reg_113),
    .hfltCoeff_0_address0(grp_hscale_core_polyphase_fu_84_hfltCoeff_0_address0),
    .hfltCoeff_0_ce0(grp_hscale_core_polyphase_fu_84_hfltCoeff_0_ce0),
    .hfltCoeff_0_q0(blkmm_hfltCoeff_0_q0),
    .arrPhasesH_address0(grp_hscale_core_polyphase_fu_84_arrPhasesH_address0),
    .arrPhasesH_ce0(grp_hscale_core_polyphase_fu_84_arrPhasesH_ce0),
    .arrPhasesH_q0(blkmm_phasesH_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_hscale_core_polyphase_fu_84_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_hscale_core_polyphase_fu_84_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_hscale_core_polyphase_fu_84_ap_start_reg <= 1'b1;
        end else if ((grp_hscale_core_polyphase_fu_84_ap_ready == 1'b1)) begin
            grp_hscale_core_polyphase_fu_84_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        HeightOut_cast_loc_read_reg_103 <= HeightOut_cast_loc_dout;
        WidthIn_read_reg_108 <= WidthIn_dout;
        WidthOut_read_reg_113 <= WidthOut_dout;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HeightOut_cast_loc_blk_n = HeightOut_cast_loc_empty_n;
    end else begin
        HeightOut_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HeightOut_cast_loc_out_blk_n = HeightOut_cast_loc_out_full_n;
    end else begin
        HeightOut_cast_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == WidthOut_out_full_n) | (1'b0 == HeightOut_cast_loc_out_full_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == HeightOut_cast_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HeightOut_cast_loc_out_write = 1'b1;
    end else begin
        HeightOut_cast_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == WidthOut_out_full_n) | (1'b0 == HeightOut_cast_loc_out_full_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == HeightOut_cast_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HeightOut_cast_loc_read = 1'b1;
    end else begin
        HeightOut_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthIn_blk_n = WidthIn_empty_n;
    end else begin
        WidthIn_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == WidthOut_out_full_n) | (1'b0 == HeightOut_cast_loc_out_full_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == HeightOut_cast_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthIn_read = 1'b1;
    end else begin
        WidthIn_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthOut_blk_n = WidthOut_empty_n;
    end else begin
        WidthOut_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthOut_out_blk_n = WidthOut_out_full_n;
    end else begin
        WidthOut_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == WidthOut_out_full_n) | (1'b0 == HeightOut_cast_loc_out_full_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == HeightOut_cast_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthOut_out_write = 1'b1;
    end else begin
        WidthOut_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == WidthOut_out_full_n) | (1'b0 == HeightOut_cast_loc_out_full_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == HeightOut_cast_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthOut_read = 1'b1;
    end else begin
        WidthOut_read = 1'b0;
    end
end

always @ (*) begin
    if (((grp_hscale_core_polyphase_fu_84_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_hscale_core_polyphase_fu_84_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stream_3_read = grp_hscale_core_polyphase_fu_84_stream_3_read;
    end else begin
        stream_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stream_4_write = grp_hscale_core_polyphase_fu_84_stream_4_write;
    end else begin
        stream_4_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == WidthOut_out_full_n) | (1'b0 == HeightOut_cast_loc_out_full_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == HeightOut_cast_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_hscale_core_polyphase_fu_84_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HeightOut_cast_loc_out_din = HeightOut_cast_loc_dout;

assign WidthOut_out_din = WidthOut_dout;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == WidthOut_out_full_n) | (1'b0 == HeightOut_cast_loc_out_full_n) | (1'b0 == WidthOut_empty_n) | (1'b0 == WidthIn_empty_n) | (1'b0 == HeightOut_cast_loc_empty_n) | (ap_done_reg == 1'b1));
end

assign blkmm_hfltCoeff_0_address0 = grp_hscale_core_polyphase_fu_84_hfltCoeff_0_address0;

assign blkmm_hfltCoeff_0_ce0 = grp_hscale_core_polyphase_fu_84_hfltCoeff_0_ce0;

assign blkmm_phasesH_address0 = grp_hscale_core_polyphase_fu_84_arrPhasesH_address0;

assign blkmm_phasesH_ce0 = grp_hscale_core_polyphase_fu_84_arrPhasesH_ce0;

assign grp_hscale_core_polyphase_fu_84_ap_start = grp_hscale_core_polyphase_fu_84_ap_start_reg;

assign stream_4_din = grp_hscale_core_polyphase_fu_84_stream_4_din;

endmodule //bd_v_multi_scaler_0_0_v_hscaler
