// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bd_v_multi_scaler_0_0_v_multi_scaler,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433090,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=110,HLS_SYN_DSP=0,HLS_SYN_FF=23795,HLS_SYN_LUT=27334,HLS_VERSION=2020_2}" *)

module bd_v_multi_scaler_0_0_v_multi_scaler (
        ap_clk,
        ap_rst_n,
        m_axi_mm_video_AWVALID,
        m_axi_mm_video_AWREADY,
        m_axi_mm_video_AWADDR,
        m_axi_mm_video_AWID,
        m_axi_mm_video_AWLEN,
        m_axi_mm_video_AWSIZE,
        m_axi_mm_video_AWBURST,
        m_axi_mm_video_AWLOCK,
        m_axi_mm_video_AWCACHE,
        m_axi_mm_video_AWPROT,
        m_axi_mm_video_AWQOS,
        m_axi_mm_video_AWREGION,
        m_axi_mm_video_AWUSER,
        m_axi_mm_video_WVALID,
        m_axi_mm_video_WREADY,
        m_axi_mm_video_WDATA,
        m_axi_mm_video_WSTRB,
        m_axi_mm_video_WLAST,
        m_axi_mm_video_WID,
        m_axi_mm_video_WUSER,
        m_axi_mm_video_ARVALID,
        m_axi_mm_video_ARREADY,
        m_axi_mm_video_ARADDR,
        m_axi_mm_video_ARID,
        m_axi_mm_video_ARLEN,
        m_axi_mm_video_ARSIZE,
        m_axi_mm_video_ARBURST,
        m_axi_mm_video_ARLOCK,
        m_axi_mm_video_ARCACHE,
        m_axi_mm_video_ARPROT,
        m_axi_mm_video_ARQOS,
        m_axi_mm_video_ARREGION,
        m_axi_mm_video_ARUSER,
        m_axi_mm_video_RVALID,
        m_axi_mm_video_RREADY,
        m_axi_mm_video_RDATA,
        m_axi_mm_video_RLAST,
        m_axi_mm_video_RID,
        m_axi_mm_video_RUSER,
        m_axi_mm_video_RRESP,
        m_axi_mm_video_BVALID,
        m_axi_mm_video_BREADY,
        m_axi_mm_video_BRESP,
        m_axi_mm_video_BID,
        m_axi_mm_video_BUSER,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_pp0_stage0 = 9'd2;
parameter    ap_ST_fsm_state6 = 9'd4;
parameter    ap_ST_fsm_state7 = 9'd8;
parameter    ap_ST_fsm_state8 = 9'd16;
parameter    ap_ST_fsm_pp1_stage0 = 9'd32;
parameter    ap_ST_fsm_state11 = 9'd64;
parameter    ap_ST_fsm_state12 = 9'd128;
parameter    ap_ST_fsm_state13 = 9'd256;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MM_VIDEO_ID_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_ADDR_WIDTH = 64;
parameter    C_M_AXI_MM_VIDEO_DATA_WIDTH = 128;
parameter    C_M_AXI_MM_VIDEO_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_WUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_RUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_BUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_USER_VALUE = 0;
parameter    C_M_AXI_MM_VIDEO_PROT_VALUE = 0;
parameter    C_M_AXI_MM_VIDEO_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MM_VIDEO_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mm_video_AWVALID;
input   m_axi_mm_video_AWREADY;
output  [C_M_AXI_MM_VIDEO_ADDR_WIDTH - 1:0] m_axi_mm_video_AWADDR;
output  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_AWID;
output  [7:0] m_axi_mm_video_AWLEN;
output  [2:0] m_axi_mm_video_AWSIZE;
output  [1:0] m_axi_mm_video_AWBURST;
output  [1:0] m_axi_mm_video_AWLOCK;
output  [3:0] m_axi_mm_video_AWCACHE;
output  [2:0] m_axi_mm_video_AWPROT;
output  [3:0] m_axi_mm_video_AWQOS;
output  [3:0] m_axi_mm_video_AWREGION;
output  [C_M_AXI_MM_VIDEO_AWUSER_WIDTH - 1:0] m_axi_mm_video_AWUSER;
output   m_axi_mm_video_WVALID;
input   m_axi_mm_video_WREADY;
output  [C_M_AXI_MM_VIDEO_DATA_WIDTH - 1:0] m_axi_mm_video_WDATA;
output  [C_M_AXI_MM_VIDEO_WSTRB_WIDTH - 1:0] m_axi_mm_video_WSTRB;
output   m_axi_mm_video_WLAST;
output  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_WID;
output  [C_M_AXI_MM_VIDEO_WUSER_WIDTH - 1:0] m_axi_mm_video_WUSER;
output   m_axi_mm_video_ARVALID;
input   m_axi_mm_video_ARREADY;
output  [C_M_AXI_MM_VIDEO_ADDR_WIDTH - 1:0] m_axi_mm_video_ARADDR;
output  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_ARID;
output  [7:0] m_axi_mm_video_ARLEN;
output  [2:0] m_axi_mm_video_ARSIZE;
output  [1:0] m_axi_mm_video_ARBURST;
output  [1:0] m_axi_mm_video_ARLOCK;
output  [3:0] m_axi_mm_video_ARCACHE;
output  [2:0] m_axi_mm_video_ARPROT;
output  [3:0] m_axi_mm_video_ARQOS;
output  [3:0] m_axi_mm_video_ARREGION;
output  [C_M_AXI_MM_VIDEO_ARUSER_WIDTH - 1:0] m_axi_mm_video_ARUSER;
input   m_axi_mm_video_RVALID;
output   m_axi_mm_video_RREADY;
input  [C_M_AXI_MM_VIDEO_DATA_WIDTH - 1:0] m_axi_mm_video_RDATA;
input   m_axi_mm_video_RLAST;
input  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_RID;
input  [C_M_AXI_MM_VIDEO_RUSER_WIDTH - 1:0] m_axi_mm_video_RUSER;
input  [1:0] m_axi_mm_video_RRESP;
input   m_axi_mm_video_BVALID;
output   m_axi_mm_video_BREADY;
input  [1:0] m_axi_mm_video_BRESP;
input  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_BID;
input  [C_M_AXI_MM_VIDEO_BUSER_WIDTH - 1:0] m_axi_mm_video_BUSER;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] srcImgBuf0_0;
wire   [63:0] srcImgBuf1_0;
wire   [7:0] num_outs;
wire   [15:0] HeightIn;
wire   [15:0] HeightOut;
wire   [15:0] WidthIn;
wire   [15:0] WidthOut;
wire   [7:0] InPixelFmt;
wire   [7:0] OutPixelFmt;
wire   [31:0] PixelRate;
wire   [31:0] LineRate;
wire   [15:0] InStride;
wire   [15:0] OutStride;
wire   [8:0] mm_hfltCoeff_address0;
reg    mm_hfltCoeff_ce0;
wire   [15:0] mm_hfltCoeff_q0;
wire   [8:0] mm_vfltCoeff_address0;
reg    mm_vfltCoeff_ce0;
wire   [15:0] mm_vfltCoeff_q0;
wire   [63:0] dstImgBuf0_0;
wire   [63:0] dstImgBuf1_0;
wire    flush;
reg    s_axi_CTRL_flush_done;
wire    m_axi_mm_video_flush_done;
reg    mm_video_AWVALID;
wire    mm_video_AWREADY;
reg    mm_video_WVALID;
wire    mm_video_WREADY;
reg    mm_video_ARVALID;
wire    mm_video_ARREADY;
wire    mm_video_RVALID;
reg    mm_video_RREADY;
wire   [127:0] mm_video_RDATA;
wire    mm_video_RLAST;
wire   [0:0] mm_video_RID;
wire   [0:0] mm_video_RUSER;
wire   [1:0] mm_video_RRESP;
wire    mm_video_BVALID;
reg    mm_video_BREADY;
wire   [1:0] mm_video_BRESP;
wire   [0:0] mm_video_BID;
wire   [0:0] mm_video_BUSER;
reg   [8:0] indvar_flatten_reg_395;
reg   [6:0] y_reg_406;
reg   [2:0] x_2_reg_417;
reg   [17:0] p_Val2_s_reg_450;
reg   [1:0] s_reg_463;
reg   [2:0] arrayIdx_V_2_reg_474;
reg   [63:0] dstImgBuf1_0_read_reg_1121;
reg   [63:0] dstImgBuf0_0_read_reg_1126;
reg   [63:0] srcImgBuf1_0_read_reg_1131;
reg   [63:0] srcImgBuf0_0_read_reg_1136;
wire   [8:0] add_ln125_1_fu_521_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln125_fu_527_p2;
reg   [0:0] icmp_ln125_reg_1146;
reg   [0:0] icmp_ln125_reg_1146_pp0_iter1_reg;
reg   [0:0] icmp_ln125_reg_1146_pp0_iter2_reg;
wire   [2:0] select_ln125_fu_545_p3;
reg   [2:0] select_ln125_reg_1150;
wire   [6:0] select_ln125_1_fu_553_p3;
reg   [6:0] select_ln125_1_reg_1155;
wire   [5:0] trunc_ln133_fu_561_p1;
reg   [5:0] trunc_ln133_reg_1161;
wire   [2:0] add_ln130_fu_565_p2;
wire   [63:0] zext_ln133_2_fu_604_p1;
reg   [63:0] zext_ln133_2_reg_1171;
reg   [63:0] zext_ln133_2_reg_1171_pp0_iter2_reg;
reg   [15:0] mm_hfltCoeff_load_reg_1187;
reg   [15:0] mm_vfltCoeff_load_reg_1192;
reg   [15:0] WidthIn_read_reg_1211;
wire    ap_CS_fsm_state6;
reg   [15:0] WidthOut_read_reg_1218;
reg   [31:0] PixelRate_read_reg_1226;
wire   [31:0] zext_ln47_fu_620_p1;
reg   [31:0] zext_ln47_reg_1231;
wire    ap_CS_fsm_state7;
reg   [15:0] trunc_ln_reg_1236;
wire   [15:0] add_ln60_fu_653_p2;
reg   [15:0] add_ln60_reg_1241;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln60_fu_659_p2;
wire   [2:0] zext_ln60_fu_664_p1;
reg   [10:0] blkmm_phasesH_V_addr_reg_1255;
wire   [1:0] s_1_fu_673_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state9_pp1_stage0_iter0;
wire    ap_block_state10_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln64_fu_679_p2;
reg   [0:0] icmp_ln64_reg_1265;
wire   [2:0] arrayIdx_V_5_fu_726_p3;
reg   [2:0] arrayIdx_V_5_reg_1269;
wire   [31:0] offset_7_fu_734_p3;
reg   [31:0] offset_7_reg_1275;
reg   [15:0] tmp_16_reg_1281;
wire   [4:0] zext_ln91_fu_766_p1;
reg   [4:0] zext_ln91_reg_1286;
wire   [3:0] add_ln91_fu_770_p2;
reg   [3:0] add_ln91_reg_1291;
wire   [0:0] icmp_ln414_fu_780_p2;
reg   [0:0] icmp_ln414_reg_1296;
wire   [4:0] zext_ln414_fu_786_p1;
reg   [4:0] zext_ln414_reg_1303;
wire   [17:0] shl_ln414_fu_808_p2;
reg   [17:0] shl_ln414_reg_1309;
wire   [4:0] add_ln92_fu_814_p2;
reg   [4:0] add_ln92_reg_1315;
wire   [3:0] add_ln92_1_fu_824_p2;
reg   [3:0] add_ln92_1_reg_1321;
wire   [0:0] icmp_ln414_1_fu_834_p2;
reg   [0:0] icmp_ln414_1_reg_1326;
reg   [17:0] p_Result_s_fu_1097_p4;
reg    ap_enable_reg_pp1_iter1;
wire   [0:0] arrayIdx_V_1_fu_1117_p1;
wire    ap_CS_fsm_state11;
reg   [15:0] HeightIn_read_reg_1344;
wire    ap_CS_fsm_state12;
reg   [15:0] HeightOut_read_reg_1349;
reg   [15:0] InStride_read_reg_1354;
reg   [15:0] OutStride_read_reg_1359;
reg   [7:0] InPixelFmt_read_reg_1364;
reg   [7:0] OutPixelFmt_read_reg_1369;
reg   [31:0] LineRate_read_reg_1374;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state9;
reg   [10:0] blkmm_phasesH_V_address0;
reg    blkmm_phasesH_V_ce0;
reg    blkmm_phasesH_V_we0;
wire   [17:0] blkmm_phasesH_V_q0;
reg   [8:0] blkmm_hfltCoeff_0_address0;
reg    blkmm_hfltCoeff_0_ce0;
reg    blkmm_hfltCoeff_0_we0;
wire   [15:0] blkmm_hfltCoeff_0_q0;
reg   [8:0] blkmm_vfltCoeff_0_address0;
reg    blkmm_vfltCoeff_0_ce0;
reg    blkmm_vfltCoeff_0_we0;
wire   [15:0] blkmm_vfltCoeff_0_q0;
wire    grp_v_scaler_top_fu_484_m_axi_mm_video_AWVALID;
wire   [63:0] grp_v_scaler_top_fu_484_m_axi_mm_video_AWADDR;
wire   [0:0] grp_v_scaler_top_fu_484_m_axi_mm_video_AWID;
wire   [31:0] grp_v_scaler_top_fu_484_m_axi_mm_video_AWLEN;
wire   [2:0] grp_v_scaler_top_fu_484_m_axi_mm_video_AWSIZE;
wire   [1:0] grp_v_scaler_top_fu_484_m_axi_mm_video_AWBURST;
wire   [1:0] grp_v_scaler_top_fu_484_m_axi_mm_video_AWLOCK;
wire   [3:0] grp_v_scaler_top_fu_484_m_axi_mm_video_AWCACHE;
wire   [2:0] grp_v_scaler_top_fu_484_m_axi_mm_video_AWPROT;
wire   [3:0] grp_v_scaler_top_fu_484_m_axi_mm_video_AWQOS;
wire   [3:0] grp_v_scaler_top_fu_484_m_axi_mm_video_AWREGION;
wire   [0:0] grp_v_scaler_top_fu_484_m_axi_mm_video_AWUSER;
wire    grp_v_scaler_top_fu_484_m_axi_mm_video_WVALID;
wire   [127:0] grp_v_scaler_top_fu_484_m_axi_mm_video_WDATA;
wire   [15:0] grp_v_scaler_top_fu_484_m_axi_mm_video_WSTRB;
wire    grp_v_scaler_top_fu_484_m_axi_mm_video_WLAST;
wire   [0:0] grp_v_scaler_top_fu_484_m_axi_mm_video_WID;
wire   [0:0] grp_v_scaler_top_fu_484_m_axi_mm_video_WUSER;
wire    grp_v_scaler_top_fu_484_m_axi_mm_video_ARVALID;
wire   [63:0] grp_v_scaler_top_fu_484_m_axi_mm_video_ARADDR;
wire   [0:0] grp_v_scaler_top_fu_484_m_axi_mm_video_ARID;
wire   [31:0] grp_v_scaler_top_fu_484_m_axi_mm_video_ARLEN;
wire   [2:0] grp_v_scaler_top_fu_484_m_axi_mm_video_ARSIZE;
wire   [1:0] grp_v_scaler_top_fu_484_m_axi_mm_video_ARBURST;
wire   [1:0] grp_v_scaler_top_fu_484_m_axi_mm_video_ARLOCK;
wire   [3:0] grp_v_scaler_top_fu_484_m_axi_mm_video_ARCACHE;
wire   [2:0] grp_v_scaler_top_fu_484_m_axi_mm_video_ARPROT;
wire   [3:0] grp_v_scaler_top_fu_484_m_axi_mm_video_ARQOS;
wire   [3:0] grp_v_scaler_top_fu_484_m_axi_mm_video_ARREGION;
wire   [0:0] grp_v_scaler_top_fu_484_m_axi_mm_video_ARUSER;
wire    grp_v_scaler_top_fu_484_m_axi_mm_video_RREADY;
wire    grp_v_scaler_top_fu_484_m_axi_mm_video_BREADY;
wire   [8:0] grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_address0;
wire    grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_ce0;
wire   [15:0] grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_d0;
wire    grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_we0;
wire   [8:0] grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_address1;
wire    grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_ce1;
wire   [15:0] grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_d1;
wire    grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_we1;
wire   [8:0] grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_address0;
wire    grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_ce0;
wire   [15:0] grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_d0;
wire    grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_we0;
wire   [8:0] grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_address1;
wire    grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_ce1;
wire   [15:0] grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_d1;
wire    grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_we1;
wire   [10:0] grp_v_scaler_top_fu_484_blkmm_phasesH_address0;
wire    grp_v_scaler_top_fu_484_blkmm_phasesH_ce0;
wire   [17:0] grp_v_scaler_top_fu_484_blkmm_phasesH_d0;
wire    grp_v_scaler_top_fu_484_blkmm_phasesH_we0;
wire   [10:0] grp_v_scaler_top_fu_484_blkmm_phasesH_address1;
wire    grp_v_scaler_top_fu_484_blkmm_phasesH_ce1;
wire   [17:0] grp_v_scaler_top_fu_484_blkmm_phasesH_d1;
wire    grp_v_scaler_top_fu_484_blkmm_phasesH_we1;
wire    grp_v_scaler_top_fu_484_ap_start;
wire    grp_v_scaler_top_fu_484_ap_done;
wire    grp_v_scaler_top_fu_484_ap_ready;
wire    grp_v_scaler_top_fu_484_ap_idle;
reg    grp_v_scaler_top_fu_484_ap_continue;
reg   [6:0] ap_phi_mux_y_phi_fu_410_p4;
wire    ap_block_pp0_stage0;
reg   [15:0] x_reg_428;
reg   [0:0] arrayIdx_V_reg_439;
wire    ap_block_pp1_stage0;
reg   [2:0] ap_phi_mux_arrayIdx_V_2_phi_fu_477_p4;
reg    grp_v_scaler_top_fu_484_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_sync_grp_v_scaler_top_fu_484_ap_ready;
wire    ap_sync_grp_v_scaler_top_fu_484_ap_done;
reg    ap_block_state13_on_subcall_done;
reg    ap_sync_reg_grp_v_scaler_top_fu_484_ap_ready;
reg    ap_sync_reg_grp_v_scaler_top_fu_484_ap_done;
wire   [63:0] zext_ln60_1_fu_668_p1;
reg   [31:0] offset_fu_242;
wire   [31:0] offset_9_fu_869_p3;
reg   [31:0] ap_sig_allocacmp_offset_load;
reg   [31:0] xWritePos_fu_246;
wire   [31:0] xWritePos_3_fu_876_p3;
wire   [0:0] icmp_ln130_fu_539_p2;
wire   [6:0] add_ln125_fu_533_p2;
wire   [7:0] tmp_4_fu_578_p3;
wire   [8:0] tmp_3_cast_fu_571_p3;
wire   [8:0] zext_ln133_fu_585_p1;
wire   [8:0] sub_ln133_fu_589_p2;
wire   [8:0] zext_ln133_1_fu_595_p1;
wire   [8:0] add_ln133_fu_598_p2;
wire   [0:0] icmp_ln47_fu_623_p2;
wire   [15:0] select_ln47_fu_627_p3;
wire   [16:0] zext_ln47_1_fu_633_p1;
wire   [16:0] add_ln47_fu_637_p2;
wire   [15:0] tmp_fu_698_p4;
wire   [0:0] icmp_ln74_fu_708_p2;
wire   [2:0] arrayIdx_V_3_fu_720_p2;
wire   [31:0] offset_6_fu_714_p2;
wire   [0:0] trunc_ln91_fu_752_p1;
wire   [3:0] or_ln_fu_756_p4;
wire   [5:0] PhaseH_V_fu_688_p4;
wire   [4:0] sub_ln414_fu_790_p2;
wire   [4:0] select_ln414_2_fu_796_p3;
wire   [17:0] zext_ln215_fu_776_p1;
wire   [17:0] zext_ln414_2_fu_804_p1;
wire   [31:0] zext_ln215_40_fu_830_p1;
wire   [31:0] zext_ln92_fu_820_p1;
wire   [0:0] icmp_ln83_fu_843_p2;
wire   [0:0] icmp_ln83_1_fu_848_p2;
wire   [0:0] OutputWriteEn_V_fu_853_p2;
wire   [31:0] offset_8_fu_859_p2;
wire   [31:0] xWritePos_2_fu_863_p2;
wire   [4:0] zext_ln414_1_fu_884_p1;
wire   [4:0] select_ln414_fu_887_p3;
wire   [4:0] select_ln414_1_fu_893_p3;
wire   [4:0] sub_ln414_1_fu_899_p2;
reg   [17:0] tmp_17_fu_913_p4;
wire   [17:0] zext_ln414_3_fu_905_p1;
wire   [17:0] zext_ln414_4_fu_909_p1;
wire   [17:0] shl_ln414_1_fu_928_p2;
wire   [17:0] lshr_ln414_fu_934_p2;
wire   [17:0] and_ln414_fu_940_p2;
wire   [17:0] xor_ln414_fu_946_p2;
wire   [17:0] select_ln414_3_fu_922_p3;
wire   [17:0] and_ln414_1_fu_952_p2;
wire   [17:0] and_ln414_2_fu_958_p2;
wire   [4:0] zext_ln414_5_fu_973_p1;
wire   [4:0] sub_ln414_2_fu_976_p2;
wire   [4:0] select_ln414_4_fu_982_p3;
wire   [4:0] select_ln414_6_fu_994_p3;
wire   [4:0] select_ln414_5_fu_988_p3;
wire   [4:0] sub_ln414_3_fu_1001_p2;
wire   [17:0] zext_ln215_41_fu_970_p1;
wire   [17:0] zext_ln414_6_fu_1007_p1;
wire   [17:0] shl_ln414_2_fu_1019_p2;
reg   [17:0] tmp_19_fu_1025_p4;
wire   [17:0] zext_ln414_7_fu_1011_p1;
wire   [17:0] zext_ln414_8_fu_1015_p1;
wire   [17:0] shl_ln414_3_fu_1042_p2;
wire   [17:0] lshr_ln414_1_fu_1048_p2;
wire   [17:0] and_ln414_3_fu_1054_p2;
wire   [17:0] p_Result_1_fu_964_p2;
wire   [17:0] xor_ln414_1_fu_1060_p2;
wire   [17:0] select_ln414_7_fu_1035_p3;
wire   [17:0] and_ln414_4_fu_1066_p2;
wire   [17:0] and_ln414_5_fu_1072_p2;
wire   [4:0] add_ln93_fu_1084_p2;
wire   [17:0] p_Result_2_fu_1078_p2;
wire   [31:0] zext_ln849_fu_1089_p1;
wire   [63:0] zext_ln849_1_fu_1093_p1;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 grp_v_scaler_top_fu_484_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_v_scaler_top_fu_484_ap_ready = 1'b0;
#0 ap_sync_reg_grp_v_scaler_top_fu_484_ap_done = 1'b0;
end

bd_v_multi_scaler_0_0_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .num_outs(num_outs),
    .WidthIn(WidthIn),
    .WidthOut(WidthOut),
    .HeightIn(HeightIn),
    .HeightOut(HeightOut),
    .LineRate(LineRate),
    .PixelRate(PixelRate),
    .InPixelFmt(InPixelFmt),
    .OutPixelFmt(OutPixelFmt),
    .InStride(InStride),
    .OutStride(OutStride),
    .srcImgBuf0_0(srcImgBuf0_0),
    .srcImgBuf1_0(srcImgBuf1_0),
    .dstImgBuf0_0(dstImgBuf0_0),
    .dstImgBuf1_0(dstImgBuf1_0),
    .mm_vfltCoeff_address0(mm_vfltCoeff_address0),
    .mm_vfltCoeff_ce0(mm_vfltCoeff_ce0),
    .mm_vfltCoeff_q0(mm_vfltCoeff_q0),
    .mm_hfltCoeff_address0(mm_hfltCoeff_address0),
    .mm_hfltCoeff_ce0(mm_hfltCoeff_ce0),
    .mm_hfltCoeff_q0(mm_hfltCoeff_q0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .flush(flush),
    .flush_done(s_axi_CTRL_flush_done)
);

bd_v_multi_scaler_0_0_mm_video_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 128 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 105 ),
    .NUM_READ_OUTSTANDING( 4 ),
    .NUM_WRITE_OUTSTANDING( 4 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MM_VIDEO_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MM_VIDEO_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MM_VIDEO_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MM_VIDEO_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MM_VIDEO_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MM_VIDEO_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MM_VIDEO_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MM_VIDEO_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MM_VIDEO_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MM_VIDEO_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MM_VIDEO_CACHE_VALUE ))
mm_video_m_axi_U(
    .AWVALID(m_axi_mm_video_AWVALID),
    .AWREADY(m_axi_mm_video_AWREADY),
    .AWADDR(m_axi_mm_video_AWADDR),
    .AWID(m_axi_mm_video_AWID),
    .AWLEN(m_axi_mm_video_AWLEN),
    .AWSIZE(m_axi_mm_video_AWSIZE),
    .AWBURST(m_axi_mm_video_AWBURST),
    .AWLOCK(m_axi_mm_video_AWLOCK),
    .AWCACHE(m_axi_mm_video_AWCACHE),
    .AWPROT(m_axi_mm_video_AWPROT),
    .AWQOS(m_axi_mm_video_AWQOS),
    .AWREGION(m_axi_mm_video_AWREGION),
    .AWUSER(m_axi_mm_video_AWUSER),
    .WVALID(m_axi_mm_video_WVALID),
    .WREADY(m_axi_mm_video_WREADY),
    .WDATA(m_axi_mm_video_WDATA),
    .WSTRB(m_axi_mm_video_WSTRB),
    .WLAST(m_axi_mm_video_WLAST),
    .WID(m_axi_mm_video_WID),
    .WUSER(m_axi_mm_video_WUSER),
    .ARVALID(m_axi_mm_video_ARVALID),
    .ARREADY(m_axi_mm_video_ARREADY),
    .ARADDR(m_axi_mm_video_ARADDR),
    .ARID(m_axi_mm_video_ARID),
    .ARLEN(m_axi_mm_video_ARLEN),
    .ARSIZE(m_axi_mm_video_ARSIZE),
    .ARBURST(m_axi_mm_video_ARBURST),
    .ARLOCK(m_axi_mm_video_ARLOCK),
    .ARCACHE(m_axi_mm_video_ARCACHE),
    .ARPROT(m_axi_mm_video_ARPROT),
    .ARQOS(m_axi_mm_video_ARQOS),
    .ARREGION(m_axi_mm_video_ARREGION),
    .ARUSER(m_axi_mm_video_ARUSER),
    .RVALID(m_axi_mm_video_RVALID),
    .RREADY(m_axi_mm_video_RREADY),
    .RDATA(m_axi_mm_video_RDATA),
    .RLAST(m_axi_mm_video_RLAST),
    .RID(m_axi_mm_video_RID),
    .RUSER(m_axi_mm_video_RUSER),
    .RRESP(m_axi_mm_video_RRESP),
    .BVALID(m_axi_mm_video_BVALID),
    .BREADY(m_axi_mm_video_BREADY),
    .BRESP(m_axi_mm_video_BRESP),
    .BID(m_axi_mm_video_BID),
    .BUSER(m_axi_mm_video_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .flush(flush),
    .flush_done(m_axi_mm_video_flush_done),
    .I_ARVALID(mm_video_ARVALID),
    .I_ARREADY(mm_video_ARREADY),
    .I_ARADDR(grp_v_scaler_top_fu_484_m_axi_mm_video_ARADDR),
    .I_ARID(grp_v_scaler_top_fu_484_m_axi_mm_video_ARID),
    .I_ARLEN(grp_v_scaler_top_fu_484_m_axi_mm_video_ARLEN),
    .I_ARSIZE(grp_v_scaler_top_fu_484_m_axi_mm_video_ARSIZE),
    .I_ARLOCK(grp_v_scaler_top_fu_484_m_axi_mm_video_ARLOCK),
    .I_ARCACHE(grp_v_scaler_top_fu_484_m_axi_mm_video_ARCACHE),
    .I_ARQOS(grp_v_scaler_top_fu_484_m_axi_mm_video_ARQOS),
    .I_ARPROT(grp_v_scaler_top_fu_484_m_axi_mm_video_ARPROT),
    .I_ARUSER(grp_v_scaler_top_fu_484_m_axi_mm_video_ARUSER),
    .I_ARBURST(grp_v_scaler_top_fu_484_m_axi_mm_video_ARBURST),
    .I_ARREGION(grp_v_scaler_top_fu_484_m_axi_mm_video_ARREGION),
    .I_RVALID(mm_video_RVALID),
    .I_RREADY(mm_video_RREADY),
    .I_RDATA(mm_video_RDATA),
    .I_RID(mm_video_RID),
    .I_RUSER(mm_video_RUSER),
    .I_RRESP(mm_video_RRESP),
    .I_RLAST(mm_video_RLAST),
    .I_AWVALID(mm_video_AWVALID),
    .I_AWREADY(mm_video_AWREADY),
    .I_AWADDR(grp_v_scaler_top_fu_484_m_axi_mm_video_AWADDR),
    .I_AWID(grp_v_scaler_top_fu_484_m_axi_mm_video_AWID),
    .I_AWLEN(grp_v_scaler_top_fu_484_m_axi_mm_video_AWLEN),
    .I_AWSIZE(grp_v_scaler_top_fu_484_m_axi_mm_video_AWSIZE),
    .I_AWLOCK(grp_v_scaler_top_fu_484_m_axi_mm_video_AWLOCK),
    .I_AWCACHE(grp_v_scaler_top_fu_484_m_axi_mm_video_AWCACHE),
    .I_AWQOS(grp_v_scaler_top_fu_484_m_axi_mm_video_AWQOS),
    .I_AWPROT(grp_v_scaler_top_fu_484_m_axi_mm_video_AWPROT),
    .I_AWUSER(grp_v_scaler_top_fu_484_m_axi_mm_video_AWUSER),
    .I_AWBURST(grp_v_scaler_top_fu_484_m_axi_mm_video_AWBURST),
    .I_AWREGION(grp_v_scaler_top_fu_484_m_axi_mm_video_AWREGION),
    .I_WVALID(mm_video_WVALID),
    .I_WREADY(mm_video_WREADY),
    .I_WDATA(grp_v_scaler_top_fu_484_m_axi_mm_video_WDATA),
    .I_WID(grp_v_scaler_top_fu_484_m_axi_mm_video_WID),
    .I_WUSER(grp_v_scaler_top_fu_484_m_axi_mm_video_WUSER),
    .I_WLAST(grp_v_scaler_top_fu_484_m_axi_mm_video_WLAST),
    .I_WSTRB(grp_v_scaler_top_fu_484_m_axi_mm_video_WSTRB),
    .I_BVALID(mm_video_BVALID),
    .I_BREADY(mm_video_BREADY),
    .I_BRESP(mm_video_BRESP),
    .I_BID(mm_video_BID),
    .I_BUSER(mm_video_BUSER)
);

bd_v_multi_scaler_0_0_blkmm_phasesH_V #(
    .DataWidth( 18 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
blkmm_phasesH_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(blkmm_phasesH_V_address0),
    .ce0(blkmm_phasesH_V_ce0),
    .we0(blkmm_phasesH_V_we0),
    .d0(p_Val2_s_reg_450),
    .q0(blkmm_phasesH_V_q0)
);

bd_v_multi_scaler_0_0_blkmm_hfltCoeff_0 #(
    .DataWidth( 16 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
blkmm_hfltCoeff_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(blkmm_hfltCoeff_0_address0),
    .ce0(blkmm_hfltCoeff_0_ce0),
    .we0(blkmm_hfltCoeff_0_we0),
    .d0(mm_hfltCoeff_load_reg_1187),
    .q0(blkmm_hfltCoeff_0_q0)
);

bd_v_multi_scaler_0_0_blkmm_hfltCoeff_0 #(
    .DataWidth( 16 ),
    .AddressRange( 384 ),
    .AddressWidth( 9 ))
blkmm_vfltCoeff_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(blkmm_vfltCoeff_0_address0),
    .ce0(blkmm_vfltCoeff_0_ce0),
    .we0(blkmm_vfltCoeff_0_we0),
    .d0(mm_vfltCoeff_load_reg_1192),
    .q0(blkmm_vfltCoeff_0_q0)
);

bd_v_multi_scaler_0_0_v_scaler_top grp_v_scaler_top_fu_484(
    .m_axi_mm_video_AWVALID(grp_v_scaler_top_fu_484_m_axi_mm_video_AWVALID),
    .m_axi_mm_video_AWREADY(mm_video_AWREADY),
    .m_axi_mm_video_AWADDR(grp_v_scaler_top_fu_484_m_axi_mm_video_AWADDR),
    .m_axi_mm_video_AWID(grp_v_scaler_top_fu_484_m_axi_mm_video_AWID),
    .m_axi_mm_video_AWLEN(grp_v_scaler_top_fu_484_m_axi_mm_video_AWLEN),
    .m_axi_mm_video_AWSIZE(grp_v_scaler_top_fu_484_m_axi_mm_video_AWSIZE),
    .m_axi_mm_video_AWBURST(grp_v_scaler_top_fu_484_m_axi_mm_video_AWBURST),
    .m_axi_mm_video_AWLOCK(grp_v_scaler_top_fu_484_m_axi_mm_video_AWLOCK),
    .m_axi_mm_video_AWCACHE(grp_v_scaler_top_fu_484_m_axi_mm_video_AWCACHE),
    .m_axi_mm_video_AWPROT(grp_v_scaler_top_fu_484_m_axi_mm_video_AWPROT),
    .m_axi_mm_video_AWQOS(grp_v_scaler_top_fu_484_m_axi_mm_video_AWQOS),
    .m_axi_mm_video_AWREGION(grp_v_scaler_top_fu_484_m_axi_mm_video_AWREGION),
    .m_axi_mm_video_AWUSER(grp_v_scaler_top_fu_484_m_axi_mm_video_AWUSER),
    .m_axi_mm_video_WVALID(grp_v_scaler_top_fu_484_m_axi_mm_video_WVALID),
    .m_axi_mm_video_WREADY(mm_video_WREADY),
    .m_axi_mm_video_WDATA(grp_v_scaler_top_fu_484_m_axi_mm_video_WDATA),
    .m_axi_mm_video_WSTRB(grp_v_scaler_top_fu_484_m_axi_mm_video_WSTRB),
    .m_axi_mm_video_WLAST(grp_v_scaler_top_fu_484_m_axi_mm_video_WLAST),
    .m_axi_mm_video_WID(grp_v_scaler_top_fu_484_m_axi_mm_video_WID),
    .m_axi_mm_video_WUSER(grp_v_scaler_top_fu_484_m_axi_mm_video_WUSER),
    .m_axi_mm_video_ARVALID(grp_v_scaler_top_fu_484_m_axi_mm_video_ARVALID),
    .m_axi_mm_video_ARREADY(mm_video_ARREADY),
    .m_axi_mm_video_ARADDR(grp_v_scaler_top_fu_484_m_axi_mm_video_ARADDR),
    .m_axi_mm_video_ARID(grp_v_scaler_top_fu_484_m_axi_mm_video_ARID),
    .m_axi_mm_video_ARLEN(grp_v_scaler_top_fu_484_m_axi_mm_video_ARLEN),
    .m_axi_mm_video_ARSIZE(grp_v_scaler_top_fu_484_m_axi_mm_video_ARSIZE),
    .m_axi_mm_video_ARBURST(grp_v_scaler_top_fu_484_m_axi_mm_video_ARBURST),
    .m_axi_mm_video_ARLOCK(grp_v_scaler_top_fu_484_m_axi_mm_video_ARLOCK),
    .m_axi_mm_video_ARCACHE(grp_v_scaler_top_fu_484_m_axi_mm_video_ARCACHE),
    .m_axi_mm_video_ARPROT(grp_v_scaler_top_fu_484_m_axi_mm_video_ARPROT),
    .m_axi_mm_video_ARQOS(grp_v_scaler_top_fu_484_m_axi_mm_video_ARQOS),
    .m_axi_mm_video_ARREGION(grp_v_scaler_top_fu_484_m_axi_mm_video_ARREGION),
    .m_axi_mm_video_ARUSER(grp_v_scaler_top_fu_484_m_axi_mm_video_ARUSER),
    .m_axi_mm_video_RVALID(mm_video_RVALID),
    .m_axi_mm_video_RREADY(grp_v_scaler_top_fu_484_m_axi_mm_video_RREADY),
    .m_axi_mm_video_RDATA(mm_video_RDATA),
    .m_axi_mm_video_RLAST(mm_video_RLAST),
    .m_axi_mm_video_RID(mm_video_RID),
    .m_axi_mm_video_RUSER(mm_video_RUSER),
    .m_axi_mm_video_RRESP(mm_video_RRESP),
    .m_axi_mm_video_BVALID(mm_video_BVALID),
    .m_axi_mm_video_BREADY(grp_v_scaler_top_fu_484_m_axi_mm_video_BREADY),
    .m_axi_mm_video_BRESP(mm_video_BRESP),
    .m_axi_mm_video_BID(mm_video_BID),
    .m_axi_mm_video_BUSER(mm_video_BUSER),
    .srcImgBuf0(srcImgBuf0_0_read_reg_1136),
    .srcImgBuf1(srcImgBuf1_0_read_reg_1131),
    .HeightIn(HeightIn_read_reg_1344),
    .HeightOut(HeightOut_read_reg_1349),
    .WidthIn(WidthIn_read_reg_1211),
    .WidthOut(WidthOut_read_reg_1218),
    .StrideIn(InStride_read_reg_1354),
    .StrideOut(OutStride_read_reg_1359),
    .InPixelFmt(InPixelFmt_read_reg_1364),
    .OutPixelFmt(OutPixelFmt_read_reg_1369),
    .LineRate(LineRate_read_reg_1374),
    .blkmm_hfltCoeff_0_address0(grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_address0),
    .blkmm_hfltCoeff_0_ce0(grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_ce0),
    .blkmm_hfltCoeff_0_d0(grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_d0),
    .blkmm_hfltCoeff_0_q0(blkmm_hfltCoeff_0_q0),
    .blkmm_hfltCoeff_0_we0(grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_we0),
    .blkmm_hfltCoeff_0_address1(grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_address1),
    .blkmm_hfltCoeff_0_ce1(grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_ce1),
    .blkmm_hfltCoeff_0_d1(grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_d1),
    .blkmm_hfltCoeff_0_q1(16'd0),
    .blkmm_hfltCoeff_0_we1(grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_we1),
    .blkmm_vfltCoeff_0_address0(grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_address0),
    .blkmm_vfltCoeff_0_ce0(grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_ce0),
    .blkmm_vfltCoeff_0_d0(grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_d0),
    .blkmm_vfltCoeff_0_q0(blkmm_vfltCoeff_0_q0),
    .blkmm_vfltCoeff_0_we0(grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_we0),
    .blkmm_vfltCoeff_0_address1(grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_address1),
    .blkmm_vfltCoeff_0_ce1(grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_ce1),
    .blkmm_vfltCoeff_0_d1(grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_d1),
    .blkmm_vfltCoeff_0_q1(16'd0),
    .blkmm_vfltCoeff_0_we1(grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_we1),
    .blkmm_phasesH_address0(grp_v_scaler_top_fu_484_blkmm_phasesH_address0),
    .blkmm_phasesH_ce0(grp_v_scaler_top_fu_484_blkmm_phasesH_ce0),
    .blkmm_phasesH_d0(grp_v_scaler_top_fu_484_blkmm_phasesH_d0),
    .blkmm_phasesH_q0(blkmm_phasesH_V_q0),
    .blkmm_phasesH_we0(grp_v_scaler_top_fu_484_blkmm_phasesH_we0),
    .blkmm_phasesH_address1(grp_v_scaler_top_fu_484_blkmm_phasesH_address1),
    .blkmm_phasesH_ce1(grp_v_scaler_top_fu_484_blkmm_phasesH_ce1),
    .blkmm_phasesH_d1(grp_v_scaler_top_fu_484_blkmm_phasesH_d1),
    .blkmm_phasesH_q1(18'd0),
    .blkmm_phasesH_we1(grp_v_scaler_top_fu_484_blkmm_phasesH_we1),
    .dstImgBuf0(dstImgBuf0_0_read_reg_1126),
    .dstImgBuf1(dstImgBuf1_0_read_reg_1121),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .WidthOut_ap_vld(1'b1),
    .HeightOut_ap_vld(1'b1),
    .WidthIn_ap_vld(1'b1),
    .InPixelFmt_ap_vld(1'b1),
    .OutPixelFmt_ap_vld(1'b1),
    .srcImgBuf0_ap_vld(1'b1),
    .srcImgBuf1_ap_vld(1'b1),
    .HeightIn_ap_vld(1'b1),
    .StrideIn_ap_vld(1'b1),
    .StrideOut_ap_vld(1'b1),
    .LineRate_ap_vld(1'b1),
    .dstImgBuf0_ap_vld(1'b1),
    .dstImgBuf1_ap_vld(1'b1),
    .ap_start(grp_v_scaler_top_fu_484_ap_start),
    .ap_done(grp_v_scaler_top_fu_484_ap_done),
    .ap_ready(grp_v_scaler_top_fu_484_ap_ready),
    .ap_idle(grp_v_scaler_top_fu_484_ap_idle),
    .ap_continue(grp_v_scaler_top_fu_484_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln60_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state9))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state9);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln60_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_v_scaler_top_fu_484_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state13_on_subcall_done) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_sync_reg_grp_v_scaler_top_fu_484_ap_done <= 1'b0;
        end else if ((grp_v_scaler_top_fu_484_ap_done == 1'b1)) begin
            ap_sync_reg_grp_v_scaler_top_fu_484_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_v_scaler_top_fu_484_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state13_on_subcall_done) & (1'b1 == ap_CS_fsm_state13))) begin
            ap_sync_reg_grp_v_scaler_top_fu_484_ap_ready <= 1'b0;
        end else if ((grp_v_scaler_top_fu_484_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_v_scaler_top_fu_484_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_v_scaler_top_fu_484_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state12) | ((ap_sync_grp_v_scaler_top_fu_484_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state13)))) begin
            grp_v_scaler_top_fu_484_ap_start_reg <= 1'b1;
        end else if ((grp_v_scaler_top_fu_484_ap_ready == 1'b1)) begin
            grp_v_scaler_top_fu_484_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln64_reg_1265 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        arrayIdx_V_2_reg_474 <= arrayIdx_V_5_reg_1269;
    end else if (((icmp_ln60_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        arrayIdx_V_2_reg_474 <= zext_ln60_fu_664_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        arrayIdx_V_reg_439 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        arrayIdx_V_reg_439 <= arrayIdx_V_1_fu_1117_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_527_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_395 <= add_ln125_1_fu_521_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_395 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        offset_fu_242 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln64_reg_1265 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        offset_fu_242 <= offset_9_fu_869_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln64_reg_1265 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_Val2_s_reg_450 <= p_Result_s_fu_1097_p4;
    end else if (((icmp_ln60_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        p_Val2_s_reg_450 <= 18'd0;
    end
end

always @ (posedge ap_clk) begin
    s_axi_CTRL_flush_done <= m_axi_mm_video_flush_done;
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_679_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        s_reg_463 <= s_1_fu_673_p2;
    end else if (((icmp_ln60_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        s_reg_463 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        xWritePos_fu_246 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln64_reg_1265 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        xWritePos_fu_246 <= xWritePos_3_fu_876_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_527_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_2_reg_417 <= add_ln130_fu_565_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_2_reg_417 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        x_reg_428 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        x_reg_428 <= add_ln60_reg_1241;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln125_reg_1146 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_reg_406 <= select_ln125_1_reg_1155;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_reg_406 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        HeightIn_read_reg_1344 <= HeightIn;
        HeightOut_read_reg_1349 <= HeightOut;
        InPixelFmt_read_reg_1364 <= InPixelFmt;
        InStride_read_reg_1354 <= InStride;
        LineRate_read_reg_1374 <= LineRate;
        OutPixelFmt_read_reg_1369 <= OutPixelFmt;
        OutStride_read_reg_1359 <= OutStride;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        PixelRate_read_reg_1226 <= PixelRate;
        WidthIn_read_reg_1211 <= WidthIn;
        WidthOut_read_reg_1218 <= WidthOut;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln60_reg_1241 <= add_ln60_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_679_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln91_reg_1291 <= add_ln91_fu_770_p2;
        add_ln92_1_reg_1321 <= add_ln92_1_fu_824_p2;
        add_ln92_reg_1315 <= add_ln92_fu_814_p2;
        icmp_ln414_1_reg_1326 <= icmp_ln414_1_fu_834_p2;
        icmp_ln414_reg_1296 <= icmp_ln414_fu_780_p2;
        offset_7_reg_1275 <= offset_7_fu_734_p3;
        shl_ln414_reg_1309 <= shl_ln414_fu_808_p2;
        tmp_16_reg_1281 <= {{offset_7_fu_734_p3[31:16]}};
        zext_ln414_reg_1303[1 : 0] <= zext_ln414_fu_786_p1[1 : 0];
zext_ln414_reg_1303[3] <= zext_ln414_fu_786_p1[3];
        zext_ln91_reg_1286[1 : 0] <= zext_ln91_fu_766_p1[1 : 0];
zext_ln91_reg_1286[3] <= zext_ln91_fu_766_p1[3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_679_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        arrayIdx_V_5_reg_1269 <= arrayIdx_V_5_fu_726_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        blkmm_phasesH_V_addr_reg_1255 <= zext_ln60_1_fu_668_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        dstImgBuf0_0_read_reg_1126 <= dstImgBuf0_0;
        dstImgBuf1_0_read_reg_1121 <= dstImgBuf1_0;
        srcImgBuf0_0_read_reg_1136 <= srcImgBuf0_0;
        srcImgBuf1_0_read_reg_1131 <= srcImgBuf1_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln125_reg_1146 <= icmp_ln125_fu_527_p2;
        icmp_ln125_reg_1146_pp0_iter1_reg <= icmp_ln125_reg_1146;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln125_reg_1146_pp0_iter2_reg <= icmp_ln125_reg_1146_pp0_iter1_reg;
        zext_ln133_2_reg_1171_pp0_iter2_reg[8 : 0] <= zext_ln133_2_reg_1171[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln64_reg_1265 <= icmp_ln64_fu_679_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_reg_1146_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mm_hfltCoeff_load_reg_1187 <= mm_hfltCoeff_q0;
        mm_vfltCoeff_load_reg_1192 <= mm_vfltCoeff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_527_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln125_1_reg_1155 <= select_ln125_1_fu_553_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_fu_527_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln125_reg_1150 <= select_ln125_fu_545_p3;
        trunc_ln133_reg_1161 <= trunc_ln133_fu_561_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln_reg_1236 <= {{add_ln47_fu_637_p2[16:1]}};
        zext_ln47_reg_1231[15 : 0] <= zext_ln47_fu_620_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln125_reg_1146 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln133_2_reg_1171[8 : 0] <= zext_ln133_2_fu_604_p1[8 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln125_fu_527_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_679_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state13_on_subcall_done) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln64_reg_1265 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_arrayIdx_V_2_phi_fu_477_p4 = arrayIdx_V_5_reg_1269;
    end else begin
        ap_phi_mux_arrayIdx_V_2_phi_fu_477_p4 = arrayIdx_V_2_reg_474;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln125_reg_1146 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_y_phi_fu_410_p4 = select_ln125_1_reg_1155;
    end else begin
        ap_phi_mux_y_phi_fu_410_p4 = y_reg_406;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state13_on_subcall_done) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln64_reg_1265 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_sig_allocacmp_offset_load = offset_9_fu_869_p3;
    end else begin
        ap_sig_allocacmp_offset_load = offset_fu_242;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        blkmm_hfltCoeff_0_address0 = zext_ln133_2_reg_1171_pp0_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        blkmm_hfltCoeff_0_address0 = grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_address0;
    end else begin
        blkmm_hfltCoeff_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        blkmm_hfltCoeff_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        blkmm_hfltCoeff_0_ce0 = grp_v_scaler_top_fu_484_blkmm_hfltCoeff_0_ce0;
    end else begin
        blkmm_hfltCoeff_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln125_reg_1146_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        blkmm_hfltCoeff_0_we0 = 1'b1;
    end else begin
        blkmm_hfltCoeff_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        blkmm_phasesH_V_address0 = blkmm_phasesH_V_addr_reg_1255;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        blkmm_phasesH_V_address0 = grp_v_scaler_top_fu_484_blkmm_phasesH_address0;
    end else begin
        blkmm_phasesH_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        blkmm_phasesH_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        blkmm_phasesH_V_ce0 = grp_v_scaler_top_fu_484_blkmm_phasesH_ce0;
    end else begin
        blkmm_phasesH_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        blkmm_phasesH_V_we0 = 1'b1;
    end else begin
        blkmm_phasesH_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        blkmm_vfltCoeff_0_address0 = zext_ln133_2_reg_1171_pp0_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        blkmm_vfltCoeff_0_address0 = grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_address0;
    end else begin
        blkmm_vfltCoeff_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        blkmm_vfltCoeff_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        blkmm_vfltCoeff_0_ce0 = grp_v_scaler_top_fu_484_blkmm_vfltCoeff_0_ce0;
    end else begin
        blkmm_vfltCoeff_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln125_reg_1146_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        blkmm_vfltCoeff_0_we0 = 1'b1;
    end else begin
        blkmm_vfltCoeff_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state13_on_subcall_done) & (1'b1 == ap_CS_fsm_state13))) begin
        grp_v_scaler_top_fu_484_ap_continue = 1'b1;
    end else begin
        grp_v_scaler_top_fu_484_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mm_hfltCoeff_ce0 = 1'b1;
    end else begin
        mm_hfltCoeff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mm_vfltCoeff_ce0 = 1'b1;
    end else begin
        mm_vfltCoeff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        mm_video_ARVALID = grp_v_scaler_top_fu_484_m_axi_mm_video_ARVALID;
    end else begin
        mm_video_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        mm_video_AWVALID = grp_v_scaler_top_fu_484_m_axi_mm_video_AWVALID;
    end else begin
        mm_video_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        mm_video_BREADY = grp_v_scaler_top_fu_484_m_axi_mm_video_BREADY;
    end else begin
        mm_video_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        mm_video_RREADY = grp_v_scaler_top_fu_484_m_axi_mm_video_RREADY;
    end else begin
        mm_video_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        mm_video_WVALID = grp_v_scaler_top_fu_484_m_axi_mm_video_WVALID;
    end else begin
        mm_video_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln125_fu_527_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln125_fu_527_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln60_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln64_fu_679_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln64_fu_679_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b0 == ap_block_state13_on_subcall_done) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutputWriteEn_V_fu_853_p2 = (icmp_ln83_fu_843_p2 & icmp_ln83_1_fu_848_p2);

assign PhaseH_V_fu_688_p4 = {{ap_sig_allocacmp_offset_load[15:10]}};

assign add_ln125_1_fu_521_p2 = (indvar_flatten_reg_395 + 9'd1);

assign add_ln125_fu_533_p2 = (ap_phi_mux_y_phi_fu_410_p4 + 7'd1);

assign add_ln130_fu_565_p2 = (select_ln125_fu_545_p3 + 3'd1);

assign add_ln133_fu_598_p2 = (sub_ln133_fu_589_p2 + zext_ln133_1_fu_595_p1);

assign add_ln47_fu_637_p2 = (zext_ln47_1_fu_633_p1 + 17'd1);

assign add_ln60_fu_653_p2 = (x_reg_428 + 16'd1);

assign add_ln91_fu_770_p2 = (or_ln_fu_756_p4 + 4'd5);

assign add_ln92_1_fu_824_p2 = (or_ln_fu_756_p4 + 4'd6);

assign add_ln92_fu_814_p2 = (zext_ln91_fu_766_p1 + 5'd7);

assign add_ln93_fu_1084_p2 = (zext_ln91_reg_1286 + 5'd8);

assign and_ln414_1_fu_952_p2 = (xor_ln414_fu_946_p2 & p_Val2_s_reg_450);

assign and_ln414_2_fu_958_p2 = (select_ln414_3_fu_922_p3 & and_ln414_fu_940_p2);

assign and_ln414_3_fu_1054_p2 = (shl_ln414_3_fu_1042_p2 & lshr_ln414_1_fu_1048_p2);

assign and_ln414_4_fu_1066_p2 = (xor_ln414_1_fu_1060_p2 & p_Result_1_fu_964_p2);

assign and_ln414_5_fu_1072_p2 = (select_ln414_7_fu_1035_p3 & and_ln414_3_fu_1054_p2);

assign and_ln414_fu_940_p2 = (shl_ln414_1_fu_928_p2 & lshr_ln414_fu_934_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_on_subcall_done = ((ap_sync_grp_v_scaler_top_fu_484_ap_ready & ap_sync_grp_v_scaler_top_fu_484_ap_done) == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_v_scaler_top_fu_484_ap_done = (grp_v_scaler_top_fu_484_ap_done | ap_sync_reg_grp_v_scaler_top_fu_484_ap_done);

assign ap_sync_grp_v_scaler_top_fu_484_ap_ready = (grp_v_scaler_top_fu_484_ap_ready | ap_sync_reg_grp_v_scaler_top_fu_484_ap_ready);

assign arrayIdx_V_1_fu_1117_p1 = arrayIdx_V_2_reg_474[0:0];

assign arrayIdx_V_3_fu_720_p2 = (ap_phi_mux_arrayIdx_V_2_phi_fu_477_p4 + 3'd1);

assign arrayIdx_V_5_fu_726_p3 = ((icmp_ln74_fu_708_p2[0:0] == 1'b1) ? arrayIdx_V_3_fu_720_p2 : ap_phi_mux_arrayIdx_V_2_phi_fu_477_p4);

assign grp_v_scaler_top_fu_484_ap_start = grp_v_scaler_top_fu_484_ap_start_reg;

assign icmp_ln125_fu_527_p2 = ((indvar_flatten_reg_395 == 9'd384) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_539_p2 = ((x_2_reg_417 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln414_1_fu_834_p2 = ((zext_ln215_40_fu_830_p1 > zext_ln92_fu_820_p1) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_780_p2 = ((or_ln_fu_756_p4 > 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_623_p2 = ((WidthIn_read_reg_1211 > WidthOut_read_reg_1218) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_659_p2 = ((x_reg_428 == trunc_ln_reg_1236) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_679_p2 = ((s_reg_463 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_708_p2 = ((tmp_fu_698_p4 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_1_fu_848_p2 = ((xWritePos_fu_246 < zext_ln47_reg_1231) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_843_p2 = ((tmp_16_reg_1281 == 16'd0) ? 1'b1 : 1'b0);

assign lshr_ln414_1_fu_1048_p2 = 18'd262143 >> zext_ln414_8_fu_1015_p1;

assign lshr_ln414_fu_934_p2 = 18'd262143 >> zext_ln414_4_fu_909_p1;

assign mm_hfltCoeff_address0 = zext_ln133_2_fu_604_p1;

assign mm_vfltCoeff_address0 = zext_ln133_2_fu_604_p1;

assign offset_6_fu_714_p2 = ($signed(ap_sig_allocacmp_offset_load) + $signed(32'd4294901760));

assign offset_7_fu_734_p3 = ((icmp_ln74_fu_708_p2[0:0] == 1'b1) ? offset_6_fu_714_p2 : ap_sig_allocacmp_offset_load);

assign offset_8_fu_859_p2 = (PixelRate_read_reg_1226 + offset_7_reg_1275);

assign offset_9_fu_869_p3 = ((OutputWriteEn_V_fu_853_p2[0:0] == 1'b1) ? offset_8_fu_859_p2 : offset_7_reg_1275);

assign or_ln_fu_756_p4 = {{{trunc_ln91_fu_752_p1}, {1'd0}}, {s_reg_463}};

assign p_Result_1_fu_964_p2 = (and_ln414_2_fu_958_p2 | and_ln414_1_fu_952_p2);

assign p_Result_2_fu_1078_p2 = (and_ln414_5_fu_1072_p2 | and_ln414_4_fu_1066_p2);

always @ (*) begin
    p_Result_s_fu_1097_p4 = p_Result_2_fu_1078_p2;
    p_Result_s_fu_1097_p4[zext_ln849_fu_1089_p1] = |(zext_ln849_1_fu_1093_p1);
end

assign s_1_fu_673_p2 = (s_reg_463 + 2'd1);

assign select_ln125_1_fu_553_p3 = ((icmp_ln130_fu_539_p2[0:0] == 1'b1) ? add_ln125_fu_533_p2 : ap_phi_mux_y_phi_fu_410_p4);

assign select_ln125_fu_545_p3 = ((icmp_ln130_fu_539_p2[0:0] == 1'b1) ? 3'd0 : x_2_reg_417);

assign select_ln414_1_fu_893_p3 = ((icmp_ln414_reg_1296[0:0] == 1'b1) ? zext_ln414_1_fu_884_p1 : zext_ln414_reg_1303);

assign select_ln414_2_fu_796_p3 = ((icmp_ln414_fu_780_p2[0:0] == 1'b1) ? sub_ln414_fu_790_p2 : zext_ln414_fu_786_p1);

assign select_ln414_3_fu_922_p3 = ((icmp_ln414_reg_1296[0:0] == 1'b1) ? tmp_17_fu_913_p4 : shl_ln414_reg_1309);

assign select_ln414_4_fu_982_p3 = ((icmp_ln414_1_reg_1326[0:0] == 1'b1) ? zext_ln414_5_fu_973_p1 : add_ln92_reg_1315);

assign select_ln414_5_fu_988_p3 = ((icmp_ln414_1_reg_1326[0:0] == 1'b1) ? add_ln92_reg_1315 : zext_ln414_5_fu_973_p1);

assign select_ln414_6_fu_994_p3 = ((icmp_ln414_1_reg_1326[0:0] == 1'b1) ? sub_ln414_2_fu_976_p2 : zext_ln414_5_fu_973_p1);

assign select_ln414_7_fu_1035_p3 = ((icmp_ln414_1_reg_1326[0:0] == 1'b1) ? tmp_19_fu_1025_p4 : shl_ln414_2_fu_1019_p2);

assign select_ln414_fu_887_p3 = ((icmp_ln414_reg_1296[0:0] == 1'b1) ? zext_ln414_reg_1303 : zext_ln414_1_fu_884_p1);

assign select_ln47_fu_627_p3 = ((icmp_ln47_fu_623_p2[0:0] == 1'b1) ? WidthIn_read_reg_1211 : WidthOut_read_reg_1218);

assign shl_ln414_1_fu_928_p2 = 18'd262143 << zext_ln414_3_fu_905_p1;

assign shl_ln414_2_fu_1019_p2 = zext_ln215_41_fu_970_p1 << zext_ln414_6_fu_1007_p1;

assign shl_ln414_3_fu_1042_p2 = 18'd262143 << zext_ln414_7_fu_1011_p1;

assign shl_ln414_fu_808_p2 = zext_ln215_fu_776_p1 << zext_ln414_2_fu_804_p1;

assign sub_ln133_fu_589_p2 = (tmp_3_cast_fu_571_p3 - zext_ln133_fu_585_p1);

assign sub_ln414_1_fu_899_p2 = ($signed(5'd17) - $signed(select_ln414_fu_887_p3));

assign sub_ln414_2_fu_976_p2 = ($signed(5'd17) - $signed(zext_ln414_5_fu_973_p1));

assign sub_ln414_3_fu_1001_p2 = ($signed(5'd17) - $signed(select_ln414_4_fu_982_p3));

assign sub_ln414_fu_790_p2 = ($signed(5'd17) - $signed(zext_ln414_fu_786_p1));

integer ap_tvar_int_0;

always @ (shl_ln414_reg_1309) begin
    for (ap_tvar_int_0 = 18 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 17 - 0) begin
            tmp_17_fu_913_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_17_fu_913_p4[ap_tvar_int_0] = shl_ln414_reg_1309[17 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln414_2_fu_1019_p2) begin
    for (ap_tvar_int_1 = 18 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 17 - 0) begin
            tmp_19_fu_1025_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_19_fu_1025_p4[ap_tvar_int_1] = shl_ln414_2_fu_1019_p2[17 - ap_tvar_int_1];
        end
    end
end

assign tmp_3_cast_fu_571_p3 = {{trunc_ln133_reg_1161}, {3'd0}};

assign tmp_4_fu_578_p3 = {{select_ln125_1_reg_1155}, {1'd0}};

assign tmp_fu_698_p4 = {{ap_sig_allocacmp_offset_load[31:16]}};

assign trunc_ln133_fu_561_p1 = select_ln125_1_fu_553_p3[5:0];

assign trunc_ln91_fu_752_p1 = s_reg_463[0:0];

assign xWritePos_2_fu_863_p2 = (xWritePos_fu_246 + 32'd1);

assign xWritePos_3_fu_876_p3 = ((OutputWriteEn_V_fu_853_p2[0:0] == 1'b1) ? xWritePos_2_fu_863_p2 : xWritePos_fu_246);

assign xor_ln414_1_fu_1060_p2 = (18'd262143 ^ and_ln414_3_fu_1054_p2);

assign xor_ln414_fu_946_p2 = (18'd262143 ^ and_ln414_fu_940_p2);

assign zext_ln133_1_fu_595_p1 = select_ln125_reg_1150;

assign zext_ln133_2_fu_604_p1 = add_ln133_fu_598_p2;

assign zext_ln133_fu_585_p1 = tmp_4_fu_578_p3;

assign zext_ln215_40_fu_830_p1 = add_ln92_1_fu_824_p2;

assign zext_ln215_41_fu_970_p1 = arrayIdx_V_5_reg_1269;

assign zext_ln215_fu_776_p1 = PhaseH_V_fu_688_p4;

assign zext_ln414_1_fu_884_p1 = add_ln91_reg_1291;

assign zext_ln414_2_fu_804_p1 = select_ln414_2_fu_796_p3;

assign zext_ln414_3_fu_905_p1 = select_ln414_1_fu_893_p3;

assign zext_ln414_4_fu_909_p1 = sub_ln414_1_fu_899_p2;

assign zext_ln414_5_fu_973_p1 = add_ln92_1_reg_1321;

assign zext_ln414_6_fu_1007_p1 = select_ln414_6_fu_994_p3;

assign zext_ln414_7_fu_1011_p1 = select_ln414_5_fu_988_p3;

assign zext_ln414_8_fu_1015_p1 = sub_ln414_3_fu_1001_p2;

assign zext_ln414_fu_786_p1 = or_ln_fu_756_p4;

assign zext_ln47_1_fu_633_p1 = select_ln47_fu_627_p3;

assign zext_ln47_fu_620_p1 = WidthOut_read_reg_1218;

assign zext_ln60_1_fu_668_p1 = x_reg_428;

assign zext_ln60_fu_664_p1 = arrayIdx_V_reg_439;

assign zext_ln849_1_fu_1093_p1 = OutputWriteEn_V_fu_853_p2;

assign zext_ln849_fu_1089_p1 = add_ln93_fu_1084_p2;

assign zext_ln91_fu_766_p1 = or_ln_fu_756_p4;

assign zext_ln92_fu_820_p1 = add_ln92_fu_814_p2;

always @ (posedge ap_clk) begin
    zext_ln133_2_reg_1171[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln133_2_reg_1171_pp0_iter2_reg[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    zext_ln47_reg_1231[31:16] <= 16'b0000000000000000;
    zext_ln91_reg_1286[2] <= 1'b0;
    zext_ln91_reg_1286[4] <= 1'b0;
    zext_ln414_reg_1303[2] <= 1'b0;
    zext_ln414_reg_1303[4] <= 1'b0;
end


// synthesis translate_off
`include "bd_v_multi_scaler_0_0_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //bd_v_multi_scaler_0_0_v_multi_scaler

