// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        img_dout,
        img_empty_n,
        img_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        Height_dout,
        Height_empty_n,
        Height_read,
        WidthOut_dout,
        WidthOut_empty_n,
        WidthOut_read,
        colorFormat_dout,
        colorFormat_empty_n,
        colorFormat_read
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_pp0_stage0 = 8'd4;
parameter    ap_ST_fsm_state5 = 8'd8;
parameter    ap_ST_fsm_state6 = 8'd16;
parameter    ap_ST_fsm_pp1_stage0 = 8'd32;
parameter    ap_ST_fsm_state9 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] img_dout;
input   img_empty_n;
output   img_read;
output  [47:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [5:0] m_axis_video_TKEEP;
output  [5:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [11:0] Height_dout;
input   Height_empty_n;
output   Height_read;
input  [11:0] WidthOut_dout;
input   WidthOut_empty_n;
output   WidthOut_read;
input  [1:0] colorFormat_dout;
input   colorFormat_empty_n;
output   colorFormat_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_read;
reg m_axis_video_TVALID;
reg Height_read;
reg WidthOut_read;
reg colorFormat_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] mapComp_address0;
reg    mapComp_ce0;
wire   [2:0] mapComp_q0;
reg    img_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln246_reg_805;
reg    m_axis_video_TDATA_blk_n;
reg    Height_blk_n;
reg    WidthOut_blk_n;
reg    colorFormat_blk_n;
reg   [2:0] i_reg_238;
reg   [10:0] j_reg_261;
reg   [0:0] sof_3_reg_272;
reg   [1:0] colorFormat_read_reg_700;
wire   [11:0] grp_reg_unsigned_short_s_fu_284_ap_return;
reg   [11:0] rows_reg_706;
wire    ap_CS_fsm_state2;
wire   [11:0] grp_reg_unsigned_short_s_fu_290_ap_return;
reg   [11:0] cols_reg_711;
wire   [4:0] sub_ln240_fu_314_p2;
reg   [4:0] sub_ln240_reg_716;
wire   [2:0] add_ln238_fu_320_p2;
reg   [2:0] add_ln238_reg_721;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln238_fu_326_p2;
reg   [0:0] icmp_ln238_reg_726;
wire   [10:0] div_i_fu_398_p4;
reg   [10:0] div_i_reg_742;
wire    ap_CS_fsm_state5;
wire   [11:0] sub_i_fu_411_p2;
reg   [11:0] sub_i_reg_747;
wire   [0:0] cmp38149_i_fu_417_p2;
reg   [0:0] cmp38149_i_reg_752;
wire   [2:0] trunc_ln215_fu_423_p1;
reg   [2:0] trunc_ln215_reg_756;
wire   [2:0] trunc_ln215_1_fu_427_p1;
reg   [2:0] trunc_ln215_1_reg_761;
wire   [2:0] trunc_ln215_2_fu_431_p1;
reg   [2:0] trunc_ln215_2_reg_766;
wire   [2:0] trunc_ln215_3_fu_435_p1;
reg   [2:0] trunc_ln215_3_reg_771;
wire   [2:0] trunc_ln215_4_fu_439_p1;
reg   [2:0] trunc_ln215_4_reg_776;
wire   [2:0] trunc_ln215_5_fu_443_p1;
reg   [2:0] trunc_ln215_5_reg_781;
wire   [11:0] i_2_fu_452_p2;
reg   [11:0] i_2_reg_786;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln244_fu_461_p2;
wire   [10:0] j_1_fu_466_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state7_pp1_stage0_iter0;
reg    ap_block_state8_pp1_stage0_iter1;
reg    ap_block_state8_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln246_fu_476_p2;
wire   [0:0] icmp_ln259_fu_481_p2;
reg   [0:0] icmp_ln259_reg_809;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_flush_enable;
reg   [2:0] ap_phi_mux_i_phi_fu_242_p4;
wire    ap_block_pp0_stage0;
reg   [11:0] i_1_reg_250;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln240_3_fu_341_p1;
reg   [4:0] map_V_0_0132_i_fu_144;
wire   [4:0] zext_ln240_fu_346_p1;
reg   [4:0] map_V_1_0133_i_fu_148;
reg   [4:0] map_V_2_0134_i_fu_152;
reg   [4:0] map_V_3_0135_i_fu_156;
reg   [4:0] map_V_4_0136_i_fu_160;
reg   [4:0] map_V_5_0137_i_fu_164;
reg   [0:0] sof_fu_168;
reg    ap_block_state1;
reg    ap_block_pp1_stage0_01001;
wire   [2:0] tmp_7_fu_303_p3;
wire   [4:0] tmp_6_fu_296_p3;
wire   [4:0] zext_ln240_1_fu_310_p1;
wire   [4:0] zext_ln240_2_fu_332_p1;
wire   [4:0] add_ln240_fu_336_p2;
wire   [11:0] div_i_cast_fu_407_p1;
wire   [11:0] zext_ln246_fu_472_p1;
wire   [7:0] pix_val_V_0_fu_486_p1;
wire   [7:0] tmp_fu_540_p2;
wire   [7:0] tmp_fu_540_p3;
wire   [7:0] tmp_fu_540_p4;
wire   [7:0] tmp_fu_540_p5;
wire   [7:0] tmp_fu_540_p6;
wire   [7:0] tmp_1_fu_557_p2;
wire   [7:0] tmp_1_fu_557_p3;
wire   [7:0] tmp_1_fu_557_p4;
wire   [7:0] tmp_1_fu_557_p5;
wire   [7:0] tmp_1_fu_557_p6;
wire   [7:0] tmp_2_fu_574_p2;
wire   [7:0] tmp_2_fu_574_p3;
wire   [7:0] tmp_2_fu_574_p4;
wire   [7:0] tmp_2_fu_574_p5;
wire   [7:0] tmp_2_fu_574_p6;
wire   [7:0] tmp_3_fu_591_p2;
wire   [7:0] tmp_3_fu_591_p3;
wire   [7:0] tmp_3_fu_591_p4;
wire   [7:0] tmp_3_fu_591_p5;
wire   [7:0] tmp_3_fu_591_p6;
wire   [7:0] tmp_4_fu_608_p2;
wire   [7:0] tmp_4_fu_608_p3;
wire   [7:0] tmp_4_fu_608_p4;
wire   [7:0] tmp_4_fu_608_p5;
wire   [7:0] tmp_4_fu_608_p6;
wire   [7:0] tmp_5_fu_625_p2;
wire   [7:0] tmp_5_fu_625_p3;
wire   [7:0] tmp_5_fu_625_p4;
wire   [7:0] tmp_5_fu_625_p5;
wire   [7:0] tmp_5_fu_625_p6;
wire   [7:0] tmp_5_fu_625_p8;
wire   [7:0] tmp_4_fu_608_p8;
wire   [7:0] tmp_3_fu_591_p8;
wire   [7:0] tmp_2_fu_574_p8;
wire   [7:0] tmp_1_fu_557_p8;
wire   [7:0] tmp_fu_540_p8;
wire    ap_CS_fsm_state10;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

bd_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo_mapComp #(
    .DataWidth( 3 ),
    .AddressRange( 24 ),
    .AddressWidth( 5 ))
mapComp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mapComp_address0),
    .ce0(mapComp_ce0),
    .q0(mapComp_q0)
);

bd_v_frmbuf_rd_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_284(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .d(Height_dout),
    .ap_return(grp_reg_unsigned_short_s_fu_284_ap_return)
);

bd_v_frmbuf_rd_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_290(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .d(WidthOut_dout),
    .ap_return(grp_reg_unsigned_short_s_fu_290_ap_return)
);

bd_v_frmbuf_rd_0_0_mux_63_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_63_8_1_1_U33(
    .din0(pix_val_V_0_fu_486_p1),
    .din1(tmp_fu_540_p2),
    .din2(tmp_fu_540_p3),
    .din3(tmp_fu_540_p4),
    .din4(tmp_fu_540_p5),
    .din5(tmp_fu_540_p6),
    .din6(trunc_ln215_reg_756),
    .dout(tmp_fu_540_p8)
);

bd_v_frmbuf_rd_0_0_mux_63_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_63_8_1_1_U34(
    .din0(pix_val_V_0_fu_486_p1),
    .din1(tmp_1_fu_557_p2),
    .din2(tmp_1_fu_557_p3),
    .din3(tmp_1_fu_557_p4),
    .din4(tmp_1_fu_557_p5),
    .din5(tmp_1_fu_557_p6),
    .din6(trunc_ln215_1_reg_761),
    .dout(tmp_1_fu_557_p8)
);

bd_v_frmbuf_rd_0_0_mux_63_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_63_8_1_1_U35(
    .din0(pix_val_V_0_fu_486_p1),
    .din1(tmp_2_fu_574_p2),
    .din2(tmp_2_fu_574_p3),
    .din3(tmp_2_fu_574_p4),
    .din4(tmp_2_fu_574_p5),
    .din5(tmp_2_fu_574_p6),
    .din6(trunc_ln215_2_reg_766),
    .dout(tmp_2_fu_574_p8)
);

bd_v_frmbuf_rd_0_0_mux_63_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_63_8_1_1_U36(
    .din0(pix_val_V_0_fu_486_p1),
    .din1(tmp_3_fu_591_p2),
    .din2(tmp_3_fu_591_p3),
    .din3(tmp_3_fu_591_p4),
    .din4(tmp_3_fu_591_p5),
    .din5(tmp_3_fu_591_p6),
    .din6(trunc_ln215_3_reg_771),
    .dout(tmp_3_fu_591_p8)
);

bd_v_frmbuf_rd_0_0_mux_63_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_63_8_1_1_U37(
    .din0(pix_val_V_0_fu_486_p1),
    .din1(tmp_4_fu_608_p2),
    .din2(tmp_4_fu_608_p3),
    .din3(tmp_4_fu_608_p4),
    .din4(tmp_4_fu_608_p5),
    .din5(tmp_4_fu_608_p6),
    .din6(trunc_ln215_4_reg_776),
    .dout(tmp_4_fu_608_p8)
);

bd_v_frmbuf_rd_0_0_mux_63_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 3 ),
    .dout_WIDTH( 8 ))
mux_63_8_1_1_U38(
    .din0(pix_val_V_0_fu_486_p1),
    .din1(tmp_5_fu_625_p2),
    .din2(tmp_5_fu_625_p3),
    .din3(tmp_5_fu_625_p4),
    .din4(tmp_5_fu_625_p5),
    .din5(tmp_5_fu_625_p6),
    .din6(trunc_ln215_5_reg_781),
    .dout(tmp_5_fu_625_p8)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp1_flush_enable)) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln244_fu_461_p2 == 1'd0) & (cmp38149_i_reg_752 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln244_fu_461_p2 == 1'd0) & (cmp38149_i_reg_752 == 1'd0))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_250 <= i_2_reg_786;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_250 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln238_reg_726 == 1'd0))) begin
        i_reg_238 <= add_ln238_reg_721;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_238 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln244_fu_461_p2 == 1'd0) & (cmp38149_i_reg_752 == 1'd0))) begin
        j_reg_261 <= 11'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln246_fu_476_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_reg_261 <= j_1_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln244_fu_461_p2 == 1'd0) & (cmp38149_i_reg_752 == 1'd0))) begin
        sof_3_reg_272 <= sof_fu_168;
    end else if (((icmp_ln246_reg_805 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sof_3_reg_272 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sof_fu_168 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (cmp38149_i_reg_752 == 1'd0))) begin
        sof_fu_168 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln238_reg_721 <= add_ln238_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cmp38149_i_reg_752 <= cmp38149_i_fu_417_p2;
        div_i_reg_742 <= {{cols_reg_711[11:1]}};
        sub_i_reg_747 <= sub_i_fu_411_p2;
        trunc_ln215_1_reg_761 <= trunc_ln215_1_fu_427_p1;
        trunc_ln215_2_reg_766 <= trunc_ln215_2_fu_431_p1;
        trunc_ln215_3_reg_771 <= trunc_ln215_3_fu_435_p1;
        trunc_ln215_4_reg_776 <= trunc_ln215_4_fu_439_p1;
        trunc_ln215_5_reg_781 <= trunc_ln215_5_fu_443_p1;
        trunc_ln215_reg_756 <= trunc_ln215_fu_423_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        colorFormat_read_reg_700 <= colorFormat_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cols_reg_711 <= grp_reg_unsigned_short_s_fu_290_ap_return;
        rows_reg_706 <= grp_reg_unsigned_short_s_fu_284_ap_return;
        sub_ln240_reg_716[4 : 1] <= sub_ln240_fu_314_p2[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_786 <= i_2_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln238_reg_726 <= icmp_ln238_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln246_reg_805 <= icmp_ln246_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln246_fu_476_p2 == 1'd0))) begin
        icmp_ln259_reg_809 <= icmp_ln259_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_238 == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_0_0132_i_fu_144[2 : 0] <= zext_ln240_fu_346_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_238 == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_1_0133_i_fu_148[2 : 0] <= zext_ln240_fu_346_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_238 == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_2_0134_i_fu_152[2 : 0] <= zext_ln240_fu_346_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_238 == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_3_0135_i_fu_156[2 : 0] <= zext_ln240_fu_346_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_238 == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        map_V_4_0136_i_fu_160[2 : 0] <= zext_ln240_fu_346_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & ((i_reg_238 == 3'd5) | ((i_reg_238 == 3'd6) | (i_reg_238 == 3'd7))))) begin
        map_V_5_0137_i_fu_164[2 : 0] <= zext_ln240_fu_346_p1[2 : 0];
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_blk_n = Height_empty_n;
    end else begin
        Height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((colorFormat_empty_n == 1'b0) | (1'b0 == WidthOut_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_read = 1'b1;
    end else begin
        Height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthOut_blk_n = WidthOut_empty_n;
    end else begin
        WidthOut_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((colorFormat_empty_n == 1'b0) | (1'b0 == WidthOut_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthOut_read = 1'b1;
    end else begin
        WidthOut_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln238_fu_326_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln246_fu_476_p2 == 1'd1))) begin
        ap_condition_pp1_flush_enable = 1'b1;
    end else begin
        ap_condition_pp1_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln238_reg_726 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_242_p4 = add_ln238_reg_721;
    end else begin
        ap_phi_mux_i_phi_fu_242_p4 = i_reg_238;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        colorFormat_blk_n = colorFormat_empty_n;
    end else begin
        colorFormat_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((colorFormat_empty_n == 1'b0) | (1'b0 == WidthOut_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        colorFormat_read = 1'b1;
    end else begin
        colorFormat_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln246_reg_805 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_blk_n = img_empty_n;
    end else begin
        img_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln246_reg_805 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_read = 1'b1;
    end else begin
        img_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln246_reg_805 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln246_reg_805 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        m_axis_video_TVALID = 1'b1;
    end else begin
        m_axis_video_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        mapComp_ce0 = 1'b1;
    end else begin
        mapComp_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((colorFormat_empty_n == 1'b0) | (1'b0 == WidthOut_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln238_fu_326_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln238_fu_326_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln244_fu_461_p2 == 1'd0) & (cmp38149_i_reg_752 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln244_fu_461_p2 == 1'd0) & (cmp38149_i_reg_752 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln238_fu_320_p2 = (ap_phi_mux_i_phi_fu_242_p4 + 3'd1);

assign add_ln240_fu_336_p2 = (sub_ln240_reg_716 + zext_ln240_2_fu_332_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((icmp_ln246_reg_805 == 1'd0) & (m_axis_video_TREADY == 1'b0)) | ((icmp_ln246_reg_805 == 1'd0) & (img_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((icmp_ln246_reg_805 == 1'd0) & (m_axis_video_TREADY == 1'b0)) | ((icmp_ln246_reg_805 == 1'd0) & (img_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state8_io) | ((icmp_ln246_reg_805 == 1'd0) & (m_axis_video_TREADY == 1'b0)) | ((icmp_ln246_reg_805 == 1'd0) & (img_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((colorFormat_empty_n == 1'b0) | (1'b0 == WidthOut_empty_n) | (1'b0 == Height_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((icmp_ln246_reg_805 == 1'd0) & (m_axis_video_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp1_stage0_iter1 = (((icmp_ln246_reg_805 == 1'd0) & (m_axis_video_TREADY == 1'b0)) | ((icmp_ln246_reg_805 == 1'd0) & (img_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign cmp38149_i_fu_417_p2 = ((div_i_fu_398_p4 == 11'd0) ? 1'b1 : 1'b0);

assign div_i_cast_fu_407_p1 = div_i_fu_398_p4;

assign div_i_fu_398_p4 = {{cols_reg_711[11:1]}};

assign i_2_fu_452_p2 = (i_1_reg_250 + 12'd1);

assign icmp_ln238_fu_326_p2 = ((ap_phi_mux_i_phi_fu_242_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln244_fu_461_p2 = ((i_1_reg_250 == rows_reg_706) ? 1'b1 : 1'b0);

assign icmp_ln246_fu_476_p2 = ((j_reg_261 == div_i_reg_742) ? 1'b1 : 1'b0);

assign icmp_ln259_fu_481_p2 = ((zext_ln246_fu_472_p1 == sub_i_reg_747) ? 1'b1 : 1'b0);

assign j_1_fu_466_p2 = (j_reg_261 + 11'd1);

assign m_axis_video_TDATA = {{{{{{tmp_5_fu_625_p8}, {tmp_4_fu_608_p8}}, {tmp_3_fu_591_p8}}, {tmp_2_fu_574_p8}}, {tmp_1_fu_557_p8}}, {tmp_fu_540_p8}};

assign m_axis_video_TDEST = 1'd0;

assign m_axis_video_TID = 1'd0;

assign m_axis_video_TKEEP = 6'd63;

assign m_axis_video_TLAST = icmp_ln259_reg_809;

assign m_axis_video_TSTRB = 6'd0;

assign m_axis_video_TUSER = sof_3_reg_272;

assign mapComp_address0 = zext_ln240_3_fu_341_p1;

assign pix_val_V_0_fu_486_p1 = img_dout[7:0];

assign sub_i_fu_411_p2 = ($signed(div_i_cast_fu_407_p1) + $signed(12'd4095));

assign sub_ln240_fu_314_p2 = (tmp_6_fu_296_p3 - zext_ln240_1_fu_310_p1);

assign tmp_1_fu_557_p2 = {{img_dout[15:8]}};

assign tmp_1_fu_557_p3 = {{img_dout[23:16]}};

assign tmp_1_fu_557_p4 = {{img_dout[31:24]}};

assign tmp_1_fu_557_p5 = {{img_dout[39:32]}};

assign tmp_1_fu_557_p6 = {{img_dout[47:40]}};

assign tmp_2_fu_574_p2 = {{img_dout[15:8]}};

assign tmp_2_fu_574_p3 = {{img_dout[23:16]}};

assign tmp_2_fu_574_p4 = {{img_dout[31:24]}};

assign tmp_2_fu_574_p5 = {{img_dout[39:32]}};

assign tmp_2_fu_574_p6 = {{img_dout[47:40]}};

assign tmp_3_fu_591_p2 = {{img_dout[15:8]}};

assign tmp_3_fu_591_p3 = {{img_dout[23:16]}};

assign tmp_3_fu_591_p4 = {{img_dout[31:24]}};

assign tmp_3_fu_591_p5 = {{img_dout[39:32]}};

assign tmp_3_fu_591_p6 = {{img_dout[47:40]}};

assign tmp_4_fu_608_p2 = {{img_dout[15:8]}};

assign tmp_4_fu_608_p3 = {{img_dout[23:16]}};

assign tmp_4_fu_608_p4 = {{img_dout[31:24]}};

assign tmp_4_fu_608_p5 = {{img_dout[39:32]}};

assign tmp_4_fu_608_p6 = {{img_dout[47:40]}};

assign tmp_5_fu_625_p2 = {{img_dout[15:8]}};

assign tmp_5_fu_625_p3 = {{img_dout[23:16]}};

assign tmp_5_fu_625_p4 = {{img_dout[31:24]}};

assign tmp_5_fu_625_p5 = {{img_dout[39:32]}};

assign tmp_5_fu_625_p6 = {{img_dout[47:40]}};

assign tmp_6_fu_296_p3 = {{colorFormat_read_reg_700}, {3'd0}};

assign tmp_7_fu_303_p3 = {{colorFormat_read_reg_700}, {1'd0}};

assign tmp_fu_540_p2 = {{img_dout[15:8]}};

assign tmp_fu_540_p3 = {{img_dout[23:16]}};

assign tmp_fu_540_p4 = {{img_dout[31:24]}};

assign tmp_fu_540_p5 = {{img_dout[39:32]}};

assign tmp_fu_540_p6 = {{img_dout[47:40]}};

assign trunc_ln215_1_fu_427_p1 = map_V_1_0133_i_fu_148[2:0];

assign trunc_ln215_2_fu_431_p1 = map_V_2_0134_i_fu_152[2:0];

assign trunc_ln215_3_fu_435_p1 = map_V_3_0135_i_fu_156[2:0];

assign trunc_ln215_4_fu_439_p1 = map_V_4_0136_i_fu_160[2:0];

assign trunc_ln215_5_fu_443_p1 = map_V_5_0137_i_fu_164[2:0];

assign trunc_ln215_fu_423_p1 = map_V_0_0132_i_fu_144[2:0];

assign zext_ln240_1_fu_310_p1 = tmp_7_fu_303_p3;

assign zext_ln240_2_fu_332_p1 = ap_phi_mux_i_phi_fu_242_p4;

assign zext_ln240_3_fu_341_p1 = add_ln240_fu_336_p2;

assign zext_ln240_fu_346_p1 = mapComp_q0;

assign zext_ln246_fu_472_p1 = j_reg_261;

always @ (posedge ap_clk) begin
    sub_ln240_reg_716[0] <= 1'b0;
    map_V_0_0132_i_fu_144[4:3] <= 2'b00;
    map_V_1_0133_i_fu_148[4:3] <= 2'b00;
    map_V_2_0134_i_fu_152[4:3] <= 2'b00;
    map_V_3_0135_i_fu_156[4:3] <= 2'b00;
    map_V_4_0136_i_fu_160[4:3] <= 2'b00;
    map_V_5_0137_i_fu_164[4:3] <= 2'b00;
end

endmodule //bd_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo
