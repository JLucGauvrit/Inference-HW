// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_mix_0_0_v_mix_yuv2rgb_true_17 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        srcLayer1Yuv_dout,
        srcLayer1Yuv_empty_n,
        srcLayer1Yuv_read,
        srcLayer1Rgb_din,
        srcLayer1Rgb_full_n,
        srcLayer1Rgb_write,
        HwReg_layerHeight16_load_cast_loc_dout,
        HwReg_layerHeight16_load_cast_loc_empty_n,
        HwReg_layerHeight16_load_cast_loc_read,
        layer1WidthInBytes_cast_loc_dout,
        layer1WidthInBytes_cast_loc_empty_n,
        layer1WidthInBytes_cast_loc_read,
        p_read1_dout,
        p_read1_empty_n,
        p_read1_read,
        HwReg_layerHeight16_load_cast_loc_out_din,
        HwReg_layerHeight16_load_cast_loc_out_full_n,
        HwReg_layerHeight16_load_cast_loc_out_write,
        layer1WidthInBytes_cast_loc_out_din,
        layer1WidthInBytes_cast_loc_out_full_n,
        layer1WidthInBytes_cast_loc_out_write,
        p_read1_out_din,
        p_read1_out_full_n,
        p_read1_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state12 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [47:0] srcLayer1Yuv_dout;
input   srcLayer1Yuv_empty_n;
output   srcLayer1Yuv_read;
output  [47:0] srcLayer1Rgb_din;
input   srcLayer1Rgb_full_n;
output   srcLayer1Rgb_write;
input  [11:0] HwReg_layerHeight16_load_cast_loc_dout;
input   HwReg_layerHeight16_load_cast_loc_empty_n;
output   HwReg_layerHeight16_load_cast_loc_read;
input  [11:0] layer1WidthInBytes_cast_loc_dout;
input   layer1WidthInBytes_cast_loc_empty_n;
output   layer1WidthInBytes_cast_loc_read;
input  [0:0] p_read1_dout;
input   p_read1_empty_n;
output   p_read1_read;
output  [11:0] HwReg_layerHeight16_load_cast_loc_out_din;
input   HwReg_layerHeight16_load_cast_loc_out_full_n;
output   HwReg_layerHeight16_load_cast_loc_out_write;
output  [11:0] layer1WidthInBytes_cast_loc_out_din;
input   layer1WidthInBytes_cast_loc_out_full_n;
output   layer1WidthInBytes_cast_loc_out_write;
output  [0:0] p_read1_out_din;
input   p_read1_out_full_n;
output   p_read1_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg srcLayer1Yuv_read;
reg srcLayer1Rgb_write;
reg HwReg_layerHeight16_load_cast_loc_read;
reg layer1WidthInBytes_cast_loc_read;
reg p_read1_read;
reg HwReg_layerHeight16_load_cast_loc_out_write;
reg layer1WidthInBytes_cast_loc_out_write;
reg p_read1_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    srcLayer1Yuv_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln900_reg_876;
reg    srcLayer1Rgb_blk_n;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] icmp_ln900_reg_876_pp0_iter6_reg;
reg    HwReg_layerHeight16_load_cast_loc_blk_n;
reg    layer1WidthInBytes_cast_loc_blk_n;
reg    p_read1_blk_n;
reg    HwReg_layerHeight16_load_cast_loc_out_blk_n;
reg    layer1WidthInBytes_cast_loc_out_blk_n;
reg    p_read1_out_blk_n;
reg   [10:0] x_reg_230;
reg   [11:0] HwReg_layerHeight16_load_cast_loc_read_reg_837;
reg   [11:0] layer1WidthInBytes_cast_loc_read_reg_843;
reg   [0:0] p_read_reg_848;
wire   [0:0] and_ln898_fu_246_p2;
reg   [0:0] and_ln898_reg_853;
wire    ap_CS_fsm_state2;
reg   [10:0] lshr_ln898_cast_reg_857;
wire   [11:0] y_1_fu_260_p2;
reg   [11:0] y_1_reg_862;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln898_1_fu_266_p2;
wire   [10:0] x_1_fu_271_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
wire    ap_block_state10_pp0_stage0_iter6;
reg    ap_block_state11_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln900_fu_277_p2;
reg   [0:0] icmp_ln900_reg_876_pp0_iter1_reg;
reg   [0:0] icmp_ln900_reg_876_pp0_iter2_reg;
reg   [0:0] icmp_ln900_reg_876_pp0_iter3_reg;
reg   [0:0] icmp_ln900_reg_876_pp0_iter4_reg;
reg   [0:0] icmp_ln900_reg_876_pp0_iter5_reg;
wire   [7:0] trunc_ln145_fu_282_p1;
reg   [7:0] trunc_ln145_reg_880;
reg   [7:0] trunc_ln145_reg_880_pp0_iter2_reg;
reg   [7:0] trunc_ln145_reg_880_pp0_iter3_reg;
reg   [7:0] trunc_ln145_reg_880_pp0_iter4_reg;
reg   [7:0] trunc_ln145_5_reg_887;
reg   [7:0] trunc_ln145_7_reg_892;
wire  signed [7:0] xor_ln923_fu_316_p2;
reg  signed [7:0] xor_ln923_reg_897;
wire  signed [7:0] xor_ln923_1_fu_336_p2;
reg  signed [7:0] xor_ln923_1_reg_907;
reg   [7:0] tmp_reg_917;
reg   [7:0] tmp_reg_917_pp0_iter2_reg;
reg   [7:0] tmp_reg_917_pp0_iter3_reg;
reg   [7:0] tmp_reg_917_pp0_iter4_reg;
wire  signed [17:0] grp_fu_779_p2;
wire  signed [17:0] grp_fu_785_p2;
wire   [10:0] add_ln928_fu_410_p2;
reg   [10:0] add_ln928_reg_964;
wire   [8:0] trunc_ln930_fu_435_p1;
reg   [8:0] trunc_ln930_reg_969;
wire   [11:0] add_ln930_fu_452_p2;
reg   [11:0] add_ln930_reg_974;
wire   [0:0] icmp_ln932_fu_468_p2;
reg   [0:0] icmp_ln932_reg_979;
wire   [0:0] icmp_ln933_fu_484_p2;
reg   [0:0] icmp_ln933_reg_984;
wire   [0:0] icmp_ln934_fu_500_p2;
reg   [0:0] icmp_ln934_reg_989;
wire   [10:0] add_ln928_1_fu_528_p2;
reg   [10:0] add_ln928_1_reg_994;
wire   [8:0] trunc_ln930_2_fu_553_p1;
reg   [8:0] trunc_ln930_2_reg_999;
wire   [11:0] add_ln930_1_fu_570_p2;
reg   [11:0] add_ln930_1_reg_1004;
wire   [0:0] icmp_ln932_2_fu_586_p2;
reg   [0:0] icmp_ln932_2_reg_1009;
wire   [0:0] icmp_ln933_2_fu_602_p2;
reg   [0:0] icmp_ln933_2_reg_1014;
wire   [0:0] icmp_ln934_2_fu_618_p2;
reg   [0:0] icmp_ln934_2_reg_1019;
wire   [7:0] select_ln301_fu_640_p3;
reg   [7:0] select_ln301_reg_1024;
wire   [7:0] select_ln301_1_fu_664_p3;
reg   [7:0] select_ln301_1_reg_1029;
wire   [7:0] select_ln301_2_fu_688_p3;
reg   [7:0] select_ln301_2_reg_1034;
wire   [7:0] select_ln301_3_fu_712_p3;
reg   [7:0] select_ln301_3_reg_1039;
wire   [7:0] select_ln301_4_fu_736_p3;
reg   [7:0] select_ln301_4_reg_1044;
wire   [7:0] select_ln301_5_fu_760_p3;
reg   [7:0] select_ln301_5_reg_1049;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [11:0] y_reg_219;
wire    ap_CS_fsm_state12;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln898_fu_241_p2;
wire   [7:0] trunc_ln145_6_fu_296_p4;
wire   [7:0] trunc_ln4_fu_326_p4;
wire  signed [7:0] xor_ln924_fu_359_p2;
wire  signed [7:0] xor_ln924_1_fu_375_p2;
wire  signed [19:0] grp_fu_791_p2;
wire   [9:0] trunc_ln_fu_397_p4;
wire  signed [10:0] sext_ln928_fu_406_p1;
wire   [10:0] zext_ln928_2_fu_394_p1;
wire  signed [17:0] grp_fu_798_p3;
wire   [7:0] trunc_ln1_fu_416_p4;
wire   [9:0] zext_ln928_1_fu_391_p1;
wire  signed [9:0] sext_ln929_1_fu_425_p1;
wire   [9:0] sub_ln930_fu_429_p2;
wire  signed [20:0] grp_fu_807_p2;
wire   [10:0] trunc_ln930_1_fu_439_p4;
wire  signed [11:0] sext_ln930_fu_448_p1;
wire   [11:0] zext_ln928_fu_388_p1;
wire   [2:0] tmp_1_fu_458_p4;
wire   [1:0] tmp_2_fu_474_p4;
wire   [3:0] tmp_3_fu_490_p4;
wire  signed [19:0] grp_fu_814_p2;
wire   [9:0] trunc_ln928_4_fu_515_p4;
wire   [10:0] zext_ln928_5_fu_512_p1;
wire  signed [10:0] sext_ln928_1_fu_524_p1;
wire  signed [17:0] grp_fu_821_p3;
wire   [7:0] trunc_ln929_1_fu_534_p4;
wire   [9:0] zext_ln928_4_fu_509_p1;
wire  signed [9:0] sext_ln929_3_fu_543_p1;
wire   [9:0] sub_ln930_1_fu_547_p2;
wire  signed [20:0] grp_fu_830_p2;
wire   [10:0] trunc_ln930_3_fu_557_p4;
wire   [11:0] zext_ln928_3_fu_506_p1;
wire  signed [11:0] sext_ln930_1_fu_566_p1;
wire   [2:0] tmp_4_fu_576_p4;
wire   [1:0] tmp_5_fu_592_p4;
wire   [3:0] tmp_6_fu_608_p4;
wire   [10:0] select_ln932_fu_624_p3;
wire   [0:0] icmp_ln932_1_fu_630_p2;
wire   [7:0] trunc_ln301_fu_636_p1;
wire   [8:0] select_ln933_fu_648_p3;
wire   [0:0] icmp_ln933_1_fu_654_p2;
wire   [7:0] trunc_ln301_1_fu_660_p1;
wire   [11:0] select_ln934_fu_672_p3;
wire   [0:0] icmp_ln934_1_fu_678_p2;
wire   [7:0] trunc_ln301_2_fu_684_p1;
wire   [10:0] select_ln932_1_fu_696_p3;
wire   [0:0] icmp_ln932_3_fu_702_p2;
wire   [7:0] trunc_ln301_3_fu_708_p1;
wire   [8:0] select_ln933_1_fu_720_p3;
wire   [0:0] icmp_ln933_3_fu_726_p2;
wire   [7:0] trunc_ln301_4_fu_732_p1;
wire   [11:0] select_ln934_1_fu_744_p3;
wire   [0:0] icmp_ln934_3_fu_750_p2;
wire   [7:0] trunc_ln301_5_fu_756_p1;
wire   [10:0] grp_fu_779_p1;
wire   [10:0] grp_fu_785_p1;
wire   [11:0] grp_fu_791_p1;
wire   [9:0] grp_fu_798_p1;
wire   [12:0] grp_fu_807_p1;
wire   [11:0] grp_fu_814_p1;
wire   [9:0] grp_fu_821_p1;
wire   [12:0] grp_fu_830_p1;
reg    grp_fu_779_ce;
reg    grp_fu_785_ce;
reg    grp_fu_791_ce;
reg    grp_fu_798_ce;
reg    grp_fu_807_ce;
reg    grp_fu_814_ce;
reg    grp_fu_821_ce;
reg    grp_fu_830_ce;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

bd_v_mix_0_0_mul_mul_8s_11ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 18 ))
mul_mul_8s_11ns_18_4_1_U159(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(xor_ln923_fu_316_p2),
    .din1(grp_fu_779_p1),
    .ce(grp_fu_779_ce),
    .dout(grp_fu_779_p2)
);

bd_v_mix_0_0_mul_mul_8s_11ns_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 18 ))
mul_mul_8s_11ns_18_4_1_U160(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(xor_ln923_1_fu_336_p2),
    .din1(grp_fu_785_p1),
    .ce(grp_fu_785_ce),
    .dout(grp_fu_785_p2)
);

bd_v_mix_0_0_mul_mul_8s_12ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
mul_mul_8s_12ns_20_4_1_U161(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(xor_ln923_reg_897),
    .din1(grp_fu_791_p1),
    .ce(grp_fu_791_ce),
    .dout(grp_fu_791_p2)
);

bd_v_mix_0_0_mac_muladd_8s_10ns_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_10ns_18s_18_4_1_U162(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(xor_ln924_fu_359_p2),
    .din1(grp_fu_798_p1),
    .din2(grp_fu_779_p2),
    .ce(grp_fu_798_ce),
    .dout(grp_fu_798_p3)
);

bd_v_mix_0_0_mul_mul_8s_13ns_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 21 ))
mul_mul_8s_13ns_21_4_1_U163(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(xor_ln924_fu_359_p2),
    .din1(grp_fu_807_p1),
    .ce(grp_fu_807_ce),
    .dout(grp_fu_807_p2)
);

bd_v_mix_0_0_mul_mul_8s_12ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
mul_mul_8s_12ns_20_4_1_U164(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(xor_ln923_1_reg_907),
    .din1(grp_fu_814_p1),
    .ce(grp_fu_814_ce),
    .dout(grp_fu_814_p2)
);

bd_v_mix_0_0_mac_muladd_8s_10ns_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_10ns_18s_18_4_1_U165(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(xor_ln924_1_fu_375_p2),
    .din1(grp_fu_821_p1),
    .din2(grp_fu_785_p2),
    .ce(grp_fu_821_ce),
    .dout(grp_fu_821_p3)
);

bd_v_mix_0_0_mul_mul_8s_13ns_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 21 ))
mul_mul_8s_13ns_21_4_1_U166(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(xor_ln924_1_fu_375_p2),
    .din1(grp_fu_830_p1),
    .ce(grp_fu_830_ce),
    .dout(grp_fu_830_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln898_reg_853) | (icmp_ln898_1_fu_266_p2 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln898_1_fu_266_p2 == 1'd0) & (1'd1 == and_ln898_reg_853))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln898_1_fu_266_p2 == 1'd0) & (1'd1 == and_ln898_reg_853))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln900_fu_277_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_reg_230 <= x_1_fu_271_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln898_1_fu_266_p2 == 1'd0) & (1'd1 == and_ln898_reg_853))) begin
        x_reg_230 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == and_ln898_fu_246_p2))) begin
        y_reg_219 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        y_reg_219 <= y_1_reg_862;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        HwReg_layerHeight16_load_cast_loc_read_reg_837 <= HwReg_layerHeight16_load_cast_loc_dout;
        layer1WidthInBytes_cast_loc_read_reg_843 <= layer1WidthInBytes_cast_loc_dout;
        p_read_reg_848 <= p_read1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln900_reg_876_pp0_iter4_reg == 1'd0))) begin
        add_ln928_1_reg_994 <= add_ln928_1_fu_528_p2;
        add_ln928_reg_964 <= add_ln928_fu_410_p2;
        add_ln930_1_reg_1004 <= add_ln930_1_fu_570_p2;
        add_ln930_reg_974 <= add_ln930_fu_452_p2;
        icmp_ln932_2_reg_1009 <= icmp_ln932_2_fu_586_p2;
        icmp_ln932_reg_979 <= icmp_ln932_fu_468_p2;
        icmp_ln933_2_reg_1014 <= icmp_ln933_2_fu_602_p2;
        icmp_ln933_reg_984 <= icmp_ln933_fu_484_p2;
        icmp_ln934_2_reg_1019 <= icmp_ln934_2_fu_618_p2;
        icmp_ln934_reg_989 <= icmp_ln934_fu_500_p2;
        trunc_ln930_2_reg_999 <= trunc_ln930_2_fu_553_p1;
        trunc_ln930_reg_969 <= trunc_ln930_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        and_ln898_reg_853 <= and_ln898_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln900_reg_876 <= icmp_ln900_fu_277_p2;
        icmp_ln900_reg_876_pp0_iter1_reg <= icmp_ln900_reg_876;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln900_reg_876_pp0_iter2_reg <= icmp_ln900_reg_876_pp0_iter1_reg;
        icmp_ln900_reg_876_pp0_iter3_reg <= icmp_ln900_reg_876_pp0_iter2_reg;
        icmp_ln900_reg_876_pp0_iter4_reg <= icmp_ln900_reg_876_pp0_iter3_reg;
        icmp_ln900_reg_876_pp0_iter5_reg <= icmp_ln900_reg_876_pp0_iter4_reg;
        icmp_ln900_reg_876_pp0_iter6_reg <= icmp_ln900_reg_876_pp0_iter5_reg;
        tmp_reg_917_pp0_iter2_reg <= tmp_reg_917;
        tmp_reg_917_pp0_iter3_reg <= tmp_reg_917_pp0_iter2_reg;
        tmp_reg_917_pp0_iter4_reg <= tmp_reg_917_pp0_iter3_reg;
        trunc_ln145_reg_880_pp0_iter2_reg <= trunc_ln145_reg_880;
        trunc_ln145_reg_880_pp0_iter3_reg <= trunc_ln145_reg_880_pp0_iter2_reg;
        trunc_ln145_reg_880_pp0_iter4_reg <= trunc_ln145_reg_880_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == and_ln898_fu_246_p2))) begin
        lshr_ln898_cast_reg_857 <= {{layer1WidthInBytes_cast_loc_read_reg_843[11:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln900_reg_876_pp0_iter5_reg == 1'd0))) begin
        select_ln301_1_reg_1029 <= select_ln301_1_fu_664_p3;
        select_ln301_2_reg_1034 <= select_ln301_2_fu_688_p3;
        select_ln301_3_reg_1039 <= select_ln301_3_fu_712_p3;
        select_ln301_4_reg_1044 <= select_ln301_4_fu_736_p3;
        select_ln301_5_reg_1049 <= select_ln301_5_fu_760_p3;
        select_ln301_reg_1024 <= select_ln301_fu_640_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln900_reg_876 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_917 <= {{srcLayer1Yuv_dout[31:24]}};
        trunc_ln145_5_reg_887 <= {{srcLayer1Yuv_dout[15:8]}};
        trunc_ln145_7_reg_892 <= {{srcLayer1Yuv_dout[39:32]}};
        trunc_ln145_reg_880 <= trunc_ln145_fu_282_p1;
        xor_ln923_1_reg_907 <= xor_ln923_1_fu_336_p2;
        xor_ln923_reg_897 <= xor_ln923_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln898_reg_853))) begin
        y_1_reg_862 <= y_1_fu_260_p2;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight16_load_cast_loc_blk_n = HwReg_layerHeight16_load_cast_loc_empty_n;
    end else begin
        HwReg_layerHeight16_load_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight16_load_cast_loc_out_blk_n = HwReg_layerHeight16_load_cast_loc_out_full_n;
    end else begin
        HwReg_layerHeight16_load_cast_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_read1_out_full_n == 1'b0) | (layer1WidthInBytes_cast_loc_out_full_n == 1'b0) | (p_read1_empty_n == 1'b0) | (layer1WidthInBytes_cast_loc_empty_n == 1'b0) | (1'b0 == HwReg_layerHeight16_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight16_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight16_load_cast_loc_out_write = 1'b1;
    end else begin
        HwReg_layerHeight16_load_cast_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_read1_out_full_n == 1'b0) | (layer1WidthInBytes_cast_loc_out_full_n == 1'b0) | (p_read1_empty_n == 1'b0) | (layer1WidthInBytes_cast_loc_empty_n == 1'b0) | (1'b0 == HwReg_layerHeight16_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight16_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight16_load_cast_loc_read = 1'b1;
    end else begin
        HwReg_layerHeight16_load_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln900_fu_277_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln898_reg_853) | (icmp_ln898_1_fu_266_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_779_ce = 1'b1;
    end else begin
        grp_fu_779_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_785_ce = 1'b1;
    end else begin
        grp_fu_785_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_791_ce = 1'b1;
    end else begin
        grp_fu_791_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_798_ce = 1'b1;
    end else begin
        grp_fu_798_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_807_ce = 1'b1;
    end else begin
        grp_fu_807_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_814_ce = 1'b1;
    end else begin
        grp_fu_814_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_821_ce = 1'b1;
    end else begin
        grp_fu_821_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_830_ce = 1'b1;
    end else begin
        grp_fu_830_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln898_reg_853) | (icmp_ln898_1_fu_266_p2 == 1'd1)))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer1WidthInBytes_cast_loc_blk_n = layer1WidthInBytes_cast_loc_empty_n;
    end else begin
        layer1WidthInBytes_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer1WidthInBytes_cast_loc_out_blk_n = layer1WidthInBytes_cast_loc_out_full_n;
    end else begin
        layer1WidthInBytes_cast_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_read1_out_full_n == 1'b0) | (layer1WidthInBytes_cast_loc_out_full_n == 1'b0) | (p_read1_empty_n == 1'b0) | (layer1WidthInBytes_cast_loc_empty_n == 1'b0) | (1'b0 == HwReg_layerHeight16_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight16_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer1WidthInBytes_cast_loc_out_write = 1'b1;
    end else begin
        layer1WidthInBytes_cast_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_read1_out_full_n == 1'b0) | (layer1WidthInBytes_cast_loc_out_full_n == 1'b0) | (p_read1_empty_n == 1'b0) | (layer1WidthInBytes_cast_loc_empty_n == 1'b0) | (1'b0 == HwReg_layerHeight16_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight16_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer1WidthInBytes_cast_loc_read = 1'b1;
    end else begin
        layer1WidthInBytes_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_blk_n = p_read1_empty_n;
    end else begin
        p_read1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_out_blk_n = p_read1_out_full_n;
    end else begin
        p_read1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_read1_out_full_n == 1'b0) | (layer1WidthInBytes_cast_loc_out_full_n == 1'b0) | (p_read1_empty_n == 1'b0) | (layer1WidthInBytes_cast_loc_empty_n == 1'b0) | (1'b0 == HwReg_layerHeight16_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight16_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_out_write = 1'b1;
    end else begin
        p_read1_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_read1_out_full_n == 1'b0) | (layer1WidthInBytes_cast_loc_out_full_n == 1'b0) | (p_read1_empty_n == 1'b0) | (layer1WidthInBytes_cast_loc_empty_n == 1'b0) | (1'b0 == HwReg_layerHeight16_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight16_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_read = 1'b1;
    end else begin
        p_read1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln900_reg_876_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        srcLayer1Rgb_blk_n = srcLayer1Rgb_full_n;
    end else begin
        srcLayer1Rgb_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln900_reg_876_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcLayer1Rgb_write = 1'b1;
    end else begin
        srcLayer1Rgb_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln900_reg_876 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcLayer1Yuv_blk_n = srcLayer1Yuv_empty_n;
    end else begin
        srcLayer1Yuv_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln900_reg_876 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcLayer1Yuv_read = 1'b1;
    end else begin
        srcLayer1Yuv_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_read1_out_full_n == 1'b0) | (layer1WidthInBytes_cast_loc_out_full_n == 1'b0) | (p_read1_empty_n == 1'b0) | (layer1WidthInBytes_cast_loc_empty_n == 1'b0) | (1'b0 == HwReg_layerHeight16_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight16_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((1'd0 == and_ln898_reg_853) | (icmp_ln898_1_fu_266_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln900_fu_277_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln900_fu_277_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_layerHeight16_load_cast_loc_out_din = HwReg_layerHeight16_load_cast_loc_dout;

assign add_ln928_1_fu_528_p2 = ($signed(zext_ln928_5_fu_512_p1) + $signed(sext_ln928_1_fu_524_p1));

assign add_ln928_fu_410_p2 = ($signed(sext_ln928_fu_406_p1) + $signed(zext_ln928_2_fu_394_p1));

assign add_ln930_1_fu_570_p2 = ($signed(zext_ln928_3_fu_506_p1) + $signed(sext_ln930_1_fu_566_p1));

assign add_ln930_fu_452_p2 = ($signed(sext_ln930_fu_448_p1) + $signed(zext_ln928_fu_388_p1));

assign and_ln898_fu_246_p2 = (p_read_reg_848 & icmp_ln898_fu_241_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln900_reg_876_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (srcLayer1Rgb_full_n == 1'b0)) | ((icmp_ln900_reg_876 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (srcLayer1Yuv_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln900_reg_876_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (srcLayer1Rgb_full_n == 1'b0)) | ((icmp_ln900_reg_876 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (srcLayer1Yuv_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln900_reg_876_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (srcLayer1Rgb_full_n == 1'b0)) | ((icmp_ln900_reg_876 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (srcLayer1Yuv_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((p_read1_out_full_n == 1'b0) | (layer1WidthInBytes_cast_loc_out_full_n == 1'b0) | (p_read1_empty_n == 1'b0) | (layer1WidthInBytes_cast_loc_empty_n == 1'b0) | (1'b0 == HwReg_layerHeight16_load_cast_loc_out_full_n) | (1'b0 == HwReg_layerHeight16_load_cast_loc_empty_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter7 = ((icmp_ln900_reg_876_pp0_iter6_reg == 1'd0) & (srcLayer1Rgb_full_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((icmp_ln900_reg_876 == 1'd0) & (srcLayer1Yuv_empty_n == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_779_p1 = 18'd595;

assign grp_fu_785_p1 = 18'd595;

assign grp_fu_791_p1 = 20'd1733;

assign grp_fu_798_p1 = 18'd404;

assign grp_fu_807_p1 = 21'd2081;

assign grp_fu_814_p1 = 20'd1733;

assign grp_fu_821_p1 = 18'd404;

assign grp_fu_830_p1 = 21'd2081;

assign icmp_ln898_1_fu_266_p2 = ((y_reg_219 == HwReg_layerHeight16_load_cast_loc_read_reg_837) ? 1'b1 : 1'b0);

assign icmp_ln898_fu_241_p2 = ((HwReg_layerHeight16_load_cast_loc_read_reg_837 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_fu_277_p2 = ((x_reg_230 == lshr_ln898_cast_reg_857) ? 1'b1 : 1'b0);

assign icmp_ln932_1_fu_630_p2 = (($signed(select_ln932_fu_624_p3) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln932_2_fu_586_p2 = (($signed(tmp_4_fu_576_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln932_3_fu_702_p2 = (($signed(select_ln932_1_fu_696_p3) > $signed(11'd0)) ? 1'b1 : 1'b0);

assign icmp_ln932_fu_468_p2 = (($signed(tmp_1_fu_458_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln933_1_fu_654_p2 = (($signed(select_ln933_fu_648_p3) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln933_2_fu_602_p2 = ((tmp_5_fu_592_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln933_3_fu_726_p2 = (($signed(select_ln933_1_fu_720_p3) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln933_fu_484_p2 = ((tmp_2_fu_474_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln934_1_fu_678_p2 = (($signed(select_ln934_fu_672_p3) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln934_2_fu_618_p2 = (($signed(tmp_6_fu_608_p4) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign icmp_ln934_3_fu_750_p2 = (($signed(select_ln934_1_fu_744_p3) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln934_fu_500_p2 = (($signed(tmp_3_fu_490_p4) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign layer1WidthInBytes_cast_loc_out_din = layer1WidthInBytes_cast_loc_dout;

assign p_read1_out_din = p_read1_dout;

assign select_ln301_1_fu_664_p3 = ((icmp_ln933_1_fu_654_p2[0:0] == 1'b1) ? trunc_ln301_1_fu_660_p1 : 8'd0);

assign select_ln301_2_fu_688_p3 = ((icmp_ln934_1_fu_678_p2[0:0] == 1'b1) ? trunc_ln301_2_fu_684_p1 : 8'd0);

assign select_ln301_3_fu_712_p3 = ((icmp_ln932_3_fu_702_p2[0:0] == 1'b1) ? trunc_ln301_3_fu_708_p1 : 8'd0);

assign select_ln301_4_fu_736_p3 = ((icmp_ln933_3_fu_726_p2[0:0] == 1'b1) ? trunc_ln301_4_fu_732_p1 : 8'd0);

assign select_ln301_5_fu_760_p3 = ((icmp_ln934_3_fu_750_p2[0:0] == 1'b1) ? trunc_ln301_5_fu_756_p1 : 8'd0);

assign select_ln301_fu_640_p3 = ((icmp_ln932_1_fu_630_p2[0:0] == 1'b1) ? trunc_ln301_fu_636_p1 : 8'd0);

assign select_ln932_1_fu_696_p3 = ((icmp_ln932_2_reg_1009[0:0] == 1'b1) ? 11'd255 : add_ln928_1_reg_994);

assign select_ln932_fu_624_p3 = ((icmp_ln932_reg_979[0:0] == 1'b1) ? 11'd255 : add_ln928_reg_964);

assign select_ln933_1_fu_720_p3 = ((icmp_ln933_2_reg_1014[0:0] == 1'b1) ? 9'd255 : trunc_ln930_2_reg_999);

assign select_ln933_fu_648_p3 = ((icmp_ln933_reg_984[0:0] == 1'b1) ? 9'd255 : trunc_ln930_reg_969);

assign select_ln934_1_fu_744_p3 = ((icmp_ln934_2_reg_1019[0:0] == 1'b1) ? 12'd255 : add_ln930_1_reg_1004);

assign select_ln934_fu_672_p3 = ((icmp_ln934_reg_989[0:0] == 1'b1) ? 12'd255 : add_ln930_reg_974);

assign sext_ln928_1_fu_524_p1 = $signed(trunc_ln928_4_fu_515_p4);

assign sext_ln928_fu_406_p1 = $signed(trunc_ln_fu_397_p4);

assign sext_ln929_1_fu_425_p1 = $signed(trunc_ln1_fu_416_p4);

assign sext_ln929_3_fu_543_p1 = $signed(trunc_ln929_1_fu_534_p4);

assign sext_ln930_1_fu_566_p1 = $signed(trunc_ln930_3_fu_557_p4);

assign sext_ln930_fu_448_p1 = $signed(trunc_ln930_1_fu_439_p4);

assign srcLayer1Rgb_din = {{{{{{select_ln301_5_reg_1049}, {select_ln301_4_reg_1044}}, {select_ln301_3_reg_1039}}, {select_ln301_2_reg_1034}}, {select_ln301_1_reg_1029}}, {select_ln301_reg_1024}};

assign start_out = real_start;

assign sub_ln930_1_fu_547_p2 = ($signed(zext_ln928_4_fu_509_p1) - $signed(sext_ln929_3_fu_543_p1));

assign sub_ln930_fu_429_p2 = ($signed(zext_ln928_1_fu_391_p1) - $signed(sext_ln929_1_fu_425_p1));

assign tmp_1_fu_458_p4 = {{add_ln928_fu_410_p2[10:8]}};

assign tmp_2_fu_474_p4 = {{sub_ln930_fu_429_p2[9:8]}};

assign tmp_3_fu_490_p4 = {{add_ln930_fu_452_p2[11:8]}};

assign tmp_4_fu_576_p4 = {{add_ln928_1_fu_528_p2[10:8]}};

assign tmp_5_fu_592_p4 = {{sub_ln930_1_fu_547_p2[9:8]}};

assign tmp_6_fu_608_p4 = {{add_ln930_1_fu_570_p2[11:8]}};

assign trunc_ln145_6_fu_296_p4 = {{srcLayer1Yuv_dout[23:16]}};

assign trunc_ln145_fu_282_p1 = srcLayer1Yuv_dout[7:0];

assign trunc_ln1_fu_416_p4 = {{grp_fu_798_p3[17:10]}};

assign trunc_ln301_1_fu_660_p1 = select_ln933_fu_648_p3[7:0];

assign trunc_ln301_2_fu_684_p1 = select_ln934_fu_672_p3[7:0];

assign trunc_ln301_3_fu_708_p1 = select_ln932_1_fu_696_p3[7:0];

assign trunc_ln301_4_fu_732_p1 = select_ln933_1_fu_720_p3[7:0];

assign trunc_ln301_5_fu_756_p1 = select_ln934_1_fu_744_p3[7:0];

assign trunc_ln301_fu_636_p1 = select_ln932_fu_624_p3[7:0];

assign trunc_ln4_fu_326_p4 = {{srcLayer1Yuv_dout[47:40]}};

assign trunc_ln928_4_fu_515_p4 = {{grp_fu_814_p2[19:10]}};

assign trunc_ln929_1_fu_534_p4 = {{grp_fu_821_p3[17:10]}};

assign trunc_ln930_1_fu_439_p4 = {{grp_fu_807_p2[20:10]}};

assign trunc_ln930_2_fu_553_p1 = sub_ln930_1_fu_547_p2[8:0];

assign trunc_ln930_3_fu_557_p4 = {{grp_fu_830_p2[20:10]}};

assign trunc_ln930_fu_435_p1 = sub_ln930_fu_429_p2[8:0];

assign trunc_ln_fu_397_p4 = {{grp_fu_791_p2[19:10]}};

assign x_1_fu_271_p2 = (x_reg_230 + 11'd1);

assign xor_ln923_1_fu_336_p2 = (trunc_ln4_fu_326_p4 ^ 8'd128);

assign xor_ln923_fu_316_p2 = (trunc_ln145_6_fu_296_p4 ^ 8'd128);

assign xor_ln924_1_fu_375_p2 = (trunc_ln145_7_reg_892 ^ 8'd128);

assign xor_ln924_fu_359_p2 = (trunc_ln145_5_reg_887 ^ 8'd128);

assign y_1_fu_260_p2 = (y_reg_219 + 12'd1);

assign zext_ln928_1_fu_391_p1 = trunc_ln145_reg_880_pp0_iter4_reg;

assign zext_ln928_2_fu_394_p1 = trunc_ln145_reg_880_pp0_iter4_reg;

assign zext_ln928_3_fu_506_p1 = tmp_reg_917_pp0_iter4_reg;

assign zext_ln928_4_fu_509_p1 = tmp_reg_917_pp0_iter4_reg;

assign zext_ln928_5_fu_512_p1 = tmp_reg_917_pp0_iter4_reg;

assign zext_ln928_fu_388_p1 = trunc_ln145_reg_880_pp0_iter4_reg;

endmodule //bd_v_mix_0_0_v_mix_yuv2rgb_true_17
