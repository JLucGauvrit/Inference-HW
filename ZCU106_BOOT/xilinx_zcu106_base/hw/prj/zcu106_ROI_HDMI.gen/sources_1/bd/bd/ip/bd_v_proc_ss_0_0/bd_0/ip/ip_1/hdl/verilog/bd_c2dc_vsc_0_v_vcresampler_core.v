// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_c2dc_vsc_0_v_vcresampler_core (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        srcImg_dout,
        srcImg_empty_n,
        srcImg_read,
        outImg_din,
        outImg_full_n,
        outImg_write,
        height_dout,
        height_empty_n,
        height_read,
        width_dout,
        width_empty_n,
        width_read,
        inColorMode_dout,
        inColorMode_empty_n,
        inColorMode_read,
        outColorMode_dout,
        outColorMode_empty_n,
        outColorMode_read,
        height_out_din,
        height_out_full_n,
        height_out_write,
        width_out_din,
        width_out_full_n,
        width_out_write,
        outColorMode_out_din,
        outColorMode_out_full_n,
        outColorMode_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] srcImg_dout;
input   srcImg_empty_n;
output   srcImg_read;
output  [47:0] outImg_din;
input   outImg_full_n;
output   outImg_write;
input  [11:0] height_dout;
input   height_empty_n;
output   height_read;
input  [11:0] width_dout;
input   width_empty_n;
output   width_read;
input  [7:0] inColorMode_dout;
input   inColorMode_empty_n;
output   inColorMode_read;
input  [7:0] outColorMode_dout;
input   outColorMode_empty_n;
output   outColorMode_read;
output  [11:0] height_out_din;
input   height_out_full_n;
output   height_out_write;
output  [11:0] width_out_din;
input   width_out_full_n;
output   width_out_write;
output  [7:0] outColorMode_out_din;
input   outColorMode_out_full_n;
output   outColorMode_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg srcImg_read;
reg[47:0] outImg_din;
reg outImg_write;
reg height_read;
reg width_read;
reg inColorMode_read;
reg outColorMode_read;
reg height_out_write;
reg width_out_write;
reg outColorMode_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    srcImg_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1063_reg_1407;
reg   [0:0] cmp27_i_reg_1348;
reg    outImg_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_reg_1370;
reg   [0:0] icmp_ln1044_reg_1194;
reg    ap_enable_reg_pp0_iter4;
reg    height_blk_n;
reg    width_blk_n;
reg    inColorMode_blk_n;
reg    outColorMode_blk_n;
reg    height_out_blk_n;
reg    width_out_blk_n;
reg    outColorMode_out_blk_n;
reg   [10:0] x_reg_355;
reg   [11:0] height_read_reg_1183;
reg   [10:0] loopWidth_reg_1188;
wire   [0:0] icmp_ln1044_fu_394_p2;
wire   [0:0] icmp_ln1048_fu_400_p2;
reg   [0:0] icmp_ln1048_reg_1200;
wire   [0:0] cmp205_i_fu_406_p2;
reg   [0:0] cmp205_i_reg_1206;
wire   [13:0] zext_ln1019_fu_431_p1;
reg   [13:0] zext_ln1019_reg_1213;
wire    ap_CS_fsm_state2;
wire   [12:0] zext_ln1058_fu_439_p1;
reg   [12:0] zext_ln1058_reg_1218;
wire   [12:0] loopHeight_fu_442_p2;
reg   [12:0] loopHeight_reg_1223;
wire   [0:0] icmp_ln1060_fu_448_p2;
reg   [0:0] icmp_ln1060_reg_1228;
wire   [0:0] cmp21582_i_fu_454_p2;
reg   [0:0] cmp21582_i_reg_1324;
wire   [0:0] sel_tmp3_fu_459_p2;
reg   [0:0] sel_tmp3_reg_1328;
wire   [12:0] add_ln1060_fu_464_p2;
reg   [12:0] add_ln1060_reg_1333;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln1060_1_fu_474_p2;
wire   [0:0] empty_68_fu_488_p1;
reg   [0:0] empty_68_reg_1342;
wire   [0:0] cmp27_i_fu_492_p2;
wire   [0:0] cmp76_i_fu_497_p2;
reg   [0:0] cmp76_i_reg_1352;
wire   [0:0] spec_select601_i_fu_503_p2;
reg   [0:0] spec_select601_i_reg_1360;
wire   [0:0] sel_tmp1_fu_522_p2;
reg   [0:0] sel_tmp1_reg_1374;
wire   [0:0] sel_tmp4_fu_527_p2;
reg   [0:0] sel_tmp4_reg_1382;
wire   [0:0] sel_tmp6_fu_532_p2;
reg   [0:0] sel_tmp6_reg_1388;
wire   [10:0] add_ln1063_fu_537_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_predicate_op104_read_state5;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_predicate_op185_write_state6;
reg    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_predicate_op233_write_state8;
reg    ap_block_state8_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln1063_fu_543_p1;
reg   [63:0] zext_ln1063_reg_1401;
wire   [0:0] icmp_ln1063_fu_550_p2;
reg   [0:0] icmp_ln1063_reg_1407_pp0_iter1_reg;
reg   [0:0] icmp_ln1063_reg_1407_pp0_iter2_reg;
reg   [10:0] linebuf_y_val_V_0_addr_reg_1411;
reg   [10:0] linebuf_y_val_V_0_addr_reg_1411_pp0_iter1_reg;
reg   [10:0] linebuf_c_val_V_0_addr_reg_1417;
reg   [10:0] linebuf_c_val_V_0_addr_reg_1417_pp0_iter1_reg;
reg   [10:0] linebuf_c_val_V_1_addr_reg_1423;
reg   [10:0] linebuf_c_val_V_1_addr_reg_1423_pp0_iter1_reg;
wire   [7:0] outpix_val_V_0_fu_659_p1;
reg   [7:0] outpix_val_V_0_reg_1429;
reg   [7:0] outpix_val_V_0_reg_1429_pp0_iter2_reg;
reg   [7:0] outpix_val_V_3_reg_1436;
reg   [7:0] outpix_val_V_3_reg_1436_pp0_iter2_reg;
reg   [10:0] linebuf_y_val_V_1_addr_reg_1443;
wire   [7:0] pixbuf_c_val_V_2_0_5_fu_673_p1;
reg   [7:0] pixbuf_c_val_V_2_0_5_reg_1448;
wire   [7:0] pixbuf_c_val_V_2_1_7_fu_677_p4;
reg   [7:0] pixbuf_c_val_V_2_1_7_reg_1453;
wire   [7:0] pixbuf_c_val_V_1_0_fu_687_p1;
reg   [7:0] pixbuf_c_val_V_1_0_reg_1458;
wire   [7:0] pixbuf_c_val_V_1_1_fu_691_p4;
reg   [7:0] pixbuf_c_val_V_1_1_reg_1463;
wire   [7:0] outpix_val_V_4_6_fu_701_p3;
reg   [7:0] outpix_val_V_4_6_reg_1468;
reg   [7:0] outpix_val_V_4_6_reg_1468_pp0_iter2_reg;
wire   [7:0] outpix_val_V_1_6_fu_708_p3;
reg   [7:0] outpix_val_V_1_6_reg_1477;
reg   [7:0] outpix_val_V_1_6_reg_1477_pp0_iter2_reg;
wire   [7:0] outpix_val_V_1_5_fu_1029_p3;
reg   [7:0] outpix_val_V_1_5_reg_1491;
wire   [7:0] outpix_val_V_0_2_fu_1048_p3;
reg   [7:0] outpix_val_V_0_2_reg_1496;
wire   [7:0] outpix_val_V_4_5_fu_1144_p3;
reg   [7:0] outpix_val_V_4_5_reg_1501;
wire   [7:0] outpix_val_V_3_2_fu_1163_p3;
reg   [7:0] outpix_val_V_3_2_reg_1506;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter3;
wire   [10:0] linebuf_y_val_V_0_address0;
reg    linebuf_y_val_V_0_ce0;
reg    linebuf_y_val_V_0_we0;
wire   [15:0] linebuf_y_val_V_0_d0;
wire   [10:0] linebuf_y_val_V_0_address1;
reg    linebuf_y_val_V_0_ce1;
wire   [15:0] linebuf_y_val_V_0_q1;
wire   [10:0] linebuf_y_val_V_1_address0;
reg    linebuf_y_val_V_1_ce0;
reg    linebuf_y_val_V_1_we0;
wire   [15:0] linebuf_y_val_V_1_d0;
wire   [15:0] linebuf_y_val_V_1_q0;
wire   [10:0] linebuf_c_val_V_0_address0;
reg    linebuf_c_val_V_0_ce0;
reg    linebuf_c_val_V_0_we0;
wire   [15:0] linebuf_c_val_V_0_d0;
wire   [10:0] linebuf_c_val_V_0_address1;
reg    linebuf_c_val_V_0_ce1;
wire   [15:0] linebuf_c_val_V_0_q1;
wire   [10:0] linebuf_c_val_V_1_address0;
reg    linebuf_c_val_V_1_ce0;
reg    linebuf_c_val_V_1_we0;
wire   [15:0] linebuf_c_val_V_1_d0;
wire   [10:0] linebuf_c_val_V_1_address1;
reg    linebuf_c_val_V_1_ce1;
wire   [15:0] linebuf_c_val_V_1_q1;
wire   [10:0] linebuf_c_val_V_2_address0;
reg    linebuf_c_val_V_2_ce0;
wire   [15:0] linebuf_c_val_V_2_q0;
reg   [12:0] y_reg_344;
wire    ap_CS_fsm_state9;
reg   [7:0] ap_phi_mux_pixbuf_c_val_V_2_1_3_i_phi_fu_369_p4;
reg   [7:0] ap_phi_reg_pp0_iter2_pixbuf_c_val_V_2_1_3_i_reg_366;
wire   [7:0] ap_phi_reg_pp0_iter0_pixbuf_c_val_V_2_1_3_i_reg_366;
reg   [7:0] ap_phi_reg_pp0_iter1_pixbuf_c_val_V_2_1_3_i_reg_366;
reg   [7:0] ap_phi_mux_PixBufVal_val_V_0_1_phi_fu_378_p4;
reg   [7:0] ap_phi_reg_pp0_iter2_PixBufVal_val_V_0_1_reg_375;
wire   [7:0] ap_phi_reg_pp0_iter0_PixBufVal_val_V_0_1_reg_375;
reg   [7:0] ap_phi_reg_pp0_iter1_PixBufVal_val_V_0_1_reg_375;
reg   [7:0] mpix_y_val_V_0_fu_156;
wire   [7:0] pix_val_V_0_fu_555_p1;
reg   [7:0] mpix_c_val_V_0_fu_160;
reg   [7:0] pix_val_V_2_1_fu_164;
reg   [7:0] mpix_y_val_V_1_fu_168;
reg   [7:0] mpix_c_val_V_1_fu_172;
reg   [7:0] pix_val_V_5_1_fu_176;
reg   [7:0] mpix_y_val_V_0_1_fu_180;
reg   [7:0] mpix_y_val_V_1_1_fu_184;
reg   [7:0] pixbuf_c_val_V_2_0_1_fu_188;
reg   [7:0] pixbuf_c_val_V_2_1_fu_192;
reg   [7:0] pixbuf_c_val_V_0_0_fu_196;
wire   [7:0] select_ln1132_5_fu_789_p3;
wire   [7:0] pixbuf_c_val_V_0_0_2_fu_845_p1;
reg   [7:0] pixbuf_c_val_V_0_1_fu_200;
wire   [7:0] select_ln1132_4_fu_783_p3;
reg   [7:0] PixBufVal_val_V_0_fu_204;
wire   [7:0] select_ln1132_1_fu_777_p3;
reg   [7:0] pixbuf_c_val_V_2_1_1_fu_208;
wire   [7:0] select_ln1132_fu_771_p3;
reg    ap_block_state1;
wire   [47:0] or_ln174_8_i_fu_897_p7;
reg    ap_block_pp0_stage0_01001;
wire   [47:0] or_ln174_i_fu_1170_p7;
wire   [0:0] or_ln1044_fu_419_p2;
wire   [1:0] select_ln1044_fu_412_p3;
wire   [1:0] yOffset_fu_423_p3;
wire   [12:0] zext_ln1019_1_fu_435_p1;
wire   [13:0] zext_ln1060_fu_470_p1;
wire   [13:0] out_y_fu_483_p2;
wire   [0:0] empty_fu_479_p1;
wire   [0:0] sel_tmp_fu_516_p2;
wire   [7:0] select_ln1107_1_fu_756_p3;
wire   [7:0] select_ln1107_fu_750_p3;
wire   [7:0] pixbuf_c_val_V_2_1_6_fu_810_p3;
wire   [7:0] pixbuf_c_val_V_2_0_fu_804_p3;
wire   [8:0] shl_ln_fu_943_p3;
wire   [9:0] zext_ln1346_fu_954_p1;
wire   [9:0] zext_ln215_fu_950_p1;
wire   [8:0] zext_ln1346_1_fu_958_p1;
wire   [8:0] add_ln1346_1_fu_968_p2;
wire   [9:0] zext_ln1346_3_fu_974_p1;
wire   [9:0] add_ln1346_fu_962_p2;
wire   [9:0] add_ln1346_2_fu_978_p2;
wire   [8:0] zext_ln1345_fu_940_p1;
wire   [8:0] add_ln1346_3_fu_994_p2;
wire   [8:0] add_ln1346_4_fu_1000_p2;
wire   [7:0] outpix_val_V_1_fu_984_p4;
wire   [7:0] outpix_val_V_1_2_fu_1006_p4;
wire   [7:0] outpix_val_V_1_3_fu_1016_p3;
wire   [7:0] outpix_val_V_1_4_fu_1022_p3;
wire   [7:0] outpix_val_V_0_1_fu_914_p1;
wire   [7:0] newSel_fu_1036_p3;
wire   [7:0] newSel37_fu_1042_p3;
wire   [8:0] shl_ln1345_1_fu_1058_p3;
wire   [9:0] zext_ln1346_2_fu_1069_p1;
wire   [9:0] zext_ln215_36_fu_1065_p1;
wire   [8:0] zext_ln1346_4_fu_1073_p1;
wire   [8:0] add_ln1346_6_fu_1083_p2;
wire   [9:0] zext_ln1346_5_fu_1089_p1;
wire   [9:0] add_ln1346_5_fu_1077_p2;
wire   [9:0] add_ln1346_7_fu_1093_p2;
wire   [8:0] zext_ln1345_1_fu_1055_p1;
wire   [8:0] add_ln1346_8_fu_1109_p2;
wire   [8:0] add_ln1346_9_fu_1115_p2;
wire   [7:0] outpix_val_V_4_fu_1099_p4;
wire   [7:0] outpix_val_V_4_2_fu_1121_p4;
wire   [7:0] outpix_val_V_4_3_fu_1131_p3;
wire   [7:0] outpix_val_V_4_4_fu_1137_p3;
wire   [7:0] outpix_val_V_3_1_fu_918_p4;
wire   [7:0] newSel41_fu_1151_p3;
wire   [7:0] newSel43_fu_1157_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_95;
reg    ap_enable_state4_pp0_iter0_stage0;
reg    ap_enable_operation_122;
reg    ap_enable_state5_pp0_iter1_stage0;
reg    ap_enable_operation_147;
reg    ap_enable_state6_pp0_iter2_stage0;
reg    ap_enable_operation_97;
reg    ap_enable_operation_126;
reg    ap_predicate_op157_store_state6;
reg    ap_enable_operation_157;
reg    ap_enable_operation_99;
reg    ap_enable_operation_129;
reg    ap_enable_operation_164;
reg    ap_enable_operation_151;
reg    ap_enable_operation_146;
reg    ap_enable_operation_187;
reg    ap_enable_state7_pp0_iter3_stage0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_367;
reg    ap_condition_364;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

bd_c2dc_vsc_0_v_vcresampler_core_linebuf_y_val_V_0 #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_y_val_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_y_val_V_0_address0),
    .ce0(linebuf_y_val_V_0_ce0),
    .we0(linebuf_y_val_V_0_we0),
    .d0(linebuf_y_val_V_0_d0),
    .address1(linebuf_y_val_V_0_address1),
    .ce1(linebuf_y_val_V_0_ce1),
    .q1(linebuf_y_val_V_0_q1)
);

bd_c2dc_vsc_0_v_vcresampler_core_linebuf_y_val_V_1 #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_y_val_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_y_val_V_1_address0),
    .ce0(linebuf_y_val_V_1_ce0),
    .we0(linebuf_y_val_V_1_we0),
    .d0(linebuf_y_val_V_1_d0),
    .q0(linebuf_y_val_V_1_q0)
);

bd_c2dc_vsc_0_v_vcresampler_core_linebuf_y_val_V_0 #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_c_val_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_c_val_V_0_address0),
    .ce0(linebuf_c_val_V_0_ce0),
    .we0(linebuf_c_val_V_0_we0),
    .d0(linebuf_c_val_V_0_d0),
    .address1(linebuf_c_val_V_0_address1),
    .ce1(linebuf_c_val_V_0_ce1),
    .q1(linebuf_c_val_V_0_q1)
);

bd_c2dc_vsc_0_v_vcresampler_core_linebuf_y_val_V_0 #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_c_val_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_c_val_V_1_address0),
    .ce0(linebuf_c_val_V_1_ce0),
    .we0(linebuf_c_val_V_1_we0),
    .d0(linebuf_c_val_V_1_d0),
    .address1(linebuf_c_val_V_1_address1),
    .ce1(linebuf_c_val_V_1_ce1),
    .q1(linebuf_c_val_V_1_q1)
);

bd_c2dc_vsc_0_v_vcresampler_core_linebuf_c_val_V_2 #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_c_val_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_c_val_V_2_address0),
    .ce0(linebuf_c_val_V_2_ce0),
    .q0(linebuf_c_val_V_2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln1060_1_fu_474_p2 == 1'd1) | (icmp_ln1060_reg_1228 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln1060_1_fu_474_p2 == 1'd0) & (cmp21582_i_reg_1324 == 1'd0) & (icmp_ln1060_reg_1228 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln1060_1_fu_474_p2 == 1'd0) & (cmp21582_i_reg_1324 == 1'd0) & (icmp_ln1060_reg_1228 == 1'd0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((spec_select601_i_reg_1360 == 1'd1)) begin
            PixBufVal_val_V_0_fu_204 <= select_ln1132_1_fu_777_p3;
        end else if ((spec_select601_i_reg_1360 == 1'd0)) begin
            PixBufVal_val_V_0_fu_204 <= ap_phi_mux_PixBufVal_val_V_0_1_phi_fu_378_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_364)) begin
        if ((1'b1 == ap_condition_367)) begin
            ap_phi_reg_pp0_iter2_PixBufVal_val_V_0_1_reg_375 <= outpix_val_V_1_6_fu_708_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_PixBufVal_val_V_0_1_reg_375 <= ap_phi_reg_pp0_iter1_PixBufVal_val_V_0_1_reg_375;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_364)) begin
        if ((1'b1 == ap_condition_367)) begin
            ap_phi_reg_pp0_iter2_pixbuf_c_val_V_2_1_3_i_reg_366 <= outpix_val_V_4_6_fu_701_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_pixbuf_c_val_V_2_1_3_i_reg_366 <= ap_phi_reg_pp0_iter1_pixbuf_c_val_V_2_1_3_i_reg_366;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((spec_select601_i_reg_1360 == 1'd1)) begin
            pixbuf_c_val_V_0_0_fu_196 <= pixbuf_c_val_V_0_0_2_fu_845_p1;
        end else if ((spec_select601_i_reg_1360 == 1'd0)) begin
            pixbuf_c_val_V_0_0_fu_196 <= select_ln1132_5_fu_789_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((spec_select601_i_reg_1360 == 1'd1)) begin
            pixbuf_c_val_V_0_1_fu_200 <= {{linebuf_c_val_V_2_q0[15:8]}};
        end else if ((spec_select601_i_reg_1360 == 1'd0)) begin
            pixbuf_c_val_V_0_1_fu_200 <= select_ln1132_4_fu_783_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((spec_select601_i_reg_1360 == 1'd1)) begin
            pixbuf_c_val_V_2_1_1_fu_208 <= select_ln1132_fu_771_p3;
        end else if ((spec_select601_i_reg_1360 == 1'd0)) begin
            pixbuf_c_val_V_2_1_1_fu_208 <= ap_phi_mux_pixbuf_c_val_V_2_1_3_i_phi_fu_369_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1063_fu_550_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_reg_355 <= add_ln1063_fu_537_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln1060_1_fu_474_p2 == 1'd0) & (cmp21582_i_reg_1324 == 1'd0) & (icmp_ln1060_reg_1228 == 1'd0))) begin
        x_reg_355 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        y_reg_344 <= add_ln1060_reg_1333;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1060_fu_448_p2 == 1'd0))) begin
        y_reg_344 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln1060_reg_1228 == 1'd0))) begin
        add_ln1060_reg_1333 <= add_ln1060_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_PixBufVal_val_V_0_1_reg_375 <= ap_phi_reg_pp0_iter0_PixBufVal_val_V_0_1_reg_375;
        ap_phi_reg_pp0_iter1_pixbuf_c_val_V_2_1_3_i_reg_366 <= ap_phi_reg_pp0_iter0_pixbuf_c_val_V_2_1_3_i_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cmp205_i_reg_1206 <= cmp205_i_fu_406_p2;
        height_read_reg_1183 <= height_dout;
        icmp_ln1044_reg_1194 <= icmp_ln1044_fu_394_p2;
        icmp_ln1048_reg_1200 <= icmp_ln1048_fu_400_p2;
        loopWidth_reg_1188 <= {{width_dout[11:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1060_fu_448_p2 == 1'd0))) begin
        cmp21582_i_reg_1324 <= cmp21582_i_fu_454_p2;
        sel_tmp3_reg_1328 <= sel_tmp3_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln1060_1_fu_474_p2 == 1'd0) & (icmp_ln1060_reg_1228 == 1'd0))) begin
        cmp27_i_reg_1348 <= cmp27_i_fu_492_p2;
        cmp76_i_reg_1352 <= cmp76_i_fu_497_p2;
        empty_68_reg_1342 <= empty_68_fu_488_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln1060_reg_1228 <= icmp_ln1060_fu_448_p2;
        loopHeight_reg_1223 <= loopHeight_fu_442_p2;
        zext_ln1019_reg_1213[1 : 0] <= zext_ln1019_fu_431_p1[1 : 0];
        zext_ln1058_reg_1218[11 : 0] <= zext_ln1058_fu_439_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1063_reg_1407 <= icmp_ln1063_fu_550_p2;
        icmp_ln1063_reg_1407_pp0_iter1_reg <= icmp_ln1063_reg_1407;
        linebuf_c_val_V_0_addr_reg_1417_pp0_iter1_reg <= linebuf_c_val_V_0_addr_reg_1417;
        linebuf_c_val_V_1_addr_reg_1423_pp0_iter1_reg <= linebuf_c_val_V_1_addr_reg_1423;
        linebuf_y_val_V_0_addr_reg_1411_pp0_iter1_reg <= linebuf_y_val_V_0_addr_reg_1411;
        zext_ln1063_reg_1401[10 : 0] <= zext_ln1063_fu_543_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln1063_reg_1407_pp0_iter2_reg <= icmp_ln1063_reg_1407_pp0_iter1_reg;
        outpix_val_V_0_2_reg_1496 <= outpix_val_V_0_2_fu_1048_p3;
        outpix_val_V_0_reg_1429_pp0_iter2_reg <= outpix_val_V_0_reg_1429;
        outpix_val_V_1_5_reg_1491 <= outpix_val_V_1_5_fu_1029_p3;
        outpix_val_V_1_6_reg_1477_pp0_iter2_reg <= outpix_val_V_1_6_reg_1477;
        outpix_val_V_3_2_reg_1506 <= outpix_val_V_3_2_fu_1163_p3;
        outpix_val_V_3_reg_1436_pp0_iter2_reg <= outpix_val_V_3_reg_1436;
        outpix_val_V_4_5_reg_1501 <= outpix_val_V_4_5_fu_1144_p3;
        outpix_val_V_4_6_reg_1468_pp0_iter2_reg <= outpix_val_V_4_6_reg_1468;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1063_fu_550_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_c_val_V_0_addr_reg_1417 <= zext_ln1063_fu_543_p1;
        linebuf_c_val_V_1_addr_reg_1423 <= zext_ln1063_fu_543_p1;
        linebuf_y_val_V_0_addr_reg_1411 <= zext_ln1063_fu_543_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1063_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_y_val_V_1_addr_reg_1443 <= zext_ln1063_reg_1401;
        outpix_val_V_0_reg_1429 <= outpix_val_V_0_fu_659_p1;
        outpix_val_V_1_6_reg_1477 <= outpix_val_V_1_6_fu_708_p3;
        outpix_val_V_3_reg_1436 <= {{linebuf_y_val_V_0_q1[15:8]}};
        outpix_val_V_4_6_reg_1468 <= outpix_val_V_4_6_fu_701_p3;
        pixbuf_c_val_V_1_0_reg_1458 <= pixbuf_c_val_V_1_0_fu_687_p1;
        pixbuf_c_val_V_1_1_reg_1463 <= {{linebuf_c_val_V_1_q1[15:8]}};
        pixbuf_c_val_V_2_0_5_reg_1448 <= pixbuf_c_val_V_2_0_5_fu_673_p1;
        pixbuf_c_val_V_2_1_7_reg_1453 <= {{linebuf_c_val_V_0_q1[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((cmp27_i_reg_1348 == 1'd1) & (icmp_ln1063_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mpix_c_val_V_0_fu_160 <= {{srcImg_dout[15:8]}};
        mpix_c_val_V_1_fu_172 <= {{srcImg_dout[39:32]}};
        mpix_y_val_V_0_1_fu_180 <= pix_val_V_0_fu_555_p1;
        mpix_y_val_V_0_fu_156 <= pix_val_V_0_fu_555_p1;
        mpix_y_val_V_1_1_fu_184 <= {{srcImg_dout[31:24]}};
        mpix_y_val_V_1_fu_168 <= {{srcImg_dout[31:24]}};
        pix_val_V_2_1_fu_164 <= {{srcImg_dout[23:16]}};
        pix_val_V_5_1_fu_176 <= {{srcImg_dout[47:40]}};
        pixbuf_c_val_V_2_0_1_fu_188 <= {{srcImg_dout[15:8]}};
        pixbuf_c_val_V_2_1_fu_192 <= {{srcImg_dout[39:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln1060_1_fu_474_p2 == 1'd0) & (cmp21582_i_reg_1324 == 1'd0) & (icmp_ln1060_reg_1228 == 1'd0))) begin
        sel_tmp1_reg_1374 <= sel_tmp1_fu_522_p2;
        sel_tmp4_reg_1382 <= sel_tmp4_fu_527_p2;
        sel_tmp6_reg_1388 <= sel_tmp6_fu_532_p2;
        spec_select601_i_reg_1360 <= spec_select601_i_fu_503_p2;
        tmp_reg_1370 <= out_y_fu_483_p2[32'd13];
    end
end

always @ (*) begin
    if ((icmp_ln1063_fu_550_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln1060_1_fu_474_p2 == 1'd1) | (icmp_ln1060_reg_1228 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((cmp27_i_reg_1348 == 1'd1) & (icmp_ln1063_reg_1407_pp0_iter1_reg == 1'd0) & (spec_select601_i_reg_1360 == 1'd0))) begin
        ap_phi_mux_PixBufVal_val_V_0_1_phi_fu_378_p4 = pixbuf_c_val_V_2_0_1_fu_188;
    end else begin
        ap_phi_mux_PixBufVal_val_V_0_1_phi_fu_378_p4 = ap_phi_reg_pp0_iter2_PixBufVal_val_V_0_1_reg_375;
    end
end

always @ (*) begin
    if (((cmp27_i_reg_1348 == 1'd1) & (icmp_ln1063_reg_1407_pp0_iter1_reg == 1'd0) & (spec_select601_i_reg_1360 == 1'd0))) begin
        ap_phi_mux_pixbuf_c_val_V_2_1_3_i_phi_fu_369_p4 = pixbuf_c_val_V_2_1_fu_192;
    end else begin
        ap_phi_mux_pixbuf_c_val_V_2_1_3_i_phi_fu_369_p4 = ap_phi_reg_pp0_iter2_pixbuf_c_val_V_2_1_3_i_reg_366;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln1060_1_fu_474_p2 == 1'd1) | (icmp_ln1060_reg_1228 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_blk_n = height_empty_n;
    end else begin
        height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_out_blk_n = height_out_full_n;
    end else begin
        height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_out_write = 1'b1;
    end else begin
        height_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read = 1'b1;
    end else begin
        height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inColorMode_blk_n = inColorMode_empty_n;
    end else begin
        inColorMode_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inColorMode_read = 1'b1;
    end else begin
        inColorMode_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_c_val_V_0_ce0 = 1'b1;
    end else begin
        linebuf_c_val_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        linebuf_c_val_V_0_ce1 = 1'b1;
    end else begin
        linebuf_c_val_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (cmp27_i_reg_1348 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1063_reg_1407_pp0_iter1_reg == 1'd0) & (spec_select601_i_reg_1360 == 1'd0))) begin
        linebuf_c_val_V_0_we0 = 1'b1;
    end else begin
        linebuf_c_val_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_c_val_V_1_ce0 = 1'b1;
    end else begin
        linebuf_c_val_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        linebuf_c_val_V_1_ce1 = 1'b1;
    end else begin
        linebuf_c_val_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (spec_select601_i_reg_1360 == 1'd0))) begin
        linebuf_c_val_V_1_we0 = 1'b1;
    end else begin
        linebuf_c_val_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_c_val_V_2_ce0 = 1'b1;
    end else begin
        linebuf_c_val_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        linebuf_y_val_V_0_ce0 = 1'b1;
    end else begin
        linebuf_y_val_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        linebuf_y_val_V_0_ce1 = 1'b1;
    end else begin
        linebuf_y_val_V_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1063_reg_1407_pp0_iter1_reg == 1'd0))) begin
        linebuf_y_val_V_0_we0 = 1'b1;
    end else begin
        linebuf_y_val_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1063_reg_1407_pp0_iter1_reg == 1'd0))) begin
        linebuf_y_val_V_1_ce0 = 1'b1;
    end else begin
        linebuf_y_val_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1063_reg_1407_pp0_iter1_reg == 1'd0))) begin
        linebuf_y_val_V_1_we0 = 1'b1;
    end else begin
        linebuf_y_val_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        outColorMode_blk_n = outColorMode_empty_n;
    end else begin
        outColorMode_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        outColorMode_out_blk_n = outColorMode_out_full_n;
    end else begin
        outColorMode_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        outColorMode_out_write = 1'b1;
    end else begin
        outColorMode_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        outColorMode_read = 1'b1;
    end else begin
        outColorMode_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln1044_reg_1194 == 1'd0) & (tmp_reg_1370 == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln1044_reg_1194 == 1'd1) & (tmp_reg_1370 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        outImg_blk_n = outImg_full_n;
    end else begin
        outImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_01001)) begin
        if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op233_write_state8 == 1'b1))) begin
            outImg_din = or_ln174_i_fu_1170_p7;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op185_write_state6 == 1'b1))) begin
            outImg_din = or_ln174_8_i_fu_897_p7;
        end else begin
            outImg_din = 'bx;
        end
    end else begin
        outImg_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op233_write_state8 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op185_write_state6 == 1'b1)))) begin
        outImg_write = 1'b1;
    end else begin
        outImg_write = 1'b0;
    end
end

always @ (*) begin
    if (((cmp27_i_reg_1348 == 1'd1) & (icmp_ln1063_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_blk_n = srcImg_empty_n;
    end else begin
        srcImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op104_read_state5 == 1'b1))) begin
        srcImg_read = 1'b1;
    end else begin
        srcImg_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_blk_n = width_empty_n;
    end else begin
        width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_out_blk_n = width_out_full_n;
    end else begin
        width_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_out_write = 1'b1;
    end else begin
        width_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read = 1'b1;
    end else begin
        width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln1060_1_fu_474_p2 == 1'd1) | (icmp_ln1060_reg_1228 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln1060_1_fu_474_p2 == 1'd0) & (cmp21582_i_reg_1324 == 1'd0) & (icmp_ln1060_reg_1228 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln1063_fu_550_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln1063_fu_550_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1060_fu_464_p2 = (y_reg_344 + 13'd1);

assign add_ln1063_fu_537_p2 = (x_reg_355 + 11'd1);

assign add_ln1346_1_fu_968_p2 = (zext_ln1346_1_fu_958_p1 + 9'd2);

assign add_ln1346_2_fu_978_p2 = (zext_ln1346_3_fu_974_p1 + add_ln1346_fu_962_p2);

assign add_ln1346_3_fu_994_p2 = (zext_ln1345_fu_940_p1 + 9'd1);

assign add_ln1346_4_fu_1000_p2 = (add_ln1346_3_fu_994_p2 + zext_ln1346_1_fu_958_p1);

assign add_ln1346_5_fu_1077_p2 = (zext_ln1346_2_fu_1069_p1 + zext_ln215_36_fu_1065_p1);

assign add_ln1346_6_fu_1083_p2 = (zext_ln1346_4_fu_1073_p1 + 9'd2);

assign add_ln1346_7_fu_1093_p2 = (zext_ln1346_5_fu_1089_p1 + add_ln1346_5_fu_1077_p2);

assign add_ln1346_8_fu_1109_p2 = (zext_ln1345_1_fu_1055_p1 + 9'd1);

assign add_ln1346_9_fu_1115_p2 = (add_ln1346_8_fu_1109_p2 + zext_ln1346_4_fu_1073_p1);

assign add_ln1346_fu_962_p2 = (zext_ln1346_fu_954_p1 + zext_ln215_fu_950_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op233_write_state8 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op185_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op104_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op233_write_state8 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op185_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op104_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op233_write_state8 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op185_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op104_read_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((outColorMode_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (height_out_full_n == 1'b0) | (outColorMode_empty_n == 1'b0) | (inColorMode_empty_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((srcImg_empty_n == 1'b0) & (ap_predicate_op104_read_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((outImg_full_n == 1'b0) & (ap_predicate_op185_write_state6 == 1'b1));
end

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter4 = ((outImg_full_n == 1'b0) & (ap_predicate_op233_write_state8 == 1'b1));
end

always @ (*) begin
    ap_condition_364 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_367 = ((cmp27_i_reg_1348 == 1'd0) & (icmp_ln1063_reg_1407 == 1'd0) & (spec_select601_i_reg_1360 == 1'd0));
end

always @ (*) begin
    ap_enable_operation_122 = (icmp_ln1063_reg_1407 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_126 = (icmp_ln1063_reg_1407 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_129 = (icmp_ln1063_reg_1407 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_146 = (icmp_ln1063_reg_1407_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_147 = (icmp_ln1063_reg_1407_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_151 = (icmp_ln1063_reg_1407_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_157 = (ap_predicate_op157_store_state6 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_164 = (spec_select601_i_reg_1360 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_187 = (icmp_ln1063_reg_1407_pp0_iter2_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_95 = (icmp_ln1063_fu_550_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_97 = (icmp_ln1063_fu_550_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_99 = (icmp_ln1063_fu_550_p2 == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state4_pp0_iter0_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_state5_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state6_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state7_pp0_iter3_stage0 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_phi_reg_pp0_iter0_PixBufVal_val_V_0_1_reg_375 = 'bx;

assign ap_phi_reg_pp0_iter0_pixbuf_c_val_V_2_1_3_i_reg_366 = 'bx;

always @ (*) begin
    ap_predicate_op104_read_state5 = ((cmp27_i_reg_1348 == 1'd1) & (icmp_ln1063_reg_1407 == 1'd0));
end

always @ (*) begin
    ap_predicate_op157_store_state6 = ((cmp27_i_reg_1348 == 1'd1) & (icmp_ln1063_reg_1407_pp0_iter1_reg == 1'd0) & (spec_select601_i_reg_1360 == 1'd0));
end

always @ (*) begin
    ap_predicate_op185_write_state6 = ((icmp_ln1044_reg_1194 == 1'd1) & (tmp_reg_1370 == 1'd0));
end

always @ (*) begin
    ap_predicate_op233_write_state8 = ((icmp_ln1044_reg_1194 == 1'd0) & (tmp_reg_1370 == 1'd0));
end

assign cmp205_i_fu_406_p2 = ((inColorMode_dout == 8'd2) ? 1'b1 : 1'b0);

assign cmp21582_i_fu_454_p2 = ((loopWidth_reg_1188 == 11'd0) ? 1'b1 : 1'b0);

assign cmp27_i_fu_492_p2 = ((y_reg_344 < zext_ln1058_reg_1218) ? 1'b1 : 1'b0);

assign cmp76_i_fu_497_p2 = ((y_reg_344 != 13'd0) ? 1'b1 : 1'b0);

assign empty_68_fu_488_p1 = out_y_fu_483_p2[0:0];

assign empty_fu_479_p1 = y_reg_344[0:0];

assign height_out_din = height_dout;

assign icmp_ln1044_fu_394_p2 = ((inColorMode_dout == outColorMode_dout) ? 1'b1 : 1'b0);

assign icmp_ln1048_fu_400_p2 = ((inColorMode_dout == 8'd3) ? 1'b1 : 1'b0);

assign icmp_ln1060_1_fu_474_p2 = ((y_reg_344 == loopHeight_reg_1223) ? 1'b1 : 1'b0);

assign icmp_ln1060_fu_448_p2 = ((loopHeight_fu_442_p2 == 13'd0) ? 1'b1 : 1'b0);

assign icmp_ln1063_fu_550_p2 = ((x_reg_355 == loopWidth_reg_1188) ? 1'b1 : 1'b0);

assign linebuf_c_val_V_0_address0 = linebuf_c_val_V_0_addr_reg_1417_pp0_iter1_reg;

assign linebuf_c_val_V_0_address1 = zext_ln1063_fu_543_p1;

assign linebuf_c_val_V_0_d0 = {{pixbuf_c_val_V_2_1_fu_192}, {pixbuf_c_val_V_2_0_1_fu_188}};

assign linebuf_c_val_V_1_address0 = linebuf_c_val_V_1_addr_reg_1423_pp0_iter1_reg;

assign linebuf_c_val_V_1_address1 = zext_ln1063_fu_543_p1;

assign linebuf_c_val_V_1_d0 = {{pixbuf_c_val_V_2_1_6_fu_810_p3}, {pixbuf_c_val_V_2_0_fu_804_p3}};

assign linebuf_c_val_V_2_address0 = zext_ln1063_reg_1401;

assign linebuf_y_val_V_0_address0 = linebuf_y_val_V_0_addr_reg_1411_pp0_iter1_reg;

assign linebuf_y_val_V_0_address1 = zext_ln1063_fu_543_p1;

assign linebuf_y_val_V_0_d0 = {{mpix_y_val_V_1_1_fu_184}, {mpix_y_val_V_0_1_fu_180}};

assign linebuf_y_val_V_1_address0 = linebuf_y_val_V_1_addr_reg_1443;

assign linebuf_y_val_V_1_d0 = {{select_ln1107_1_fu_756_p3}, {select_ln1107_fu_750_p3}};

assign loopHeight_fu_442_p2 = (zext_ln1058_fu_439_p1 + zext_ln1019_1_fu_435_p1);

assign newSel37_fu_1042_p3 = ((sel_tmp1_reg_1374[0:0] == 1'b1) ? outpix_val_V_0_reg_1429_pp0_iter2_reg : outpix_val_V_0_1_fu_914_p1);

assign newSel41_fu_1151_p3 = ((sel_tmp6_reg_1388[0:0] == 1'b1) ? outpix_val_V_3_reg_1436_pp0_iter2_reg : outpix_val_V_3_1_fu_918_p4);

assign newSel43_fu_1157_p3 = ((sel_tmp1_reg_1374[0:0] == 1'b1) ? outpix_val_V_3_reg_1436_pp0_iter2_reg : outpix_val_V_3_1_fu_918_p4);

assign newSel_fu_1036_p3 = ((sel_tmp6_reg_1388[0:0] == 1'b1) ? outpix_val_V_0_reg_1429_pp0_iter2_reg : outpix_val_V_0_1_fu_914_p1);

assign or_ln1044_fu_419_p2 = (icmp_ln1048_reg_1200 | icmp_ln1044_reg_1194);

assign or_ln174_8_i_fu_897_p7 = {{{{{{pix_val_V_5_1_fu_176}, {mpix_c_val_V_1_fu_172}}, {mpix_y_val_V_1_fu_168}}, {pix_val_V_2_1_fu_164}}, {mpix_c_val_V_0_fu_160}}, {mpix_y_val_V_0_fu_156}};

assign or_ln174_i_fu_1170_p7 = {{{{{{{{{{8'd0}, {outpix_val_V_4_5_reg_1501}}}, {outpix_val_V_3_2_reg_1506}}}, {8'd0}}}, {outpix_val_V_1_5_reg_1491}}}, {outpix_val_V_0_2_reg_1496}};

assign outColorMode_out_din = outColorMode_dout;

assign out_y_fu_483_p2 = (zext_ln1060_fu_470_p1 - zext_ln1019_reg_1213);

assign outpix_val_V_0_1_fu_914_p1 = linebuf_y_val_V_1_q0[7:0];

assign outpix_val_V_0_2_fu_1048_p3 = ((empty_68_reg_1342[0:0] == 1'b1) ? newSel_fu_1036_p3 : newSel37_fu_1042_p3);

assign outpix_val_V_0_fu_659_p1 = linebuf_y_val_V_0_q1[7:0];

assign outpix_val_V_1_2_fu_1006_p4 = {{add_ln1346_4_fu_1000_p2[8:1]}};

assign outpix_val_V_1_3_fu_1016_p3 = ((sel_tmp1_reg_1374[0:0] == 1'b1) ? outpix_val_V_1_fu_984_p4 : outpix_val_V_1_6_reg_1477_pp0_iter2_reg);

assign outpix_val_V_1_4_fu_1022_p3 = ((sel_tmp4_reg_1382[0:0] == 1'b1) ? outpix_val_V_1_2_fu_1006_p4 : outpix_val_V_1_3_fu_1016_p3);

assign outpix_val_V_1_5_fu_1029_p3 = ((sel_tmp6_reg_1388[0:0] == 1'b1) ? 8'd0 : outpix_val_V_1_4_fu_1022_p3);

assign outpix_val_V_1_6_fu_708_p3 = ((spec_select601_i_reg_1360[0:0] == 1'b1) ? pixbuf_c_val_V_1_0_fu_687_p1 : pixbuf_c_val_V_2_0_5_fu_673_p1);

assign outpix_val_V_1_fu_984_p4 = {{add_ln1346_2_fu_978_p2[9:2]}};

assign outpix_val_V_3_1_fu_918_p4 = {{linebuf_y_val_V_1_q0[15:8]}};

assign outpix_val_V_3_2_fu_1163_p3 = ((empty_68_reg_1342[0:0] == 1'b1) ? newSel41_fu_1151_p3 : newSel43_fu_1157_p3);

assign outpix_val_V_4_2_fu_1121_p4 = {{add_ln1346_9_fu_1115_p2[8:1]}};

assign outpix_val_V_4_3_fu_1131_p3 = ((sel_tmp1_reg_1374[0:0] == 1'b1) ? outpix_val_V_4_fu_1099_p4 : outpix_val_V_4_6_reg_1468_pp0_iter2_reg);

assign outpix_val_V_4_4_fu_1137_p3 = ((sel_tmp4_reg_1382[0:0] == 1'b1) ? outpix_val_V_4_2_fu_1121_p4 : outpix_val_V_4_3_fu_1131_p3);

assign outpix_val_V_4_5_fu_1144_p3 = ((sel_tmp6_reg_1388[0:0] == 1'b1) ? 8'd0 : outpix_val_V_4_4_fu_1137_p3);

assign outpix_val_V_4_6_fu_701_p3 = ((spec_select601_i_reg_1360[0:0] == 1'b1) ? pixbuf_c_val_V_1_1_fu_691_p4 : pixbuf_c_val_V_2_1_7_fu_677_p4);

assign outpix_val_V_4_fu_1099_p4 = {{add_ln1346_7_fu_1093_p2[9:2]}};

assign pix_val_V_0_fu_555_p1 = srcImg_dout[7:0];

assign pixbuf_c_val_V_0_0_2_fu_845_p1 = linebuf_c_val_V_2_q0[7:0];

assign pixbuf_c_val_V_1_0_fu_687_p1 = linebuf_c_val_V_1_q1[7:0];

assign pixbuf_c_val_V_1_1_fu_691_p4 = {{linebuf_c_val_V_1_q1[15:8]}};

assign pixbuf_c_val_V_2_0_5_fu_673_p1 = linebuf_c_val_V_0_q1[7:0];

assign pixbuf_c_val_V_2_0_fu_804_p3 = ((cmp76_i_reg_1352[0:0] == 1'b1) ? outpix_val_V_1_6_reg_1477 : ap_phi_mux_PixBufVal_val_V_0_1_phi_fu_378_p4);

assign pixbuf_c_val_V_2_1_6_fu_810_p3 = ((cmp76_i_reg_1352[0:0] == 1'b1) ? outpix_val_V_4_6_reg_1468 : ap_phi_mux_pixbuf_c_val_V_2_1_3_i_phi_fu_369_p4);

assign pixbuf_c_val_V_2_1_7_fu_677_p4 = {{linebuf_c_val_V_0_q1[15:8]}};

assign sel_tmp1_fu_522_p2 = (sel_tmp_fu_516_p2 & cmp205_i_reg_1206);

assign sel_tmp3_fu_459_p2 = (cmp205_i_reg_1206 ^ 1'd1);

assign sel_tmp4_fu_527_p2 = (sel_tmp3_reg_1328 & empty_68_fu_488_p1);

assign sel_tmp6_fu_532_p2 = (empty_68_fu_488_p1 & cmp205_i_reg_1206);

assign sel_tmp_fu_516_p2 = (empty_68_fu_488_p1 ^ 1'd1);

assign select_ln1044_fu_412_p3 = ((icmp_ln1044_reg_1194[0:0] == 1'b1) ? 2'd0 : 2'd2);

assign select_ln1107_1_fu_756_p3 = ((cmp76_i_reg_1352[0:0] == 1'b1) ? outpix_val_V_3_reg_1436 : mpix_y_val_V_1_1_fu_184);

assign select_ln1107_fu_750_p3 = ((cmp76_i_reg_1352[0:0] == 1'b1) ? outpix_val_V_0_reg_1429 : mpix_y_val_V_0_1_fu_180);

assign select_ln1132_1_fu_777_p3 = ((spec_select601_i_reg_1360[0:0] == 1'b1) ? pixbuf_c_val_V_2_0_5_reg_1448 : PixBufVal_val_V_0_fu_204);

assign select_ln1132_4_fu_783_p3 = ((spec_select601_i_reg_1360[0:0] == 1'b1) ? pixbuf_c_val_V_0_1_fu_200 : pixbuf_c_val_V_1_1_reg_1463);

assign select_ln1132_5_fu_789_p3 = ((spec_select601_i_reg_1360[0:0] == 1'b1) ? pixbuf_c_val_V_0_0_fu_196 : pixbuf_c_val_V_1_0_reg_1458);

assign select_ln1132_fu_771_p3 = ((spec_select601_i_reg_1360[0:0] == 1'b1) ? pixbuf_c_val_V_2_1_7_reg_1453 : pixbuf_c_val_V_2_1_1_fu_208);

assign shl_ln1345_1_fu_1058_p3 = {{outpix_val_V_4_6_reg_1468_pp0_iter2_reg}, {1'd0}};

assign shl_ln_fu_943_p3 = {{outpix_val_V_1_6_reg_1477_pp0_iter2_reg}, {1'd0}};

assign spec_select601_i_fu_503_p2 = (icmp_ln1048_reg_1200 & empty_fu_479_p1);

assign width_out_din = width_dout;

assign yOffset_fu_423_p3 = ((or_ln1044_fu_419_p2[0:0] == 1'b1) ? select_ln1044_fu_412_p3 : 2'd1);

assign zext_ln1019_1_fu_435_p1 = yOffset_fu_423_p3;

assign zext_ln1019_fu_431_p1 = yOffset_fu_423_p3;

assign zext_ln1058_fu_439_p1 = height_read_reg_1183;

assign zext_ln1060_fu_470_p1 = y_reg_344;

assign zext_ln1063_fu_543_p1 = x_reg_355;

assign zext_ln1345_1_fu_1055_p1 = outpix_val_V_4_6_reg_1468_pp0_iter2_reg;

assign zext_ln1345_fu_940_p1 = outpix_val_V_1_6_reg_1477_pp0_iter2_reg;

assign zext_ln1346_1_fu_958_p1 = PixBufVal_val_V_0_fu_204;

assign zext_ln1346_2_fu_1069_p1 = shl_ln1345_1_fu_1058_p3;

assign zext_ln1346_3_fu_974_p1 = add_ln1346_1_fu_968_p2;

assign zext_ln1346_4_fu_1073_p1 = pixbuf_c_val_V_2_1_1_fu_208;

assign zext_ln1346_5_fu_1089_p1 = add_ln1346_6_fu_1083_p2;

assign zext_ln1346_fu_954_p1 = shl_ln_fu_943_p3;

assign zext_ln215_36_fu_1065_p1 = pixbuf_c_val_V_0_1_fu_200;

assign zext_ln215_fu_950_p1 = pixbuf_c_val_V_0_0_fu_196;

always @ (posedge ap_clk) begin
    zext_ln1019_reg_1213[13:2] <= 12'b000000000000;
    zext_ln1058_reg_1218[12] <= 1'b0;
    zext_ln1063_reg_1401[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //bd_c2dc_vsc_0_v_vcresampler_core
