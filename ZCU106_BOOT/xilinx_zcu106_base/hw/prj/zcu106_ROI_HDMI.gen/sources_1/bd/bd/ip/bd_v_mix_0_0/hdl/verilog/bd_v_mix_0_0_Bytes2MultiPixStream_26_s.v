// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_mix_0_0_Bytes2MultiPixStream_26_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        bytesLayer3_plane0_dout,
        bytesLayer3_plane0_empty_n,
        bytesLayer3_plane0_read,
        srcLayer3_din,
        srcLayer3_full_n,
        srcLayer3_write,
        srcLayer3Alpha_din,
        srcLayer3Alpha_full_n,
        srcLayer3Alpha_write,
        HwReg_layerHeight18_load_loc_dout,
        HwReg_layerHeight18_load_loc_empty_n,
        HwReg_layerHeight18_load_loc_read,
        HwReg_layerWidth15_load_loc_dout,
        HwReg_layerWidth15_load_loc_empty_n,
        HwReg_layerWidth15_load_loc_read,
        p_read3_dout,
        p_read3_empty_n,
        p_read3_read,
        p_read3_out_din,
        p_read3_out_full_n,
        p_read3_out_write,
        p_read3_out1_din,
        p_read3_out1_full_n,
        p_read3_out1_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [127:0] bytesLayer3_plane0_dout;
input   bytesLayer3_plane0_empty_n;
output   bytesLayer3_plane0_read;
output  [47:0] srcLayer3_din;
input   srcLayer3_full_n;
output   srcLayer3_write;
output  [15:0] srcLayer3Alpha_din;
input   srcLayer3Alpha_full_n;
output   srcLayer3Alpha_write;
input  [15:0] HwReg_layerHeight18_load_loc_dout;
input   HwReg_layerHeight18_load_loc_empty_n;
output   HwReg_layerHeight18_load_loc_read;
input  [15:0] HwReg_layerWidth15_load_loc_dout;
input   HwReg_layerWidth15_load_loc_empty_n;
output   HwReg_layerWidth15_load_loc_read;
input  [0:0] p_read3_dout;
input   p_read3_empty_n;
output   p_read3_read;
output  [0:0] p_read3_out_din;
input   p_read3_out_full_n;
output   p_read3_out_write;
output  [0:0] p_read3_out1_din;
input   p_read3_out1_full_n;
output   p_read3_out1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg bytesLayer3_plane0_read;
reg srcLayer3_write;
reg srcLayer3Alpha_write;
reg HwReg_layerHeight18_load_loc_read;
reg HwReg_layerWidth15_load_loc_read;
reg p_read3_read;
reg p_read3_out_write;
reg p_read3_out1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    bytesLayer3_plane0_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln443_reg_404;
reg   [0:0] xmodratio_reg_408;
reg    srcLayer3_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln443_reg_404_pp0_iter1_reg;
reg    srcLayer3Alpha_blk_n;
reg    HwReg_layerHeight18_load_loc_blk_n;
reg    HwReg_layerWidth15_load_loc_blk_n;
reg    p_read3_blk_n;
reg    p_read3_out_blk_n;
reg    p_read3_out1_blk_n;
reg   [14:0] x_reg_181;
reg   [127:0] fb_pix_V_reg_192;
wire   [0:0] p_read_read_fu_116_p2;
reg   [0:0] p_read_reg_372;
reg   [15:0] HwReg_layerHeight18_load_loc_read_reg_376;
reg   [14:0] trunc_ln_reg_381;
wire   [0:0] icmp_ln436_fu_225_p2;
reg   [0:0] icmp_ln436_reg_386;
wire   [15:0] y_21_fu_231_p2;
reg   [15:0] y_21_reg_390;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln436_1_fu_237_p2;
wire   [14:0] x_21_fu_242_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op47_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln443_fu_248_p2;
wire   [0:0] xmodratio_fu_253_p1;
reg   [0:0] xmodratio_reg_408_pp0_iter1_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state4;
reg   [15:0] y_reg_170;
wire    ap_CS_fsm_state6;
reg    ap_block_state1;
reg   [127:0] ap_phi_mux_p_Val2_s_phi_fu_208_p4;
wire   [127:0] ap_phi_reg_pp0_iter0_p_Val2_s_reg_204;
reg   [127:0] ap_phi_reg_pp0_iter1_p_Val2_s_reg_204;
reg   [127:0] ap_phi_reg_pp0_iter2_p_Val2_s_reg_204;
wire   [127:0] zext_ln849_fu_267_p1;
reg    ap_block_pp0_stage0_01001;
wire   [63:0] fb_pix_V_1_fu_257_p4;
wire   [7:0] p_Result_12_1_i_i_fu_326_p4;
wire   [7:0] p_Result_11_1_i_i_fu_316_p4;
wire   [7:0] p_Result_10_1_i_i_fu_306_p4;
wire   [7:0] trunc_ln674_fu_292_p1;
wire   [7:0] p_Result_11_i_i_fu_282_p4;
wire   [7:0] p_Result_10_i_i_fu_272_p4;
wire   [7:0] pixAlpha_val_1_fu_336_p4;
wire   [7:0] pixAlpha_val_0_fu_296_p4;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_217;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ((p_read_reg_372 == 1'd0) | ((icmp_ln436_1_fu_237_p2 == 1'd1) | (icmp_ln436_reg_386 == 1'd1))))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln436_1_fu_237_p2 == 1'd0) & (icmp_ln436_reg_386 == 1'd0) & (p_read_reg_372 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state4) & (ap_enable_reg_pp0_iter0 == 1'b0)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln436_1_fu_237_p2 == 1'd0) & (icmp_ln436_reg_386 == 1'd0) & (p_read_reg_372 == 1'd1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln436_1_fu_237_p2 == 1'd0) & (icmp_ln436_reg_386 == 1'd0) & (p_read_reg_372 == 1'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_217)) begin
        if (((xmodratio_reg_408 == 1'd0) & (icmp_ln443_reg_404 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_Val2_s_reg_204 <= bytesLayer3_plane0_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_Val2_s_reg_204 <= ap_phi_reg_pp0_iter1_p_Val2_s_reg_204;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fb_pix_V_reg_192 <= ap_phi_mux_p_Val2_s_phi_fu_208_p4;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln436_1_fu_237_p2 == 1'd0) & (icmp_ln436_reg_386 == 1'd0) & (p_read_reg_372 == 1'd1))) begin
        fb_pix_V_reg_192 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln443_fu_248_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_reg_181 <= x_21_fu_242_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln436_1_fu_237_p2 == 1'd0) & (icmp_ln436_reg_386 == 1'd0) & (p_read_reg_372 == 1'd1))) begin
        x_reg_181 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_read3_out1_full_n == 1'b0) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln436_fu_225_p2 == 1'd0) & (p_read_read_fu_116_p2 == 1'd1))) begin
        y_reg_170 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        y_reg_170 <= y_21_reg_390;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        HwReg_layerHeight18_load_loc_read_reg_376 <= HwReg_layerHeight18_load_loc_dout;
        p_read_reg_372 <= p_read3_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_Val2_s_reg_204 <= ap_phi_reg_pp0_iter0_p_Val2_s_reg_204;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (p_read_read_fu_116_p2 == 1'd1))) begin
        icmp_ln436_reg_386 <= icmp_ln436_fu_225_p2;
        trunc_ln_reg_381 <= {{HwReg_layerWidth15_load_loc_dout[15:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln443_reg_404 <= icmp_ln443_fu_248_p2;
        icmp_ln443_reg_404_pp0_iter1_reg <= icmp_ln443_reg_404;
        xmodratio_reg_408_pp0_iter1_reg <= xmodratio_reg_408;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln443_fu_248_p2 == 1'd0))) begin
        xmodratio_reg_408 <= xmodratio_fu_253_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln436_reg_386 == 1'd0) & (p_read_reg_372 == 1'd1))) begin
        y_21_reg_390 <= y_21_fu_231_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_loc_blk_n = HwReg_layerHeight18_load_loc_empty_n;
    end else begin
        HwReg_layerHeight18_load_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read3_out1_full_n == 1'b0) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_loc_read = 1'b1;
    end else begin
        HwReg_layerHeight18_load_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_loc_blk_n = HwReg_layerWidth15_load_loc_empty_n;
    end else begin
        HwReg_layerWidth15_load_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read3_out1_full_n == 1'b0) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_loc_read = 1'b1;
    end else begin
        HwReg_layerWidth15_load_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln443_fu_248_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((p_read_reg_372 == 1'd0) | ((icmp_ln436_1_fu_237_p2 == 1'd1) | (icmp_ln436_reg_386 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (xmodratio_reg_408_pp0_iter1_reg == 1'd1))) begin
        ap_phi_mux_p_Val2_s_phi_fu_208_p4 = zext_ln849_fu_267_p1;
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_208_p4 = ap_phi_reg_pp0_iter2_p_Val2_s_reg_204;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((p_read_reg_372 == 1'd0) | ((icmp_ln436_1_fu_237_p2 == 1'd1) | (icmp_ln436_reg_386 == 1'd1))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((xmodratio_reg_408 == 1'd0) & (icmp_ln443_reg_404 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bytesLayer3_plane0_blk_n = bytesLayer3_plane0_empty_n;
    end else begin
        bytesLayer3_plane0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op47_read_state4 == 1'b1))) begin
        bytesLayer3_plane0_read = 1'b1;
    end else begin
        bytesLayer3_plane0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_blk_n = p_read3_empty_n;
    end else begin
        p_read3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_out1_blk_n = p_read3_out1_full_n;
    end else begin
        p_read3_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read3_out1_full_n == 1'b0) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_out1_write = 1'b1;
    end else begin
        p_read3_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_out_blk_n = p_read3_out_full_n;
    end else begin
        p_read3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read3_out1_full_n == 1'b0) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_out_write = 1'b1;
    end else begin
        p_read3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read3_out1_full_n == 1'b0) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_read = 1'b1;
    end else begin
        p_read3_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        srcLayer3Alpha_blk_n = srcLayer3Alpha_full_n;
    end else begin
        srcLayer3Alpha_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcLayer3Alpha_write = 1'b1;
    end else begin
        srcLayer3Alpha_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        srcLayer3_blk_n = srcLayer3_full_n;
    end else begin
        srcLayer3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        srcLayer3_write = 1'b1;
    end else begin
        srcLayer3_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_read3_out1_full_n == 1'b0) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((p_read_reg_372 == 1'd0) | ((icmp_ln436_1_fu_237_p2 == 1'd1) | (icmp_ln436_reg_386 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (srcLayer3Alpha_full_n == 1'b0)) | ((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (srcLayer3_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (bytesLayer3_plane0_empty_n == 1'b0) & (ap_predicate_op47_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (srcLayer3Alpha_full_n == 1'b0)) | ((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (srcLayer3_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (bytesLayer3_plane0_empty_n == 1'b0) & (ap_predicate_op47_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (srcLayer3Alpha_full_n == 1'b0)) | ((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (srcLayer3_full_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (bytesLayer3_plane0_empty_n == 1'b0) & (ap_predicate_op47_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_read3_out1_full_n == 1'b0) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth15_load_loc_empty_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((bytesLayer3_plane0_empty_n == 1'b0) & (ap_predicate_op47_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = (((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (srcLayer3Alpha_full_n == 1'b0)) | ((icmp_ln443_reg_404_pp0_iter1_reg == 1'd0) & (srcLayer3_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_217 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_Val2_s_reg_204 = 'bx;

always @ (*) begin
    ap_predicate_op47_read_state4 = ((xmodratio_reg_408 == 1'd0) & (icmp_ln443_reg_404 == 1'd0));
end

assign fb_pix_V_1_fu_257_p4 = {{fb_pix_V_reg_192[127:64]}};

assign icmp_ln436_1_fu_237_p2 = ((y_reg_170 == HwReg_layerHeight18_load_loc_read_reg_376) ? 1'b1 : 1'b0);

assign icmp_ln436_fu_225_p2 = ((HwReg_layerHeight18_load_loc_dout == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln443_fu_248_p2 = ((x_reg_181 == trunc_ln_reg_381) ? 1'b1 : 1'b0);

assign p_Result_10_1_i_i_fu_306_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_208_p4[55:48]}};

assign p_Result_10_i_i_fu_272_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_208_p4[23:16]}};

assign p_Result_11_1_i_i_fu_316_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_208_p4[47:40]}};

assign p_Result_11_i_i_fu_282_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_208_p4[15:8]}};

assign p_Result_12_1_i_i_fu_326_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_208_p4[39:32]}};

assign p_read3_out1_din = p_read3_dout;

assign p_read3_out_din = p_read3_dout;

assign p_read_read_fu_116_p2 = p_read3_dout;

assign pixAlpha_val_0_fu_296_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_208_p4[31:24]}};

assign pixAlpha_val_1_fu_336_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_208_p4[63:56]}};

assign srcLayer3Alpha_din = {{pixAlpha_val_1_fu_336_p4}, {pixAlpha_val_0_fu_296_p4}};

assign srcLayer3_din = {{{{{{p_Result_12_1_i_i_fu_326_p4}, {p_Result_11_1_i_i_fu_316_p4}}, {p_Result_10_1_i_i_fu_306_p4}}, {trunc_ln674_fu_292_p1}}, {p_Result_11_i_i_fu_282_p4}}, {p_Result_10_i_i_fu_272_p4}};

assign trunc_ln674_fu_292_p1 = ap_phi_mux_p_Val2_s_phi_fu_208_p4[7:0];

assign x_21_fu_242_p2 = (x_reg_181 + 15'd1);

assign xmodratio_fu_253_p1 = x_reg_181[0:0];

assign y_21_fu_231_p2 = (y_reg_170 + 16'd1);

assign zext_ln849_fu_267_p1 = fb_pix_V_1_fu_257_p4;

endmodule //bd_v_mix_0_0_Bytes2MultiPixStream_26_s
