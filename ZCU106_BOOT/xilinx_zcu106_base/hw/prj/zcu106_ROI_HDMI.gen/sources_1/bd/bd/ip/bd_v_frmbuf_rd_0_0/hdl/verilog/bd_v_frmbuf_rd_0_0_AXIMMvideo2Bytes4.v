// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_frmbuf_rd_0_0_AXIMMvideo2Bytes4 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_mm_video_AWVALID,
        m_axi_mm_video_AWREADY,
        m_axi_mm_video_AWADDR,
        m_axi_mm_video_AWID,
        m_axi_mm_video_AWLEN,
        m_axi_mm_video_AWSIZE,
        m_axi_mm_video_AWBURST,
        m_axi_mm_video_AWLOCK,
        m_axi_mm_video_AWCACHE,
        m_axi_mm_video_AWPROT,
        m_axi_mm_video_AWQOS,
        m_axi_mm_video_AWREGION,
        m_axi_mm_video_AWUSER,
        m_axi_mm_video_WVALID,
        m_axi_mm_video_WREADY,
        m_axi_mm_video_WDATA,
        m_axi_mm_video_WSTRB,
        m_axi_mm_video_WLAST,
        m_axi_mm_video_WID,
        m_axi_mm_video_WUSER,
        m_axi_mm_video_ARVALID,
        m_axi_mm_video_ARREADY,
        m_axi_mm_video_ARADDR,
        m_axi_mm_video_ARID,
        m_axi_mm_video_ARLEN,
        m_axi_mm_video_ARSIZE,
        m_axi_mm_video_ARBURST,
        m_axi_mm_video_ARLOCK,
        m_axi_mm_video_ARCACHE,
        m_axi_mm_video_ARPROT,
        m_axi_mm_video_ARQOS,
        m_axi_mm_video_ARREGION,
        m_axi_mm_video_ARUSER,
        m_axi_mm_video_RVALID,
        m_axi_mm_video_RREADY,
        m_axi_mm_video_RDATA,
        m_axi_mm_video_RLAST,
        m_axi_mm_video_RID,
        m_axi_mm_video_RUSER,
        m_axi_mm_video_RRESP,
        m_axi_mm_video_BVALID,
        m_axi_mm_video_BREADY,
        m_axi_mm_video_BRESP,
        m_axi_mm_video_BID,
        m_axi_mm_video_BUSER,
        bytePlanes_01_din,
        bytePlanes_01_full_n,
        bytePlanes_01_write,
        bytePlanes_12_din,
        bytePlanes_12_full_n,
        bytePlanes_12_write,
        srcImg,
        srcImg2,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        Height_out_din,
        Height_out_full_n,
        Height_out_write,
        WidthInBytes_out_din,
        WidthInBytes_out_full_n,
        WidthInBytes_out_write,
        VideoFormat_out_din,
        VideoFormat_out_full_n,
        VideoFormat_out_write,
        width_out_din,
        width_out_full_n,
        width_out_write,
        colorFormat_out_din,
        colorFormat_out_full_n,
        colorFormat_out_write
);

parameter    ap_ST_fsm_state1 = 221'd1;
parameter    ap_ST_fsm_state2 = 221'd2;
parameter    ap_ST_fsm_state3 = 221'd4;
parameter    ap_ST_fsm_state4 = 221'd8;
parameter    ap_ST_fsm_state5 = 221'd16;
parameter    ap_ST_fsm_state6 = 221'd32;
parameter    ap_ST_fsm_state7 = 221'd64;
parameter    ap_ST_fsm_state8 = 221'd128;
parameter    ap_ST_fsm_state9 = 221'd256;
parameter    ap_ST_fsm_state10 = 221'd512;
parameter    ap_ST_fsm_state11 = 221'd1024;
parameter    ap_ST_fsm_state12 = 221'd2048;
parameter    ap_ST_fsm_state13 = 221'd4096;
parameter    ap_ST_fsm_state14 = 221'd8192;
parameter    ap_ST_fsm_state15 = 221'd16384;
parameter    ap_ST_fsm_state16 = 221'd32768;
parameter    ap_ST_fsm_state17 = 221'd65536;
parameter    ap_ST_fsm_state18 = 221'd131072;
parameter    ap_ST_fsm_state19 = 221'd262144;
parameter    ap_ST_fsm_state20 = 221'd524288;
parameter    ap_ST_fsm_state21 = 221'd1048576;
parameter    ap_ST_fsm_state22 = 221'd2097152;
parameter    ap_ST_fsm_state23 = 221'd4194304;
parameter    ap_ST_fsm_state24 = 221'd8388608;
parameter    ap_ST_fsm_state25 = 221'd16777216;
parameter    ap_ST_fsm_state26 = 221'd33554432;
parameter    ap_ST_fsm_state27 = 221'd67108864;
parameter    ap_ST_fsm_state28 = 221'd134217728;
parameter    ap_ST_fsm_state29 = 221'd268435456;
parameter    ap_ST_fsm_state30 = 221'd536870912;
parameter    ap_ST_fsm_state31 = 221'd1073741824;
parameter    ap_ST_fsm_state32 = 221'd2147483648;
parameter    ap_ST_fsm_state33 = 221'd4294967296;
parameter    ap_ST_fsm_state34 = 221'd8589934592;
parameter    ap_ST_fsm_state35 = 221'd17179869184;
parameter    ap_ST_fsm_state36 = 221'd34359738368;
parameter    ap_ST_fsm_state37 = 221'd68719476736;
parameter    ap_ST_fsm_state38 = 221'd137438953472;
parameter    ap_ST_fsm_state39 = 221'd274877906944;
parameter    ap_ST_fsm_state40 = 221'd549755813888;
parameter    ap_ST_fsm_state41 = 221'd1099511627776;
parameter    ap_ST_fsm_state42 = 221'd2199023255552;
parameter    ap_ST_fsm_state43 = 221'd4398046511104;
parameter    ap_ST_fsm_state44 = 221'd8796093022208;
parameter    ap_ST_fsm_state45 = 221'd17592186044416;
parameter    ap_ST_fsm_state46 = 221'd35184372088832;
parameter    ap_ST_fsm_state47 = 221'd70368744177664;
parameter    ap_ST_fsm_state48 = 221'd140737488355328;
parameter    ap_ST_fsm_state49 = 221'd281474976710656;
parameter    ap_ST_fsm_state50 = 221'd562949953421312;
parameter    ap_ST_fsm_state51 = 221'd1125899906842624;
parameter    ap_ST_fsm_state52 = 221'd2251799813685248;
parameter    ap_ST_fsm_state53 = 221'd4503599627370496;
parameter    ap_ST_fsm_state54 = 221'd9007199254740992;
parameter    ap_ST_fsm_state55 = 221'd18014398509481984;
parameter    ap_ST_fsm_state56 = 221'd36028797018963968;
parameter    ap_ST_fsm_state57 = 221'd72057594037927936;
parameter    ap_ST_fsm_state58 = 221'd144115188075855872;
parameter    ap_ST_fsm_state59 = 221'd288230376151711744;
parameter    ap_ST_fsm_state60 = 221'd576460752303423488;
parameter    ap_ST_fsm_state61 = 221'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 221'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 221'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 221'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 221'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 221'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 221'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 221'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 221'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 221'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 221'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 221'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 221'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 221'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 221'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 221'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 221'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 221'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 221'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 221'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 221'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 221'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 221'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 221'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 221'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 221'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 221'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 221'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 221'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 221'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 221'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 221'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 221'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 221'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 221'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 221'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 221'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 221'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 221'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 221'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 221'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 221'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 221'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 221'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 221'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 221'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 221'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 221'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 221'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 221'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 221'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_pp0_stage0 = 221'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state115 = 221'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state116 = 221'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state117 = 221'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state118 = 221'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state119 = 221'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state120 = 221'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state121 = 221'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state122 = 221'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state123 = 221'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state124 = 221'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state125 = 221'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state126 = 221'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state127 = 221'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state128 = 221'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state129 = 221'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state130 = 221'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state131 = 221'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state132 = 221'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state133 = 221'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state134 = 221'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state135 = 221'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state136 = 221'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state137 = 221'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state138 = 221'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state139 = 221'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state140 = 221'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state141 = 221'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state142 = 221'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state143 = 221'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state144 = 221'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state145 = 221'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state146 = 221'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state147 = 221'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state148 = 221'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state149 = 221'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state150 = 221'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state151 = 221'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state152 = 221'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state153 = 221'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state154 = 221'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state155 = 221'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state156 = 221'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state157 = 221'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state158 = 221'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state159 = 221'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state160 = 221'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state161 = 221'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state162 = 221'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state163 = 221'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state164 = 221'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state165 = 221'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state166 = 221'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state167 = 221'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state168 = 221'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state169 = 221'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state170 = 221'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state171 = 221'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state172 = 221'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state173 = 221'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state174 = 221'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state175 = 221'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state176 = 221'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state177 = 221'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state178 = 221'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state179 = 221'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state180 = 221'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state181 = 221'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state182 = 221'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state183 = 221'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state184 = 221'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state185 = 221'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state186 = 221'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state187 = 221'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state188 = 221'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state189 = 221'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state190 = 221'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state191 = 221'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state192 = 221'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state193 = 221'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state194 = 221'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state195 = 221'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state196 = 221'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state197 = 221'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state198 = 221'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state199 = 221'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state200 = 221'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state201 = 221'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state202 = 221'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state203 = 221'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state204 = 221'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state205 = 221'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state206 = 221'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state207 = 221'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state208 = 221'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state209 = 221'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state210 = 221'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state211 = 221'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state212 = 221'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state213 = 221'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state214 = 221'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state215 = 221'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state216 = 221'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state217 = 221'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state218 = 221'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state219 = 221'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state220 = 221'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state221 = 221'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_pp1_stage0 = 221'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state225 = 221'd1684996666696914987166688442938726917102321526408785780068975640576;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_mm_video_AWVALID;
input   m_axi_mm_video_AWREADY;
output  [63:0] m_axi_mm_video_AWADDR;
output  [0:0] m_axi_mm_video_AWID;
output  [31:0] m_axi_mm_video_AWLEN;
output  [2:0] m_axi_mm_video_AWSIZE;
output  [1:0] m_axi_mm_video_AWBURST;
output  [1:0] m_axi_mm_video_AWLOCK;
output  [3:0] m_axi_mm_video_AWCACHE;
output  [2:0] m_axi_mm_video_AWPROT;
output  [3:0] m_axi_mm_video_AWQOS;
output  [3:0] m_axi_mm_video_AWREGION;
output  [0:0] m_axi_mm_video_AWUSER;
output   m_axi_mm_video_WVALID;
input   m_axi_mm_video_WREADY;
output  [127:0] m_axi_mm_video_WDATA;
output  [15:0] m_axi_mm_video_WSTRB;
output   m_axi_mm_video_WLAST;
output  [0:0] m_axi_mm_video_WID;
output  [0:0] m_axi_mm_video_WUSER;
output   m_axi_mm_video_ARVALID;
input   m_axi_mm_video_ARREADY;
output  [63:0] m_axi_mm_video_ARADDR;
output  [0:0] m_axi_mm_video_ARID;
output  [31:0] m_axi_mm_video_ARLEN;
output  [2:0] m_axi_mm_video_ARSIZE;
output  [1:0] m_axi_mm_video_ARBURST;
output  [1:0] m_axi_mm_video_ARLOCK;
output  [3:0] m_axi_mm_video_ARCACHE;
output  [2:0] m_axi_mm_video_ARPROT;
output  [3:0] m_axi_mm_video_ARQOS;
output  [3:0] m_axi_mm_video_ARREGION;
output  [0:0] m_axi_mm_video_ARUSER;
input   m_axi_mm_video_RVALID;
output   m_axi_mm_video_RREADY;
input  [127:0] m_axi_mm_video_RDATA;
input   m_axi_mm_video_RLAST;
input  [0:0] m_axi_mm_video_RID;
input  [0:0] m_axi_mm_video_RUSER;
input  [1:0] m_axi_mm_video_RRESP;
input   m_axi_mm_video_BVALID;
output   m_axi_mm_video_BREADY;
input  [1:0] m_axi_mm_video_BRESP;
input  [0:0] m_axi_mm_video_BID;
input  [0:0] m_axi_mm_video_BUSER;
output  [127:0] bytePlanes_01_din;
input   bytePlanes_01_full_n;
output   bytePlanes_01_write;
output  [127:0] bytePlanes_12_din;
input   bytePlanes_12_full_n;
output   bytePlanes_12_write;
input  [63:0] srcImg;
input  [63:0] srcImg2;
input  [11:0] p_read;
input  [14:0] p_read1;
input  [15:0] p_read2;
input  [5:0] p_read3;
input  [11:0] p_read4;
input  [1:0] p_read5;
output  [11:0] Height_out_din;
input   Height_out_full_n;
output   Height_out_write;
output  [14:0] WidthInBytes_out_din;
input   WidthInBytes_out_full_n;
output   WidthInBytes_out_write;
output  [5:0] VideoFormat_out_din;
input   VideoFormat_out_full_n;
output   VideoFormat_out_write;
output  [11:0] width_out_din;
input   width_out_full_n;
output   width_out_write;
output  [1:0] colorFormat_out_din;
input   colorFormat_out_full_n;
output   colorFormat_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_mm_video_ARVALID;
reg[63:0] m_axi_mm_video_ARADDR;
reg m_axi_mm_video_RREADY;
reg bytePlanes_01_write;
reg bytePlanes_12_write;
reg Height_out_write;
reg WidthInBytes_out_write;
reg VideoFormat_out_write;
reg width_out_write;
reg colorFormat_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [220:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    mm_video_blk_n_AR;
wire    ap_CS_fsm_state6;
reg    mm_video_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln406_reg_746;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln418_reg_779;
reg    bytePlanes_01_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln406_reg_746_pp0_iter1_reg;
reg    bytePlanes_12_blk_n;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln418_reg_779_pp1_iter1_reg;
reg    Height_out_blk_n;
reg    WidthInBytes_out_blk_n;
reg    VideoFormat_out_blk_n;
reg    width_out_blk_n;
reg    colorFormat_out_blk_n;
reg   [11:0] x_reg_303;
reg   [11:0] x_4_reg_314;
wire   [11:0] div_i_i_fu_338_p4;
reg   [11:0] div_i_i_reg_683;
wire   [31:0] div_cast2_i_i_fu_348_p1;
reg   [31:0] div_cast2_i_i_reg_689;
wire   [31:0] div5_cast3_i_i_fu_362_p1;
reg   [31:0] div5_cast3_i_i_reg_695;
wire   [0:0] cmp21_i_i_fu_370_p2;
reg   [0:0] cmp21_i_i_reg_700;
wire   [0:0] icmp_ln416_fu_392_p2;
reg   [0:0] icmp_ln416_reg_704;
wire   [23:0] zext_ln406_fu_398_p1;
reg   [23:0] zext_ln406_reg_708;
wire   [11:0] y_4_fu_407_p2;
reg   [11:0] y_4_reg_713;
wire    ap_CS_fsm_state2;
wire   [0:0] trunc_ln401_fu_413_p1;
reg   [0:0] trunc_ln401_reg_718;
wire   [0:0] icmp_ln401_fu_417_p2;
reg   [59:0] trunc_ln4_reg_730;
wire    ap_CS_fsm_state5;
wire   [11:0] add_ln406_1_fu_462_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state112_pp0_stage0_iter0;
reg    ap_block_state113_pp0_stage0_iter1;
reg    ap_block_state114_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln406_fu_468_p2;
reg   [127:0] fb_pix_reg_750;
wire   [0:0] empty_127_fu_527_p2;
reg   [0:0] empty_127_reg_755;
wire    ap_CS_fsm_state115;
wire   [0:0] empty_136_fu_576_p2;
reg   [0:0] empty_136_reg_759;
reg   [59:0] trunc_ln5_reg_763;
wire   [11:0] add_ln418_1_fu_619_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state222_pp1_stage0_iter0;
reg    ap_block_state223_pp1_stage0_iter1;
reg    ap_block_state224_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln418_fu_625_p2;
reg   [127:0] fb_pix_1_reg_783;
wire    ap_CS_fsm_state111;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state112;
wire    ap_CS_fsm_state221;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state222;
reg   [11:0] y_reg_292;
wire    ap_CS_fsm_state225;
reg    ap_block_state1;
wire  signed [63:0] sext_ln406_fu_452_p1;
wire  signed [63:0] sext_ln418_1_fu_609_p1;
reg   [31:0] offsetUV_fu_164;
wire   [31:0] offsetUV_1_fu_630_p2;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire   [15:0] WidthInBytes_load_cast_i_i_fu_328_p1;
wire   [15:0] sub_i_i_fu_332_p2;
wire   [11:0] div5_i_i_fu_352_p4;
wire   [6:0] VideoFormat_load_cast6_i_i_fu_366_p1;
wire   [6:0] add_ln416_fu_376_p2;
wire   [5:0] tmp_fu_382_p4;
wire   [23:0] grp_fu_640_p2;
wire   [27:0] shl_ln_fu_426_p3;
wire   [63:0] zext_ln406_2_fu_433_p1;
wire   [63:0] add_ln406_fu_437_p2;
wire   [0:0] empty_118_fu_478_p2;
wire   [0:0] empty_117_fu_473_p2;
wire   [0:0] empty_120_fu_489_p2;
wire   [0:0] empty_119_fu_483_p2;
wire   [0:0] empty_122_fu_500_p2;
wire   [0:0] empty_121_fu_494_p2;
wire   [0:0] empty_124_fu_511_p2;
wire   [0:0] empty_123_fu_505_p2;
wire   [0:0] empty_126_fu_522_p2;
wire   [0:0] empty_125_fu_516_p2;
wire   [0:0] empty_129_fu_538_p2;
wire   [0:0] empty_128_fu_533_p2;
wire   [0:0] empty_131_fu_549_p2;
wire   [0:0] empty_130_fu_543_p2;
wire   [0:0] empty_133_fu_560_p2;
wire   [0:0] empty_132_fu_554_p2;
wire   [0:0] empty_135_fu_571_p2;
wire   [0:0] empty_134_fu_565_p2;
wire   [35:0] shl_ln1_fu_582_p3;
wire  signed [63:0] sext_ln418_fu_590_p1;
wire   [63:0] add_ln418_fu_594_p2;
wire   [11:0] grp_fu_640_p0;
wire   [11:0] grp_fu_640_p1;
reg   [220:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [23:0] grp_fu_640_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 221'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

bd_v_frmbuf_rd_0_0_mul_mul_12ns_12ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
mul_mul_12ns_12ns_24_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_640_p0),
    .din1(grp_fu_640_p1),
    .ce(1'b1),
    .dout(grp_fu_640_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln401_fu_417_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state112) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state111)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state112)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state112);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state111)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state222) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state221)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state222)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state222);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state221)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((colorFormat_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (1'b0 == VideoFormat_out_full_n) | (1'b0 == WidthInBytes_out_full_n) | (1'b0 == Height_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        offsetUV_fu_164 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state225) & (((((empty_136_reg_759 == 1'd0) & (icmp_ln416_reg_704 == 1'd1)) | ((trunc_ln401_reg_718 == 1'd0) & (icmp_ln416_reg_704 == 1'd1))) | ((empty_136_reg_759 == 1'd0) & (empty_127_reg_755 == 1'd1))) | ((empty_127_reg_755 == 1'd1) & (trunc_ln401_reg_718 == 1'd0))))) begin
        offsetUV_fu_164 <= offsetUV_1_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state221)) begin
        x_4_reg_314 <= 12'd0;
    end else if (((icmp_ln418_fu_625_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        x_4_reg_314 <= add_ln418_1_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        x_reg_303 <= 12'd0;
    end else if (((icmp_ln406_fu_468_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_reg_303 <= add_ln406_1_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((colorFormat_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (1'b0 == VideoFormat_out_full_n) | (1'b0 == WidthInBytes_out_full_n) | (1'b0 == Height_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_292 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state225)) begin
        y_reg_292 <= y_4_reg_713;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cmp21_i_i_reg_700 <= cmp21_i_i_fu_370_p2;
        div5_cast3_i_i_reg_695[11 : 0] <= div5_cast3_i_i_fu_362_p1[11 : 0];
        div_cast2_i_i_reg_689[11 : 0] <= div_cast2_i_i_fu_348_p1[11 : 0];
        div_i_i_reg_683 <= {{sub_i_i_fu_332_p2[15:4]}};
        icmp_ln416_reg_704 <= icmp_ln416_fu_392_p2;
        zext_ln406_reg_708[11 : 0] <= zext_ln406_fu_398_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        empty_127_reg_755 <= empty_127_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state115) & (((empty_127_fu_527_p2 == 1'd1) & (trunc_ln401_reg_718 == 1'd1)) | ((trunc_ln401_reg_718 == 1'd1) & (icmp_ln416_reg_704 == 1'd1))))) begin
        empty_136_reg_759 <= empty_136_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln418_reg_779 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        fb_pix_1_reg_783 <= m_axi_mm_video_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln406_reg_746 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fb_pix_reg_750 <= m_axi_mm_video_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln406_reg_746 <= icmp_ln406_fu_468_p2;
        icmp_ln406_reg_746_pp0_iter1_reg <= icmp_ln406_reg_746;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln418_reg_779 <= icmp_ln418_fu_625_p2;
        icmp_ln418_reg_779_pp1_iter1_reg <= icmp_ln418_reg_779;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln401_reg_718 <= trunc_ln401_fu_413_p1;
        y_4_reg_713 <= y_4_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp21_i_i_reg_700 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        trunc_ln4_reg_730 <= {{add_ln406_fu_437_p2[63:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state115) & (((((trunc_ln401_reg_718 == 1'd0) & (icmp_ln416_reg_704 == 1'd1) & (cmp21_i_i_reg_700 == 1'd1)) | ((empty_136_fu_576_p2 == 1'd0) & (icmp_ln416_reg_704 == 1'd1) & (cmp21_i_i_reg_700 == 1'd1))) | ((empty_136_fu_576_p2 == 1'd0) & (empty_127_fu_527_p2 == 1'd1) & (cmp21_i_i_reg_700 == 1'd1))) | ((empty_127_fu_527_p2 == 1'd1) & (trunc_ln401_reg_718 == 1'd0) & (cmp21_i_i_reg_700 == 1'd1))))) begin
        trunc_ln5_reg_763 <= {{add_ln418_fu_594_p2[63:4]}};
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_out_blk_n = Height_out_full_n;
    end else begin
        Height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((colorFormat_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (1'b0 == VideoFormat_out_full_n) | (1'b0 == WidthInBytes_out_full_n) | (1'b0 == Height_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        Height_out_write = 1'b1;
    end else begin
        Height_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        VideoFormat_out_blk_n = VideoFormat_out_full_n;
    end else begin
        VideoFormat_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((colorFormat_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (1'b0 == VideoFormat_out_full_n) | (1'b0 == WidthInBytes_out_full_n) | (1'b0 == Height_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        VideoFormat_out_write = 1'b1;
    end else begin
        VideoFormat_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthInBytes_out_blk_n = WidthInBytes_out_full_n;
    end else begin
        WidthInBytes_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((colorFormat_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (1'b0 == VideoFormat_out_full_n) | (1'b0 == WidthInBytes_out_full_n) | (1'b0 == Height_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthInBytes_out_write = 1'b1;
    end else begin
        WidthInBytes_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln406_fu_468_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state112 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state112 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln418_fu_625_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state222 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state222 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln401_fu_417_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln406_reg_746_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bytePlanes_01_blk_n = bytePlanes_01_full_n;
    end else begin
        bytePlanes_01_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln406_reg_746_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bytePlanes_01_write = 1'b1;
    end else begin
        bytePlanes_01_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln418_reg_779_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        bytePlanes_12_blk_n = bytePlanes_12_full_n;
    end else begin
        bytePlanes_12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln418_reg_779_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        bytePlanes_12_write = 1'b1;
    end else begin
        bytePlanes_12_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        colorFormat_out_blk_n = colorFormat_out_full_n;
    end else begin
        colorFormat_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((colorFormat_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (1'b0 == VideoFormat_out_full_n) | (1'b0 == WidthInBytes_out_full_n) | (1'b0 == Height_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        colorFormat_out_write = 1'b1;
    end else begin
        colorFormat_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln401_fu_417_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_mm_video_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state116)) begin
            m_axi_mm_video_ARADDR = sext_ln418_1_fu_609_p1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            m_axi_mm_video_ARADDR = sext_ln406_fu_452_p1;
        end else begin
            m_axi_mm_video_ARADDR = 'bx;
        end
    end else begin
        m_axi_mm_video_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_mm_video_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state116)) | ((m_axi_mm_video_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        m_axi_mm_video_ARVALID = 1'b1;
    end else begin
        m_axi_mm_video_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln418_reg_779 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln406_reg_746 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axi_mm_video_RREADY = 1'b1;
    end else begin
        m_axi_mm_video_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state6))) begin
        mm_video_blk_n_AR = m_axi_mm_video_ARREADY;
    end else begin
        mm_video_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln418_reg_779 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln406_reg_746 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mm_video_blk_n_R = m_axi_mm_video_RVALID;
    end else begin
        mm_video_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_out_blk_n = width_out_full_n;
    end else begin
        width_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((colorFormat_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (1'b0 == VideoFormat_out_full_n) | (1'b0 == WidthInBytes_out_full_n) | (1'b0 == Height_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_out_write = 1'b1;
    end else begin
        width_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((colorFormat_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (1'b0 == VideoFormat_out_full_n) | (1'b0 == WidthInBytes_out_full_n) | (1'b0 == Height_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln401_fu_417_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((cmp21_i_i_reg_700 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((m_axi_mm_video_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln406_fu_468_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln406_fu_468_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state115 : begin
            if (((1'b1 == ap_CS_fsm_state115) & (((((trunc_ln401_reg_718 == 1'd0) & (icmp_ln416_reg_704 == 1'd1) & (cmp21_i_i_reg_700 == 1'd1)) | ((empty_136_fu_576_p2 == 1'd0) & (icmp_ln416_reg_704 == 1'd1) & (cmp21_i_i_reg_700 == 1'd1))) | ((empty_136_fu_576_p2 == 1'd0) & (empty_127_fu_527_p2 == 1'd1) & (cmp21_i_i_reg_700 == 1'd1))) | ((empty_127_fu_527_p2 == 1'd1) & (trunc_ln401_reg_718 == 1'd0) & (cmp21_i_i_reg_700 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state225;
            end
        end
        ap_ST_fsm_state116 : begin
            if (((m_axi_mm_video_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state116))) begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln418_fu_625_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln418_fu_625_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state225;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Height_out_din = p_read;

assign VideoFormat_load_cast6_i_i_fu_366_p1 = p_read3;

assign VideoFormat_out_din = p_read3;

assign WidthInBytes_load_cast_i_i_fu_328_p1 = p_read1;

assign WidthInBytes_out_din = p_read1;

assign add_ln406_1_fu_462_p2 = (x_reg_303 + 12'd1);

assign add_ln406_fu_437_p2 = (zext_ln406_2_fu_433_p1 + srcImg);

assign add_ln416_fu_376_p2 = ($signed(VideoFormat_load_cast6_i_i_fu_366_p1) + $signed(7'd91));

assign add_ln418_1_fu_619_p2 = (x_4_reg_314 + 12'd1);

assign add_ln418_fu_594_p2 = ($signed(sext_ln418_fu_590_p1) + $signed(srcImg2));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd219];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state221 = ap_CS_fsm[32'd218];

assign ap_CS_fsm_state225 = ap_CS_fsm[32'd220];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln406_reg_746_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (bytePlanes_01_full_n == 1'b0)) | ((icmp_ln406_reg_746 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_mm_video_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln406_reg_746_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (bytePlanes_01_full_n == 1'b0)) | ((icmp_ln406_reg_746 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_mm_video_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln406_reg_746_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (bytePlanes_01_full_n == 1'b0)) | ((icmp_ln406_reg_746 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_mm_video_RVALID == 1'b0)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln418_reg_779_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (bytePlanes_12_full_n == 1'b0)) | ((icmp_ln418_reg_779 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_mm_video_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln418_reg_779_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (bytePlanes_12_full_n == 1'b0)) | ((icmp_ln418_reg_779 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_mm_video_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln418_reg_779_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (bytePlanes_12_full_n == 1'b0)) | ((icmp_ln418_reg_779 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (m_axi_mm_video_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((colorFormat_out_full_n == 1'b0) | (width_out_full_n == 1'b0) | (1'b0 == VideoFormat_out_full_n) | (1'b0 == WidthInBytes_out_full_n) | (1'b0 == Height_out_full_n) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state112_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state113_pp0_stage0_iter1 = ((icmp_ln406_reg_746 == 1'd0) & (m_axi_mm_video_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state114_pp0_stage0_iter2 = ((icmp_ln406_reg_746_pp0_iter1_reg == 1'd0) & (bytePlanes_01_full_n == 1'b0));
end

assign ap_block_state222_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state223_pp1_stage0_iter1 = ((icmp_ln418_reg_779 == 1'd0) & (m_axi_mm_video_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state224_pp1_stage0_iter2 = ((icmp_ln418_reg_779_pp1_iter1_reg == 1'd0) & (bytePlanes_12_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bytePlanes_01_din = fb_pix_reg_750;

assign bytePlanes_12_din = fb_pix_1_reg_783;

assign cmp21_i_i_fu_370_p2 = ((div_i_i_fu_338_p4 != 12'd0) ? 1'b1 : 1'b0);

assign colorFormat_out_din = p_read5;

assign div5_cast3_i_i_fu_362_p1 = div5_i_i_fu_352_p4;

assign div5_i_i_fu_352_p4 = {{p_read2[15:4]}};

assign div_cast2_i_i_fu_348_p1 = div_i_i_fu_338_p4;

assign div_i_i_fu_338_p4 = {{sub_i_i_fu_332_p2[15:4]}};

assign empty_117_fu_473_p2 = ((p_read3 == 6'd33) ? 1'b1 : 1'b0);

assign empty_118_fu_478_p2 = ((p_read3 == 6'd32) ? 1'b1 : 1'b0);

assign empty_119_fu_483_p2 = (empty_118_fu_478_p2 | empty_117_fu_473_p2);

assign empty_120_fu_489_p2 = ((p_read3 == 6'd23) ? 1'b1 : 1'b0);

assign empty_121_fu_494_p2 = (empty_120_fu_489_p2 | empty_119_fu_483_p2);

assign empty_122_fu_500_p2 = ((p_read3 == 6'd22) ? 1'b1 : 1'b0);

assign empty_123_fu_505_p2 = (empty_122_fu_500_p2 | empty_121_fu_494_p2);

assign empty_124_fu_511_p2 = ((p_read3 == 6'd19) ? 1'b1 : 1'b0);

assign empty_125_fu_516_p2 = (empty_124_fu_511_p2 | empty_123_fu_505_p2);

assign empty_126_fu_522_p2 = ((p_read3 == 6'd18) ? 1'b1 : 1'b0);

assign empty_127_fu_527_p2 = (empty_126_fu_522_p2 | empty_125_fu_516_p2);

assign empty_128_fu_533_p2 = ((p_read3 == 6'd38) ? 1'b1 : 1'b0);

assign empty_129_fu_538_p2 = ((p_read3 == 6'd33) ? 1'b1 : 1'b0);

assign empty_130_fu_543_p2 = (empty_129_fu_538_p2 | empty_128_fu_533_p2);

assign empty_131_fu_549_p2 = ((p_read3 == 6'd23) ? 1'b1 : 1'b0);

assign empty_132_fu_554_p2 = (empty_131_fu_549_p2 | empty_130_fu_543_p2);

assign empty_133_fu_560_p2 = ((p_read3 == 6'd19) ? 1'b1 : 1'b0);

assign empty_134_fu_565_p2 = (empty_133_fu_560_p2 | empty_132_fu_554_p2);

assign empty_135_fu_571_p2 = ((p_read3 == 6'd3) ? 1'b1 : 1'b0);

assign empty_136_fu_576_p2 = (empty_135_fu_571_p2 | empty_134_fu_565_p2);

assign grp_fu_640_p0 = zext_ln406_reg_708;

assign grp_fu_640_p1 = grp_fu_640_p10;

assign grp_fu_640_p10 = y_reg_292;

assign icmp_ln401_fu_417_p2 = ((y_reg_292 == p_read) ? 1'b1 : 1'b0);

assign icmp_ln406_fu_468_p2 = ((x_reg_303 == div_i_i_reg_683) ? 1'b1 : 1'b0);

assign icmp_ln416_fu_392_p2 = ((tmp_fu_382_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln418_fu_625_p2 = ((x_4_reg_314 == div_i_i_reg_683) ? 1'b1 : 1'b0);

assign m_axi_mm_video_ARBURST = 2'd0;

assign m_axi_mm_video_ARCACHE = 4'd0;

assign m_axi_mm_video_ARID = 1'd0;

assign m_axi_mm_video_ARLEN = div_cast2_i_i_reg_689;

assign m_axi_mm_video_ARLOCK = 2'd0;

assign m_axi_mm_video_ARPROT = 3'd0;

assign m_axi_mm_video_ARQOS = 4'd0;

assign m_axi_mm_video_ARREGION = 4'd0;

assign m_axi_mm_video_ARSIZE = 3'd0;

assign m_axi_mm_video_ARUSER = 1'd0;

assign m_axi_mm_video_AWADDR = 64'd0;

assign m_axi_mm_video_AWBURST = 2'd0;

assign m_axi_mm_video_AWCACHE = 4'd0;

assign m_axi_mm_video_AWID = 1'd0;

assign m_axi_mm_video_AWLEN = 32'd0;

assign m_axi_mm_video_AWLOCK = 2'd0;

assign m_axi_mm_video_AWPROT = 3'd0;

assign m_axi_mm_video_AWQOS = 4'd0;

assign m_axi_mm_video_AWREGION = 4'd0;

assign m_axi_mm_video_AWSIZE = 3'd0;

assign m_axi_mm_video_AWUSER = 1'd0;

assign m_axi_mm_video_AWVALID = 1'b0;

assign m_axi_mm_video_BREADY = 1'b0;

assign m_axi_mm_video_WDATA = 128'd0;

assign m_axi_mm_video_WID = 1'd0;

assign m_axi_mm_video_WLAST = 1'b0;

assign m_axi_mm_video_WSTRB = 16'd0;

assign m_axi_mm_video_WUSER = 1'd0;

assign m_axi_mm_video_WVALID = 1'b0;

assign offsetUV_1_fu_630_p2 = (offsetUV_fu_164 + div5_cast3_i_i_reg_695);

assign sext_ln406_fu_452_p1 = $signed(trunc_ln4_reg_730);

assign sext_ln418_1_fu_609_p1 = $signed(trunc_ln5_reg_763);

assign sext_ln418_fu_590_p1 = $signed(shl_ln1_fu_582_p3);

assign shl_ln1_fu_582_p3 = {{offsetUV_fu_164}, {4'd0}};

assign shl_ln_fu_426_p3 = {{grp_fu_640_p2}, {4'd0}};

assign start_out = real_start;

assign sub_i_i_fu_332_p2 = (WidthInBytes_load_cast_i_i_fu_328_p1 + 16'd15);

assign tmp_fu_382_p4 = {{add_ln416_fu_376_p2[6:1]}};

assign trunc_ln401_fu_413_p1 = y_reg_292[0:0];

assign width_out_din = p_read4;

assign y_4_fu_407_p2 = (y_reg_292 + 12'd1);

assign zext_ln406_2_fu_433_p1 = shl_ln_fu_426_p3;

assign zext_ln406_fu_398_p1 = div5_i_i_fu_352_p4;

always @ (posedge ap_clk) begin
    div_cast2_i_i_reg_689[31:12] <= 20'b00000000000000000000;
    div5_cast3_i_i_reg_695[31:12] <= 20'b00000000000000000000;
    zext_ln406_reg_708[23:12] <= 12'b000000000000;
end

endmodule //bd_v_frmbuf_rd_0_0_AXIMMvideo2Bytes4
