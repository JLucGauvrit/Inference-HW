// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_mix_0_0_MultiPixStream2AXIvideo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out420_dout,
        out420_empty_n,
        out420_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        p_read_dout,
        p_read_empty_n,
        p_read_read,
        p_read1_dout,
        p_read1_empty_n,
        p_read1_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_pp0_stage0 = 6'd8;
parameter    ap_ST_fsm_state6 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] out420_dout;
input   out420_empty_n;
output   out420_read;
output  [47:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [5:0] m_axis_video_TKEEP;
output  [5:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [11:0] p_read_dout;
input   p_read_empty_n;
output   p_read_read;
input  [11:0] p_read1_dout;
input   p_read1_empty_n;
output   p_read1_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out420_read;
reg m_axis_video_TVALID;
reg p_read_read;
reg p_read1_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out420_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln3221_reg_369;
reg    m_axis_video_TDATA_blk_n;
reg    p_read_blk_n;
reg    p_read1_blk_n;
reg   [10:0] j_reg_172;
reg   [0:0] sof_3_reg_183;
wire   [11:0] grp_reg_unsigned_short_s_fu_195_ap_return;
reg   [11:0] rows_reg_331;
wire    ap_CS_fsm_state2;
wire   [10:0] div_i_i_fu_212_p4;
reg   [10:0] div_i_i_reg_336;
wire   [11:0] sub_i_i_fu_226_p2;
reg   [11:0] sub_i_i_reg_341;
wire   [0:0] cmp38149_i_i_fu_232_p2;
reg   [0:0] cmp38149_i_i_reg_346;
wire   [11:0] i_1_fu_238_p2;
reg   [11:0] i_1_reg_350;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln3219_fu_247_p2;
wire   [10:0] j_1_fu_252_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln3221_fu_262_p2;
wire   [0:0] icmp_ln3232_fu_267_p2;
reg   [0:0] icmp_ln3232_reg_373;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
wire   [11:0] grp_reg_unsigned_short_s_fu_201_ap_return;
reg   [11:0] i_reg_161;
wire    ap_CS_fsm_state6;
reg   [0:0] sof_fu_110;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire   [11:0] div_i_cast_i_fu_222_p1;
wire   [11:0] zext_ln3221_fu_258_p1;
wire   [7:0] trunc_ln145_4_i_fu_276_p4;
wire   [15:0] tmp_i_fu_286_p4;
wire   [7:0] trunc_ln145_fu_272_p1;
wire   [15:0] tmp_16_i_fu_296_p4;
wire    ap_CS_fsm_state7;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

bd_v_mix_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_195(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .d(p_read_dout),
    .ap_return(grp_reg_unsigned_short_s_fu_195_ap_return)
);

bd_v_mix_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_201(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .d(p_read1_dout),
    .ap_return(grp_reg_unsigned_short_s_fu_201_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((cmp38149_i_i_reg_346 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln3219_fu_247_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((cmp38149_i_i_reg_346 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln3219_fu_247_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_161 <= i_1_reg_350;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_161 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp38149_i_i_reg_346 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln3219_fu_247_p2 == 1'd0))) begin
        j_reg_172 <= 11'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln3221_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_reg_172 <= j_1_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp38149_i_i_reg_346 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln3219_fu_247_p2 == 1'd0))) begin
        sof_3_reg_183 <= sof_fu_110;
    end else if (((icmp_ln3221_reg_369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sof_3_reg_183 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sof_fu_110 <= 1'd1;
    end else if (((cmp38149_i_i_reg_346 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sof_fu_110 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cmp38149_i_i_reg_346 <= cmp38149_i_i_fu_232_p2;
        div_i_i_reg_336 <= {{grp_reg_unsigned_short_s_fu_201_ap_return[11:1]}};
        rows_reg_331 <= grp_reg_unsigned_short_s_fu_195_ap_return;
        sub_i_i_reg_341 <= sub_i_i_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_350 <= i_1_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln3221_reg_369 <= icmp_ln3221_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln3221_fu_262_p2 == 1'd0))) begin
        icmp_ln3232_reg_373 <= icmp_ln3232_fu_267_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln3221_fu_262_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln3221_reg_369 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln3221_reg_369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_TVALID = 1'b1;
    end else begin
        m_axis_video_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln3221_reg_369 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out420_blk_n = out420_empty_n;
    end else begin
        out420_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln3221_reg_369 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out420_read = 1'b1;
    end else begin
        out420_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_blk_n = p_read1_empty_n;
    end else begin
        p_read1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_read = 1'b1;
    end else begin
        p_read1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read_blk_n = p_read_empty_n;
    end else begin
        p_read_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read_read = 1'b1;
    end else begin
        p_read_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((cmp38149_i_i_reg_346 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln3219_fu_247_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((cmp38149_i_i_reg_346 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln3219_fu_247_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln3221_reg_369 == 1'd0) & (m_axis_video_TREADY == 1'b0)) | ((icmp_ln3221_reg_369 == 1'd0) & (out420_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((icmp_ln3221_reg_369 == 1'd0) & (m_axis_video_TREADY == 1'b0)) | ((icmp_ln3221_reg_369 == 1'd0) & (out420_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((icmp_ln3221_reg_369 == 1'd0) & (m_axis_video_TREADY == 1'b0)) | ((icmp_ln3221_reg_369 == 1'd0) & (out420_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((p_read1_empty_n == 1'b0) | (p_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((icmp_ln3221_reg_369 == 1'd0) & (m_axis_video_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (((icmp_ln3221_reg_369 == 1'd0) & (m_axis_video_TREADY == 1'b0)) | ((icmp_ln3221_reg_369 == 1'd0) & (out420_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cmp38149_i_i_fu_232_p2 = ((div_i_i_fu_212_p4 == 11'd0) ? 1'b1 : 1'b0);

assign div_i_cast_i_fu_222_p1 = div_i_i_fu_212_p4;

assign div_i_i_fu_212_p4 = {{grp_reg_unsigned_short_s_fu_201_ap_return[11:1]}};

assign i_1_fu_238_p2 = (i_reg_161 + 12'd1);

assign icmp_ln3219_fu_247_p2 = ((i_reg_161 == rows_reg_331) ? 1'b1 : 1'b0);

assign icmp_ln3221_fu_262_p2 = ((j_reg_172 == div_i_i_reg_336) ? 1'b1 : 1'b0);

assign icmp_ln3232_fu_267_p2 = ((zext_ln3221_fu_258_p1 == sub_i_i_reg_341) ? 1'b1 : 1'b0);

assign j_1_fu_252_p2 = (j_reg_172 + 11'd1);

assign m_axis_video_TDATA = {{{{trunc_ln145_4_i_fu_276_p4}, {tmp_i_fu_286_p4}}, {trunc_ln145_fu_272_p1}}, {tmp_16_i_fu_296_p4}};

assign m_axis_video_TDEST = 1'd0;

assign m_axis_video_TID = 1'd0;

assign m_axis_video_TKEEP = 6'd63;

assign m_axis_video_TLAST = icmp_ln3232_reg_373;

assign m_axis_video_TSTRB = 6'd0;

assign m_axis_video_TUSER = sof_3_reg_183;

assign sub_i_i_fu_226_p2 = ($signed(div_i_cast_i_fu_222_p1) + $signed(12'd4095));

assign tmp_16_i_fu_296_p4 = {{out420_dout[23:8]}};

assign tmp_i_fu_286_p4 = {{out420_dout[47:32]}};

assign trunc_ln145_4_i_fu_276_p4 = {{out420_dout[31:24]}};

assign trunc_ln145_fu_272_p1 = out420_dout[7:0];

assign zext_ln3221_fu_258_p1 = j_reg_172;

endmodule //bd_v_mix_0_0_MultiPixStream2AXIvideo
