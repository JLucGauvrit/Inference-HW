// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_c2dc_hsc_0_v_hcresampler_core15 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        srcImg_dout,
        srcImg_empty_n,
        srcImg_read,
        height,
        width,
        outImg_din,
        outImg_full_n,
        outImg_write,
        p_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] srcImg_dout;
input   srcImg_empty_n;
output   srcImg_read;
input  [15:0] height;
input  [15:0] width;
output  [47:0] outImg_din;
input   outImg_full_n;
output   outImg_write;
input   p_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg srcImg_read;
reg[47:0] outImg_din;
reg outImg_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    srcImg_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1448_reg_835;
reg   [0:0] icmp_ln1458_reg_839;
reg    outImg_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln1448_reg_835_pp0_iter1_reg;
reg   [0:0] tmp_1_reg_853;
reg   [0:0] tmp_1_reg_853_pp0_iter1_reg;
wire   [0:0] p_read_1_read_fu_170_p2;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_1_reg_853_pp0_iter2_reg;
reg   [14:0] x_reg_212;
wire   [15:0] select_ln1443_fu_223_p3;
reg   [15:0] select_ln1443_reg_806;
wire   [14:0] lshr_ln_fu_231_p4;
wire   [15:0] loopWidth_fu_245_p2;
reg   [15:0] loopWidth_reg_816;
wire   [14:0] y_1_fu_251_p2;
reg   [14:0] y_1_reg_821;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1445_fu_261_p2;
wire   [14:0] x_1_fu_266_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op63_read_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_predicate_op118_write_state5;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_predicate_op137_write_state6;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1448_fu_276_p2;
wire   [0:0] icmp_ln1458_fu_286_p2;
wire   [0:0] cmp119_fu_291_p2;
reg   [0:0] cmp119_reg_843;
reg   [0:0] cmp119_reg_843_pp0_iter1_reg;
wire   [7:0] outpix_val_V_1_fu_456_p3;
reg   [7:0] outpix_val_V_1_reg_857;
wire   [7:0] outpix_val_V_2_fu_463_p3;
reg   [7:0] outpix_val_V_2_reg_862;
reg   [7:0] outpix_val_V_4_reg_867;
reg   [7:0] outpix_val_V_5_reg_872;
reg   [7:0] pixbuf_y_val_V_2_0_02_load_reg_877;
reg   [7:0] pixbuf_y_val_V_3_0_03_load_reg_882;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter2_state5;
reg   [14:0] y_reg_201;
reg    ap_block_state1;
wire    ap_CS_fsm_state7;
reg   [7:0] mpix_y_val_V_0_fu_82;
wire   [7:0] inpix_val_V_0_fu_305_p1;
reg   [7:0] mpix_cb_val_V_0_fu_86;
reg   [7:0] inpix_val_V_2_1_fu_90;
reg   [7:0] mpix_y_val_V_1_fu_94;
reg   [7:0] mpix_cr_val_V_0_fu_98;
reg   [7:0] inpix_val_V_5_1_fu_102;
reg   [7:0] pixbuf_cr_val_V_4_0_0_fu_106;
reg   [7:0] pixbuf_cr_val_V_3_0_0_fu_110;
wire   [7:0] select_ln1539_5_fu_477_p3;
reg   [7:0] pixbuf_cr_val_V_2_0_0_fu_114;
wire   [7:0] select_ln1539_4_fu_470_p3;
reg   [7:0] mpix_y_val_V_0_3_fu_118;
reg   [7:0] mpix_y_val_V_1_3_fu_122;
reg   [7:0] mpix_cb_val_V_0_1_fu_126;
reg   [7:0] mpix_cr_val_V_0_1_fu_130;
reg   [7:0] pixbuf_cb_val_V_2_0_0_fu_134;
wire   [7:0] select_ln1539_1_fu_449_p3;
reg   [7:0] pixbuf_cb_val_V_3_0_0_fu_138;
wire   [7:0] select_ln1539_fu_442_p3;
reg   [7:0] mpix_cb_val_V_0_2_fu_142;
reg   [7:0] mpix_y_val_V_1_4_fu_146;
reg   [7:0] pixbuf_y_val_V_2_0_02_fu_150;
reg   [7:0] pixbuf_y_val_V_3_0_03_fu_154;
reg   [7:0] pixbuf_y_val_V_4_0_04_fu_158;
reg   [7:0] mpix_y_val_V_1_5_fu_162;
reg   [7:0] mpix_y_val_V_0_4_fu_166;
wire   [47:0] or_ln174_s_fu_568_p7;
reg    ap_block_pp0_stage0_01001;
wire   [47:0] or_ln174_1_fu_654_p7;
wire   [0:0] select_ln1443_fu_223_p0;
wire   [15:0] zext_ln1443_fu_241_p1;
wire   [15:0] zext_ln1445_fu_257_p1;
wire   [15:0] zext_ln1448_fu_272_p1;
wire   [15:0] out_x_fu_281_p2;
wire   [8:0] conv_i8_i115_fu_488_p1;
wire   [8:0] tmp_fu_492_p2;
wire   [8:0] conv_i_i112_fu_484_p1;
wire   [8:0] add_i_i104_fu_498_p2;
wire   [8:0] conv_i8_i_fu_518_p1;
wire   [8:0] tmp1_fu_522_p2;
wire   [8:0] conv_i_i75_fu_514_p1;
wire   [8:0] add_i_i_fu_528_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_261_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_261_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_261_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter2_state5)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_261_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1448_fu_276_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_reg_212 <= x_1_fu_266_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_261_p2 == 1'd1))) begin
        x_reg_212 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_reg_201 <= y_1_reg_821;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_201 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1448_fu_276_p2 == 1'd1))) begin
        cmp119_reg_843 <= cmp119_fu_291_p2;
        icmp_ln1458_reg_839 <= icmp_ln1458_fu_286_p2;
        tmp_1_reg_853 <= out_x_fu_281_p2[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmp119_reg_843_pp0_iter1_reg <= cmp119_reg_843;
        icmp_ln1448_reg_835 <= icmp_ln1448_fu_276_p2;
        icmp_ln1448_reg_835_pp0_iter1_reg <= icmp_ln1448_reg_835;
        tmp_1_reg_853_pp0_iter1_reg <= tmp_1_reg_853;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1458_reg_839 == 1'd1) & (icmp_ln1448_reg_835 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inpix_val_V_2_1_fu_90 <= {{srcImg_dout[23:16]}};
        inpix_val_V_5_1_fu_102 <= {{srcImg_dout[47:40]}};
        mpix_cb_val_V_0_1_fu_126 <= {{srcImg_dout[15:8]}};
        mpix_cb_val_V_0_fu_86 <= {{srcImg_dout[15:8]}};
        mpix_cr_val_V_0_1_fu_130 <= {{srcImg_dout[39:32]}};
        mpix_cr_val_V_0_fu_98 <= {{srcImg_dout[39:32]}};
        mpix_y_val_V_0_3_fu_118 <= inpix_val_V_0_fu_305_p1;
        mpix_y_val_V_0_fu_82 <= inpix_val_V_0_fu_305_p1;
        mpix_y_val_V_1_3_fu_122 <= {{srcImg_dout[31:24]}};
        mpix_y_val_V_1_fu_94 <= {{srcImg_dout[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        loopWidth_reg_816 <= loopWidth_fu_245_p2;
        select_ln1443_reg_806[1 : 0] <= select_ln1443_fu_223_p3[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1448_reg_835_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mpix_cb_val_V_0_2_fu_142 <= mpix_cb_val_V_0_1_fu_126;
        mpix_y_val_V_0_4_fu_166 <= mpix_y_val_V_0_3_fu_118;
        mpix_y_val_V_1_4_fu_146 <= mpix_y_val_V_1_3_fu_122;
        mpix_y_val_V_1_5_fu_162 <= mpix_y_val_V_1_4_fu_146;
        pixbuf_cb_val_V_2_0_0_fu_134 <= select_ln1539_1_fu_449_p3;
        pixbuf_cb_val_V_3_0_0_fu_138 <= select_ln1539_fu_442_p3;
        pixbuf_cr_val_V_2_0_0_fu_114 <= select_ln1539_4_fu_470_p3;
        pixbuf_cr_val_V_3_0_0_fu_110 <= select_ln1539_5_fu_477_p3;
        pixbuf_cr_val_V_4_0_0_fu_106 <= mpix_cr_val_V_0_1_fu_130;
        pixbuf_y_val_V_2_0_02_fu_150 <= pixbuf_y_val_V_4_0_04_fu_158;
        pixbuf_y_val_V_3_0_03_fu_154 <= mpix_y_val_V_1_5_fu_162;
        pixbuf_y_val_V_4_0_04_fu_158 <= mpix_y_val_V_0_4_fu_166;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1448_reg_835_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        outpix_val_V_1_reg_857 <= outpix_val_V_1_fu_456_p3;
        outpix_val_V_2_reg_862 <= outpix_val_V_2_fu_463_p3;
        outpix_val_V_4_reg_867 <= {{add_i_i104_fu_498_p2[8:1]}};
        outpix_val_V_5_reg_872 <= {{add_i_i_fu_528_p2[8:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((p_read_1_read_fu_170_p2 == 1'd0) & (tmp_1_reg_853_pp0_iter1_reg == 1'd0) & (icmp_ln1448_reg_835_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pixbuf_y_val_V_2_0_02_load_reg_877 <= pixbuf_y_val_V_2_0_02_fu_150;
        pixbuf_y_val_V_3_0_03_load_reg_882 <= pixbuf_y_val_V_3_0_03_fu_154;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_1_reg_853_pp0_iter2_reg <= tmp_1_reg_853_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_1_reg_821 <= y_1_fu_251_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1448_fu_276_p2 == 1'd0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_261_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_261_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_1_reg_853_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (p_read_1_read_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((p_read_1_read_fu_170_p2 == 1'd1) & (tmp_1_reg_853_pp0_iter1_reg == 1'd0) & (icmp_ln1448_reg_835_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        outImg_blk_n = outImg_full_n;
    end else begin
        outImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_01001)) begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op137_write_state6 == 1'b1))) begin
            outImg_din = or_ln174_1_fu_654_p7;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op118_write_state5 == 1'b1))) begin
            outImg_din = or_ln174_s_fu_568_p7;
        end else begin
            outImg_din = 'bx;
        end
    end else begin
        outImg_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op137_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op118_write_state5 == 1'b1)))) begin
        outImg_write = 1'b1;
    end else begin
        outImg_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1458_reg_839 == 1'd1) & (icmp_ln1448_reg_835 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_blk_n = srcImg_empty_n;
    end else begin
        srcImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op63_read_state4 == 1'b1))) begin
        srcImg_read = 1'b1;
    end else begin
        srcImg_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln1445_fu_261_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_i_i104_fu_498_p2 = (tmp_fu_492_p2 + conv_i_i112_fu_484_p1);

assign add_i_i_fu_528_p2 = (tmp1_fu_522_p2 + conv_i_i75_fu_514_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op137_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op118_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op63_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op137_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op118_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op63_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op137_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (outImg_full_n == 1'b0) & (ap_predicate_op118_write_state5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (srcImg_empty_n == 1'b0) & (ap_predicate_op63_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((srcImg_empty_n == 1'b0) & (ap_predicate_op63_read_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((outImg_full_n == 1'b0) & (ap_predicate_op118_write_state5 == 1'b1));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((outImg_full_n == 1'b0) & (ap_predicate_op137_write_state6 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op118_write_state5 = ((p_read_1_read_fu_170_p2 == 1'd1) & (tmp_1_reg_853_pp0_iter1_reg == 1'd0) & (icmp_ln1448_reg_835_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op137_write_state6 = ((tmp_1_reg_853_pp0_iter2_reg == 1'd0) & (p_read_1_read_fu_170_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op63_read_state4 = ((icmp_ln1458_reg_839 == 1'd1) & (icmp_ln1448_reg_835 == 1'd1));
end

assign cmp119_fu_291_p2 = ((x_reg_212 == 15'd0) ? 1'b1 : 1'b0);

assign conv_i8_i115_fu_488_p1 = outpix_val_V_1_fu_456_p3;

assign conv_i8_i_fu_518_p1 = outpix_val_V_2_fu_463_p3;

assign conv_i_i112_fu_484_p1 = select_ln1539_1_fu_449_p3;

assign conv_i_i75_fu_514_p1 = select_ln1539_4_fu_470_p3;

assign icmp_ln1445_fu_261_p2 = (($signed(zext_ln1445_fu_257_p1) < $signed(height)) ? 1'b1 : 1'b0);

assign icmp_ln1448_fu_276_p2 = (($signed(zext_ln1448_fu_272_p1) < $signed(loopWidth_reg_816)) ? 1'b1 : 1'b0);

assign icmp_ln1458_fu_286_p2 = ((x_reg_212 < lshr_ln_fu_231_p4) ? 1'b1 : 1'b0);

assign inpix_val_V_0_fu_305_p1 = srcImg_dout[7:0];

assign loopWidth_fu_245_p2 = (zext_ln1443_fu_241_p1 + select_ln1443_fu_223_p3);

assign lshr_ln_fu_231_p4 = {{width[15:1]}};

assign or_ln174_1_fu_654_p7 = {{{{{{outpix_val_V_5_reg_872}, {outpix_val_V_4_reg_867}}, {pixbuf_y_val_V_3_0_03_load_reg_882}}, {outpix_val_V_2_reg_862}}, {outpix_val_V_1_reg_857}}, {pixbuf_y_val_V_2_0_02_load_reg_877}};

assign or_ln174_s_fu_568_p7 = {{{{{{inpix_val_V_5_1_fu_102}, {mpix_cr_val_V_0_fu_98}}, {mpix_y_val_V_1_fu_94}}, {inpix_val_V_2_1_fu_90}}, {mpix_cb_val_V_0_fu_86}}, {mpix_y_val_V_0_fu_82}};

assign out_x_fu_281_p2 = (zext_ln1448_fu_272_p1 - select_ln1443_reg_806);

assign outpix_val_V_1_fu_456_p3 = ((cmp119_reg_843_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_1_fu_126 : pixbuf_cb_val_V_2_0_0_fu_134);

assign outpix_val_V_2_fu_463_p3 = ((cmp119_reg_843_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_1_fu_130 : pixbuf_cr_val_V_2_0_0_fu_114);

assign p_read_1_read_fu_170_p2 = p_read;

assign select_ln1443_fu_223_p0 = p_read;

assign select_ln1443_fu_223_p3 = ((select_ln1443_fu_223_p0[0:0] == 1'b1) ? 16'd0 : 16'd3);

assign select_ln1539_1_fu_449_p3 = ((cmp119_reg_843_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_1_fu_126 : pixbuf_cb_val_V_3_0_0_fu_138);

assign select_ln1539_4_fu_470_p3 = ((cmp119_reg_843_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_1_fu_130 : pixbuf_cr_val_V_3_0_0_fu_110);

assign select_ln1539_5_fu_477_p3 = ((cmp119_reg_843_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cr_val_V_0_1_fu_130 : pixbuf_cr_val_V_4_0_0_fu_106);

assign select_ln1539_fu_442_p3 = ((cmp119_reg_843_pp0_iter1_reg[0:0] == 1'b1) ? mpix_cb_val_V_0_1_fu_126 : mpix_cb_val_V_0_2_fu_142);

assign tmp1_fu_522_p2 = (conv_i8_i_fu_518_p1 + 9'd1);

assign tmp_fu_492_p2 = (conv_i8_i115_fu_488_p1 + 9'd1);

assign x_1_fu_266_p2 = (x_reg_212 + 15'd1);

assign y_1_fu_251_p2 = (y_reg_201 + 15'd1);

assign zext_ln1443_fu_241_p1 = lshr_ln_fu_231_p4;

assign zext_ln1445_fu_257_p1 = y_reg_201;

assign zext_ln1448_fu_272_p1 = x_reg_212;

always @ (posedge ap_clk) begin
    select_ln1443_reg_806[15:2] <= 14'b00000000000000;
end

endmodule //bd_c2dc_hsc_0_v_hcresampler_core15
