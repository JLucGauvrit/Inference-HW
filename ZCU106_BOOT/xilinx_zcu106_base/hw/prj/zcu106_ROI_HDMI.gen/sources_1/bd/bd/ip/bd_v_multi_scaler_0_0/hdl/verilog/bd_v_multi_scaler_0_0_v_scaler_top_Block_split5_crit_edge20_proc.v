// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_multi_scaler_0_0_v_scaler_top_Block_split5_crit_edge20_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        WidthOut_dout,
        WidthOut_empty_n,
        WidthOut_read,
        mul_ln940_loc_out_din,
        mul_ln940_loc_out_full_n,
        mul_ln940_loc_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [2:0] p_read;
input  [15:0] WidthOut_dout;
input   WidthOut_empty_n;
output   WidthOut_read;
output  [15:0] mul_ln940_loc_out_din;
input   mul_ln940_loc_out_full_n;
output   mul_ln940_loc_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg WidthOut_read;
reg mul_ln940_loc_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    WidthOut_blk_n;
reg    mul_ln940_loc_out_blk_n;
wire    ap_CS_fsm_state3;
reg  signed [15:0] WidthOut_read_reg_54;
wire   [15:0] mul_ln940_fu_49_p2;
reg   [15:0] mul_ln940_reg_59;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
wire   [2:0] mul_ln940_fu_49_p1;
reg   [2:0] ap_NS_fsm;
wire   [15:0] mul_ln940_fu_49_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

bd_v_multi_scaler_0_0_mul_16s_3ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mul_16s_3ns_16_1_1_U297(
    .din0(WidthOut_read_reg_54),
    .din1(mul_ln940_fu_49_p1),
    .dout(mul_ln940_fu_49_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((mul_ln940_loc_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        WidthOut_read_reg_54 <= WidthOut_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul_ln940_reg_59 <= mul_ln940_fu_49_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthOut_blk_n = WidthOut_empty_n;
    end else begin
        WidthOut_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == WidthOut_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        WidthOut_read = 1'b1;
    end else begin
        WidthOut_read = 1'b0;
    end
end

always @ (*) begin
    if (((mul_ln940_loc_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((mul_ln940_loc_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln940_loc_out_blk_n = mul_ln940_loc_out_full_n;
    end else begin
        mul_ln940_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((mul_ln940_loc_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        mul_ln940_loc_out_write = 1'b1;
    end else begin
        mul_ln940_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == WidthOut_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((mul_ln940_loc_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == WidthOut_empty_n) | (ap_done_reg == 1'b1));
end

assign mul_ln940_fu_49_p1 = mul_ln940_fu_49_p10;

assign mul_ln940_fu_49_p10 = p_read;

assign mul_ln940_loc_out_din = mul_ln940_reg_59;

endmodule //bd_v_multi_scaler_0_0_v_scaler_top_Block_split5_crit_edge20_proc
