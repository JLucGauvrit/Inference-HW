// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_mix_0_0_VMixHlsDataFlowFunction_Block_split730_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        HwReg_layerWidth15_dout,
        HwReg_layerWidth15_empty_n,
        HwReg_layerWidth15_read,
        HwReg_layerHeight18_dout,
        HwReg_layerHeight18_empty_n,
        HwReg_layerHeight18_read,
        HwReg_layerWidth15_load_out_out_din,
        HwReg_layerWidth15_load_out_out_full_n,
        HwReg_layerWidth15_load_out_out_write,
        HwReg_layerWidth15_load_cast_out_out_din,
        HwReg_layerWidth15_load_cast_out_out_full_n,
        HwReg_layerWidth15_load_cast_out_out_write,
        HwReg_layerWidth15_load_cast_out_out1_din,
        HwReg_layerWidth15_load_cast_out_out1_full_n,
        HwReg_layerWidth15_load_cast_out_out1_write,
        HwReg_layerHeight18_load_out_out_din,
        HwReg_layerHeight18_load_out_out_full_n,
        HwReg_layerHeight18_load_out_out_write,
        HwReg_layerHeight18_load_cast_out_out_din,
        HwReg_layerHeight18_load_cast_out_out_full_n,
        HwReg_layerHeight18_load_cast_out_out_write,
        HwReg_layerHeight18_load_cast_out_out2_din,
        HwReg_layerHeight18_load_cast_out_out2_full_n,
        HwReg_layerHeight18_load_cast_out_out2_write,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] HwReg_layerWidth15_dout;
input   HwReg_layerWidth15_empty_n;
output   HwReg_layerWidth15_read;
input  [15:0] HwReg_layerHeight18_dout;
input   HwReg_layerHeight18_empty_n;
output   HwReg_layerHeight18_read;
output  [15:0] HwReg_layerWidth15_load_out_out_din;
input   HwReg_layerWidth15_load_out_out_full_n;
output   HwReg_layerWidth15_load_out_out_write;
output  [11:0] HwReg_layerWidth15_load_cast_out_out_din;
input   HwReg_layerWidth15_load_cast_out_out_full_n;
output   HwReg_layerWidth15_load_cast_out_out_write;
output  [11:0] HwReg_layerWidth15_load_cast_out_out1_din;
input   HwReg_layerWidth15_load_cast_out_out1_full_n;
output   HwReg_layerWidth15_load_cast_out_out1_write;
output  [15:0] HwReg_layerHeight18_load_out_out_din;
input   HwReg_layerHeight18_load_out_out_full_n;
output   HwReg_layerHeight18_load_out_out_write;
output  [11:0] HwReg_layerHeight18_load_cast_out_out_din;
input   HwReg_layerHeight18_load_cast_out_out_full_n;
output   HwReg_layerHeight18_load_cast_out_out_write;
output  [11:0] HwReg_layerHeight18_load_cast_out_out2_din;
input   HwReg_layerHeight18_load_cast_out_out2_full_n;
output   HwReg_layerHeight18_load_cast_out_out2_write;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg start_write;
reg HwReg_layerWidth15_read;
reg HwReg_layerHeight18_read;
reg HwReg_layerWidth15_load_out_out_write;
reg HwReg_layerWidth15_load_cast_out_out_write;
reg HwReg_layerWidth15_load_cast_out_out1_write;
reg HwReg_layerHeight18_load_out_out_write;
reg HwReg_layerHeight18_load_cast_out_out_write;
reg HwReg_layerHeight18_load_cast_out_out2_write;
reg[15:0] ap_return;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    HwReg_layerWidth15_blk_n;
reg    HwReg_layerHeight18_blk_n;
reg    HwReg_layerWidth15_load_out_out_blk_n;
reg    HwReg_layerWidth15_load_cast_out_out_blk_n;
reg    HwReg_layerWidth15_load_cast_out_out1_blk_n;
reg    HwReg_layerHeight18_load_out_out_blk_n;
reg    HwReg_layerHeight18_load_cast_out_out_blk_n;
reg    HwReg_layerHeight18_load_cast_out_out2_blk_n;
reg    ap_block_state1;
wire   [11:0] trunc_ln804_fu_94_p1;
wire   [11:0] trunc_ln805_fu_106_p1;
wire   [15:0] layer3WidthInBytes_fu_100_p2;
reg   [15:0] ap_return_preg;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_preg[2] <= 1'b0;
        ap_return_preg[3] <= 1'b0;
        ap_return_preg[4] <= 1'b0;
        ap_return_preg[5] <= 1'b0;
        ap_return_preg[6] <= 1'b0;
        ap_return_preg[7] <= 1'b0;
        ap_return_preg[8] <= 1'b0;
        ap_return_preg[9] <= 1'b0;
        ap_return_preg[10] <= 1'b0;
        ap_return_preg[11] <= 1'b0;
        ap_return_preg[12] <= 1'b0;
        ap_return_preg[13] <= 1'b0;
        ap_return_preg[14] <= 1'b0;
        ap_return_preg[15] <= 1'b0;
    end else begin
        if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_preg[15 : 2] <= layer3WidthInBytes_fu_100_p2[15 : 2];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_blk_n = HwReg_layerHeight18_empty_n;
    end else begin
        HwReg_layerHeight18_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_cast_out_out2_blk_n = HwReg_layerHeight18_load_cast_out_out2_full_n;
    end else begin
        HwReg_layerHeight18_load_cast_out_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_cast_out_out2_write = 1'b1;
    end else begin
        HwReg_layerHeight18_load_cast_out_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_cast_out_out_blk_n = HwReg_layerHeight18_load_cast_out_out_full_n;
    end else begin
        HwReg_layerHeight18_load_cast_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_cast_out_out_write = 1'b1;
    end else begin
        HwReg_layerHeight18_load_cast_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_out_out_blk_n = HwReg_layerHeight18_load_out_out_full_n;
    end else begin
        HwReg_layerHeight18_load_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_out_out_write = 1'b1;
    end else begin
        HwReg_layerHeight18_load_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_read = 1'b1;
    end else begin
        HwReg_layerHeight18_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_blk_n = HwReg_layerWidth15_empty_n;
    end else begin
        HwReg_layerWidth15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_cast_out_out1_blk_n = HwReg_layerWidth15_load_cast_out_out1_full_n;
    end else begin
        HwReg_layerWidth15_load_cast_out_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_cast_out_out1_write = 1'b1;
    end else begin
        HwReg_layerWidth15_load_cast_out_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_cast_out_out_blk_n = HwReg_layerWidth15_load_cast_out_out_full_n;
    end else begin
        HwReg_layerWidth15_load_cast_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_cast_out_out_write = 1'b1;
    end else begin
        HwReg_layerWidth15_load_cast_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_out_out_blk_n = HwReg_layerWidth15_load_out_out_full_n;
    end else begin
        HwReg_layerWidth15_load_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_load_out_out_write = 1'b1;
    end else begin
        HwReg_layerWidth15_load_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth15_read = 1'b1;
    end else begin
        HwReg_layerWidth15_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return = layer3WidthInBytes_fu_100_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_layerHeight18_load_cast_out_out2_din = trunc_ln805_fu_106_p1;

assign HwReg_layerHeight18_load_cast_out_out_din = trunc_ln805_fu_106_p1;

assign HwReg_layerHeight18_load_out_out_din = HwReg_layerHeight18_dout;

assign HwReg_layerWidth15_load_cast_out_out1_din = trunc_ln804_fu_94_p1;

assign HwReg_layerWidth15_load_cast_out_out_din = trunc_ln804_fu_94_p1;

assign HwReg_layerWidth15_load_out_out_din = HwReg_layerWidth15_dout;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (1'b0 == HwReg_layerHeight18_load_cast_out_out2_full_n) | (1'b0 == HwReg_layerHeight18_load_cast_out_out_full_n) | (1'b0 == HwReg_layerHeight18_load_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out1_full_n) | (1'b0 == HwReg_layerWidth15_load_cast_out_out_full_n) | (1'b0 == HwReg_layerWidth15_load_out_out_full_n) | (1'b0 == HwReg_layerHeight18_empty_n) | (1'b0 == HwReg_layerWidth15_empty_n) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign layer3WidthInBytes_fu_100_p2 = HwReg_layerWidth15_dout << 16'd2;

assign start_out = real_start;

assign trunc_ln804_fu_94_p1 = HwReg_layerWidth15_dout[11:0];

assign trunc_ln805_fu_106_p1 = HwReg_layerHeight18_dout[11:0];

always @ (posedge ap_clk) begin
    ap_return_preg[1:0] <= 2'b00;
end

endmodule //bd_v_mix_0_0_VMixHlsDataFlowFunction_Block_split730_proc
