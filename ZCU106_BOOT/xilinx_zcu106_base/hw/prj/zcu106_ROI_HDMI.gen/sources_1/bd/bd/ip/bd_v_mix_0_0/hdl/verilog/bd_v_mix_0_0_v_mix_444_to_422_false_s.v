// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_mix_0_0_v_mix_444_to_422_false_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        srcImg_dout,
        srcImg_empty_n,
        srcImg_read,
        outImg_din,
        outImg_full_n,
        outImg_write,
        height_read_dout,
        height_read_empty_n,
        height_read_read,
        width_read_dout,
        width_read_empty_n,
        width_read_read,
        height_read_out_din,
        height_read_out_full_n,
        height_read_out_write,
        width_read_out_din,
        width_read_out_full_n,
        width_read_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [47:0] srcImg_dout;
input   srcImg_empty_n;
output   srcImg_read;
output  [47:0] outImg_din;
input   outImg_full_n;
output   outImg_write;
input  [11:0] height_read_dout;
input   height_read_empty_n;
output   height_read_read;
input  [11:0] width_read_dout;
input   width_read_empty_n;
output   width_read_read;
output  [11:0] height_read_out_din;
input   height_read_out_full_n;
output   height_read_out_write;
output  [11:0] width_read_out_din;
input   width_read_out_full_n;
output   width_read_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg srcImg_read;
reg outImg_write;
reg height_read_read;
reg width_read_read;
reg height_read_out_write;
reg width_read_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    srcImg_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln673_reg_190;
reg    outImg_blk_n;
reg    height_read_blk_n;
reg    width_read_blk_n;
reg    height_read_out_blk_n;
reg    width_read_out_blk_n;
reg   [10:0] x_reg_123;
reg   [11:0] height_read_2_reg_166;
reg   [10:0] div_cast_i_reg_171;
wire   [11:0] y_13_fu_144_p2;
reg   [11:0] y_13_reg_176;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln671_fu_150_p2;
wire   [10:0] x_13_fu_155_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln673_fu_161_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [11:0] y_reg_112;
wire    ap_CS_fsm_state5;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_150_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_150_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_150_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln673_fu_161_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_reg_123 <= x_13_fu_155_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_150_p2 == 1'd0))) begin
        x_reg_123 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((width_read_out_full_n == 1'b0) | (height_read_out_full_n == 1'b0) | (width_read_empty_n == 1'b0) | (height_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_112 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        y_reg_112 <= y_13_reg_176;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        div_cast_i_reg_171 <= {{width_read_dout[11:1]}};
        height_read_2_reg_166 <= height_read_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln673_reg_190 <= icmp_ln673_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_13_reg_176 <= y_13_fu_144_p2;
    end
end

always @ (*) begin
    if ((icmp_ln673_fu_161_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_150_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read_blk_n = height_read_empty_n;
    end else begin
        height_read_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read_out_blk_n = height_read_out_full_n;
    end else begin
        height_read_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((width_read_out_full_n == 1'b0) | (height_read_out_full_n == 1'b0) | (width_read_empty_n == 1'b0) | (height_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read_out_write = 1'b1;
    end else begin
        height_read_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((width_read_out_full_n == 1'b0) | (height_read_out_full_n == 1'b0) | (width_read_empty_n == 1'b0) | (height_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read_read = 1'b1;
    end else begin
        height_read_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_150_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln673_reg_190 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outImg_blk_n = outImg_full_n;
    end else begin
        outImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln673_reg_190 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outImg_write = 1'b1;
    end else begin
        outImg_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln673_reg_190 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_blk_n = srcImg_empty_n;
    end else begin
        srcImg_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln673_reg_190 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        srcImg_read = 1'b1;
    end else begin
        srcImg_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read_blk_n = width_read_empty_n;
    end else begin
        width_read_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read_out_blk_n = width_read_out_full_n;
    end else begin
        width_read_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((width_read_out_full_n == 1'b0) | (height_read_out_full_n == 1'b0) | (width_read_empty_n == 1'b0) | (height_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read_out_write = 1'b1;
    end else begin
        width_read_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((width_read_out_full_n == 1'b0) | (height_read_out_full_n == 1'b0) | (width_read_empty_n == 1'b0) | (height_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read_read = 1'b1;
    end else begin
        width_read_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((width_read_out_full_n == 1'b0) | (height_read_out_full_n == 1'b0) | (width_read_empty_n == 1'b0) | (height_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_150_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln673_fu_161_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln673_fu_161_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln673_reg_190 == 1'd0) & (outImg_full_n == 1'b0)) | ((icmp_ln673_reg_190 == 1'd0) & (srcImg_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln673_reg_190 == 1'd0) & (outImg_full_n == 1'b0)) | ((icmp_ln673_reg_190 == 1'd0) & (srcImg_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln673_reg_190 == 1'd0) & (outImg_full_n == 1'b0)) | ((icmp_ln673_reg_190 == 1'd0) & (srcImg_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((width_read_out_full_n == 1'b0) | (height_read_out_full_n == 1'b0) | (width_read_empty_n == 1'b0) | (height_read_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln673_reg_190 == 1'd0) & (outImg_full_n == 1'b0)) | ((icmp_ln673_reg_190 == 1'd0) & (srcImg_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign height_read_out_din = height_read_dout;

assign icmp_ln671_fu_150_p2 = ((y_reg_112 == height_read_2_reg_166) ? 1'b1 : 1'b0);

assign icmp_ln673_fu_161_p2 = ((x_reg_123 == div_cast_i_reg_171) ? 1'b1 : 1'b0);

assign outImg_din = srcImg_dout;

assign start_out = real_start;

assign width_read_out_din = width_read_dout;

assign x_13_fu_155_p2 = (x_reg_123 + 11'd1);

assign y_13_fu_144_p2 = (y_reg_112 + 12'd1);

endmodule //bd_v_mix_0_0_v_mix_444_to_422_false_s
