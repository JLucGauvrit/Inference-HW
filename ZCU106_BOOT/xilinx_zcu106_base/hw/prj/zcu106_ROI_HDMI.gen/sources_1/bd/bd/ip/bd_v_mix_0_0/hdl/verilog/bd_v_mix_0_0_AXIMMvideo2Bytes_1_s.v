// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_v_mix_0_0_AXIMMvideo2Bytes_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_mm_video3_AWVALID,
        m_axi_mm_video3_AWREADY,
        m_axi_mm_video3_AWADDR,
        m_axi_mm_video3_AWID,
        m_axi_mm_video3_AWLEN,
        m_axi_mm_video3_AWSIZE,
        m_axi_mm_video3_AWBURST,
        m_axi_mm_video3_AWLOCK,
        m_axi_mm_video3_AWCACHE,
        m_axi_mm_video3_AWPROT,
        m_axi_mm_video3_AWQOS,
        m_axi_mm_video3_AWREGION,
        m_axi_mm_video3_AWUSER,
        m_axi_mm_video3_WVALID,
        m_axi_mm_video3_WREADY,
        m_axi_mm_video3_WDATA,
        m_axi_mm_video3_WSTRB,
        m_axi_mm_video3_WLAST,
        m_axi_mm_video3_WID,
        m_axi_mm_video3_WUSER,
        m_axi_mm_video3_ARVALID,
        m_axi_mm_video3_ARREADY,
        m_axi_mm_video3_ARADDR,
        m_axi_mm_video3_ARID,
        m_axi_mm_video3_ARLEN,
        m_axi_mm_video3_ARSIZE,
        m_axi_mm_video3_ARBURST,
        m_axi_mm_video3_ARLOCK,
        m_axi_mm_video3_ARCACHE,
        m_axi_mm_video3_ARPROT,
        m_axi_mm_video3_ARQOS,
        m_axi_mm_video3_ARREGION,
        m_axi_mm_video3_ARUSER,
        m_axi_mm_video3_RVALID,
        m_axi_mm_video3_RREADY,
        m_axi_mm_video3_RDATA,
        m_axi_mm_video3_RLAST,
        m_axi_mm_video3_RID,
        m_axi_mm_video3_RUSER,
        m_axi_mm_video3_RRESP,
        m_axi_mm_video3_BVALID,
        m_axi_mm_video3_BREADY,
        m_axi_mm_video3_BRESP,
        m_axi_mm_video3_BID,
        m_axi_mm_video3_BUSER,
        bytesLayer3_plane0_din,
        bytesLayer3_plane0_full_n,
        bytesLayer3_plane0_write,
        HwReg_layer3_buf1_dout,
        HwReg_layer3_buf1_empty_n,
        HwReg_layer3_buf1_read,
        HwReg_layerHeight18_load_loc_dout,
        HwReg_layerHeight18_load_loc_empty_n,
        HwReg_layerHeight18_load_loc_read,
        p_read,
        p_read6_dout,
        p_read6_empty_n,
        p_read6_read,
        p_read3_dout,
        p_read3_empty_n,
        p_read3_read,
        HwReg_layerHeight18_load_loc_out_din,
        HwReg_layerHeight18_load_loc_out_full_n,
        HwReg_layerHeight18_load_loc_out_write,
        p_read3_out_din,
        p_read3_out_full_n,
        p_read3_out_write
);

parameter    ap_ST_fsm_state1 = 113'd1;
parameter    ap_ST_fsm_state2 = 113'd2;
parameter    ap_ST_fsm_state3 = 113'd4;
parameter    ap_ST_fsm_state4 = 113'd8;
parameter    ap_ST_fsm_state5 = 113'd16;
parameter    ap_ST_fsm_state6 = 113'd32;
parameter    ap_ST_fsm_state7 = 113'd64;
parameter    ap_ST_fsm_state8 = 113'd128;
parameter    ap_ST_fsm_state9 = 113'd256;
parameter    ap_ST_fsm_state10 = 113'd512;
parameter    ap_ST_fsm_state11 = 113'd1024;
parameter    ap_ST_fsm_state12 = 113'd2048;
parameter    ap_ST_fsm_state13 = 113'd4096;
parameter    ap_ST_fsm_state14 = 113'd8192;
parameter    ap_ST_fsm_state15 = 113'd16384;
parameter    ap_ST_fsm_state16 = 113'd32768;
parameter    ap_ST_fsm_state17 = 113'd65536;
parameter    ap_ST_fsm_state18 = 113'd131072;
parameter    ap_ST_fsm_state19 = 113'd262144;
parameter    ap_ST_fsm_state20 = 113'd524288;
parameter    ap_ST_fsm_state21 = 113'd1048576;
parameter    ap_ST_fsm_state22 = 113'd2097152;
parameter    ap_ST_fsm_state23 = 113'd4194304;
parameter    ap_ST_fsm_state24 = 113'd8388608;
parameter    ap_ST_fsm_state25 = 113'd16777216;
parameter    ap_ST_fsm_state26 = 113'd33554432;
parameter    ap_ST_fsm_state27 = 113'd67108864;
parameter    ap_ST_fsm_state28 = 113'd134217728;
parameter    ap_ST_fsm_state29 = 113'd268435456;
parameter    ap_ST_fsm_state30 = 113'd536870912;
parameter    ap_ST_fsm_state31 = 113'd1073741824;
parameter    ap_ST_fsm_state32 = 113'd2147483648;
parameter    ap_ST_fsm_state33 = 113'd4294967296;
parameter    ap_ST_fsm_state34 = 113'd8589934592;
parameter    ap_ST_fsm_state35 = 113'd17179869184;
parameter    ap_ST_fsm_state36 = 113'd34359738368;
parameter    ap_ST_fsm_state37 = 113'd68719476736;
parameter    ap_ST_fsm_state38 = 113'd137438953472;
parameter    ap_ST_fsm_state39 = 113'd274877906944;
parameter    ap_ST_fsm_state40 = 113'd549755813888;
parameter    ap_ST_fsm_state41 = 113'd1099511627776;
parameter    ap_ST_fsm_state42 = 113'd2199023255552;
parameter    ap_ST_fsm_state43 = 113'd4398046511104;
parameter    ap_ST_fsm_state44 = 113'd8796093022208;
parameter    ap_ST_fsm_state45 = 113'd17592186044416;
parameter    ap_ST_fsm_state46 = 113'd35184372088832;
parameter    ap_ST_fsm_state47 = 113'd70368744177664;
parameter    ap_ST_fsm_state48 = 113'd140737488355328;
parameter    ap_ST_fsm_state49 = 113'd281474976710656;
parameter    ap_ST_fsm_state50 = 113'd562949953421312;
parameter    ap_ST_fsm_state51 = 113'd1125899906842624;
parameter    ap_ST_fsm_state52 = 113'd2251799813685248;
parameter    ap_ST_fsm_state53 = 113'd4503599627370496;
parameter    ap_ST_fsm_state54 = 113'd9007199254740992;
parameter    ap_ST_fsm_state55 = 113'd18014398509481984;
parameter    ap_ST_fsm_state56 = 113'd36028797018963968;
parameter    ap_ST_fsm_state57 = 113'd72057594037927936;
parameter    ap_ST_fsm_state58 = 113'd144115188075855872;
parameter    ap_ST_fsm_state59 = 113'd288230376151711744;
parameter    ap_ST_fsm_state60 = 113'd576460752303423488;
parameter    ap_ST_fsm_state61 = 113'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 113'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 113'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 113'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 113'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 113'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 113'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 113'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 113'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 113'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 113'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 113'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 113'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 113'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 113'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 113'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 113'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 113'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 113'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 113'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 113'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 113'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 113'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 113'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 113'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 113'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 113'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 113'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 113'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 113'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 113'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 113'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 113'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 113'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 113'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 113'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 113'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 113'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 113'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 113'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 113'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 113'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 113'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 113'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 113'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 113'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 113'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 113'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 113'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 113'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 113'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_pp0_stage0 = 113'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state115 = 113'd5192296858534827628530496329220096;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_mm_video3_AWVALID;
input   m_axi_mm_video3_AWREADY;
output  [63:0] m_axi_mm_video3_AWADDR;
output  [0:0] m_axi_mm_video3_AWID;
output  [31:0] m_axi_mm_video3_AWLEN;
output  [2:0] m_axi_mm_video3_AWSIZE;
output  [1:0] m_axi_mm_video3_AWBURST;
output  [1:0] m_axi_mm_video3_AWLOCK;
output  [3:0] m_axi_mm_video3_AWCACHE;
output  [2:0] m_axi_mm_video3_AWPROT;
output  [3:0] m_axi_mm_video3_AWQOS;
output  [3:0] m_axi_mm_video3_AWREGION;
output  [0:0] m_axi_mm_video3_AWUSER;
output   m_axi_mm_video3_WVALID;
input   m_axi_mm_video3_WREADY;
output  [127:0] m_axi_mm_video3_WDATA;
output  [15:0] m_axi_mm_video3_WSTRB;
output   m_axi_mm_video3_WLAST;
output  [0:0] m_axi_mm_video3_WID;
output  [0:0] m_axi_mm_video3_WUSER;
output   m_axi_mm_video3_ARVALID;
input   m_axi_mm_video3_ARREADY;
output  [63:0] m_axi_mm_video3_ARADDR;
output  [0:0] m_axi_mm_video3_ARID;
output  [31:0] m_axi_mm_video3_ARLEN;
output  [2:0] m_axi_mm_video3_ARSIZE;
output  [1:0] m_axi_mm_video3_ARBURST;
output  [1:0] m_axi_mm_video3_ARLOCK;
output  [3:0] m_axi_mm_video3_ARCACHE;
output  [2:0] m_axi_mm_video3_ARPROT;
output  [3:0] m_axi_mm_video3_ARQOS;
output  [3:0] m_axi_mm_video3_ARREGION;
output  [0:0] m_axi_mm_video3_ARUSER;
input   m_axi_mm_video3_RVALID;
output   m_axi_mm_video3_RREADY;
input  [127:0] m_axi_mm_video3_RDATA;
input   m_axi_mm_video3_RLAST;
input  [0:0] m_axi_mm_video3_RID;
input  [0:0] m_axi_mm_video3_RUSER;
input  [1:0] m_axi_mm_video3_RRESP;
input   m_axi_mm_video3_BVALID;
output   m_axi_mm_video3_BREADY;
input  [1:0] m_axi_mm_video3_BRESP;
input  [0:0] m_axi_mm_video3_BID;
input  [0:0] m_axi_mm_video3_BUSER;
output  [127:0] bytesLayer3_plane0_din;
input   bytesLayer3_plane0_full_n;
output   bytesLayer3_plane0_write;
input  [63:0] HwReg_layer3_buf1_dout;
input   HwReg_layer3_buf1_empty_n;
output   HwReg_layer3_buf1_read;
input  [15:0] HwReg_layerHeight18_load_loc_dout;
input   HwReg_layerHeight18_load_loc_empty_n;
output   HwReg_layerHeight18_load_loc_read;
input  [15:0] p_read;
input  [15:0] p_read6_dout;
input   p_read6_empty_n;
output   p_read6_read;
input  [0:0] p_read3_dout;
input   p_read3_empty_n;
output   p_read3_read;
output  [15:0] HwReg_layerHeight18_load_loc_out_din;
input   HwReg_layerHeight18_load_loc_out_full_n;
output   HwReg_layerHeight18_load_loc_out_write;
output  [0:0] p_read3_out_din;
input   p_read3_out_full_n;
output   p_read3_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_mm_video3_ARVALID;
reg m_axi_mm_video3_RREADY;
reg bytesLayer3_plane0_write;
reg HwReg_layer3_buf1_read;
reg HwReg_layerHeight18_load_loc_read;
reg p_read6_read;
reg p_read3_read;
reg HwReg_layerHeight18_load_loc_out_write;
reg p_read3_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [112:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    mm_video3_blk_n_AR;
wire    ap_CS_fsm_state6;
reg    mm_video3_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln30_reg_386;
reg    bytesLayer3_plane0_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln30_reg_386_pp0_iter1_reg;
reg    HwReg_layer3_buf1_blk_n;
reg    HwReg_layerHeight18_load_loc_blk_n;
reg    p_read6_blk_n;
reg    p_read3_blk_n;
reg    HwReg_layerHeight18_load_loc_out_blk_n;
reg    p_read3_out_blk_n;
reg   [12:0] x_reg_189;
reg   [63:0] HwReg_layer3_buf1_read_reg_320;
reg   [15:0] HwReg_layerHeight18_load_loc_read_reg_325;
wire   [0:0] p_read_61_read_fu_138_p2;
reg   [0:0] p_read_61_reg_330;
wire   [31:0] conv1_i_i_fu_200_p1;
reg   [31:0] conv1_i_i_reg_334;
wire   [12:0] loopWidth_fu_214_p4;
reg   [12:0] loopWidth_reg_339;
wire   [31:0] zext_ln23_fu_224_p1;
reg   [31:0] zext_ln23_reg_344;
wire   [0:0] icmp_ln23_fu_228_p2;
reg   [0:0] icmp_ln23_reg_349;
wire   [0:0] cmp41_i_i_fu_234_p2;
reg   [0:0] cmp41_i_i_reg_353;
wire   [15:0] y_26_fu_240_p2;
reg   [15:0] y_26_reg_357;
wire    ap_CS_fsm_state2;
reg   [59:0] trunc_ln_reg_370;
wire    ap_CS_fsm_state5;
wire   [12:0] add_ln30_1_fu_303_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state112_pp0_stage0_iter0;
reg    ap_block_state113_pp0_stage0_iter1;
reg    ap_block_state114_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln30_fu_309_p2;
reg   [127:0] fb_pix_reg_390;
wire    ap_CS_fsm_state111;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state112;
reg   [15:0] y_reg_178;
reg    ap_block_state1;
wire    ap_CS_fsm_state115;
wire  signed [63:0] sext_ln30_fu_293_p1;
reg    ap_block_pp0_stage0_01001;
wire   [16:0] WidthInBytes_cast_i_i_fu_204_p1;
wire   [16:0] sub_i_i_fu_208_p2;
wire   [31:0] grp_fu_314_p2;
wire   [26:0] tmp_fu_255_p4;
wire   [31:0] and_ln_fu_264_p4;
wire   [63:0] zext_ln30_fu_274_p1;
wire   [63:0] add_ln30_fu_278_p2;
wire   [15:0] grp_fu_314_p0;
wire   [15:0] grp_fu_314_p1;
wire   [0:0] icmp_ln23_1_fu_250_p2;
reg   [112:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] grp_fu_314_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 113'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

bd_v_mix_0_0_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U286(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_314_p0),
    .din1(grp_fu_314_p1),
    .ce(1'b1),
    .dout(grp_fu_314_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ((p_read_61_reg_330 == 1'd0) | ((icmp_ln23_1_fu_250_p2 == 1'd1) | (icmp_ln23_reg_349 == 1'd1))))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state112) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state111)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state112)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state112);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state111)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        x_reg_189 <= 13'd0;
    end else if (((icmp_ln30_fu_309_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_reg_189 <= add_ln30_1_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        y_reg_178 <= y_26_reg_357;
    end else if ((~((1'b0 == HwReg_layerHeight18_load_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (1'b0 == HwReg_layer3_buf1_empty_n) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (p_read6_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (icmp_ln23_fu_228_p2 == 1'd0) & (p_read_61_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_178 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        HwReg_layer3_buf1_read_reg_320 <= HwReg_layer3_buf1_dout;
        HwReg_layerHeight18_load_loc_read_reg_325 <= HwReg_layerHeight18_load_loc_dout;
        p_read_61_reg_330 <= p_read3_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_228_p2 == 1'd0) & (p_read_61_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        cmp41_i_i_reg_353 <= cmp41_i_i_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((p_read_61_read_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv1_i_i_reg_334[15 : 0] <= conv1_i_i_fu_200_p1[15 : 0];
        icmp_ln23_reg_349 <= icmp_ln23_fu_228_p2;
        loopWidth_reg_339 <= {{sub_i_i_fu_208_p2[16:4]}};
        zext_ln23_reg_344[12 : 0] <= zext_ln23_fu_224_p1[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_386 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fb_pix_reg_390 <= m_axi_mm_video3_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln30_reg_386 <= icmp_ln30_fu_309_p2;
        icmp_ln30_reg_386_pp0_iter1_reg <= icmp_ln30_reg_386;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp41_i_i_reg_353 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        trunc_ln_reg_370 <= {{add_ln30_fu_278_p2[63:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_349 == 1'd0) & (p_read_61_reg_330 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        y_26_reg_357 <= y_26_fu_240_p2;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layer3_buf1_blk_n = HwReg_layer3_buf1_empty_n;
    end else begin
        HwReg_layer3_buf1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_layerHeight18_load_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (1'b0 == HwReg_layer3_buf1_empty_n) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (p_read6_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layer3_buf1_read = 1'b1;
    end else begin
        HwReg_layer3_buf1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_loc_blk_n = HwReg_layerHeight18_load_loc_empty_n;
    end else begin
        HwReg_layerHeight18_load_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_loc_out_blk_n = HwReg_layerHeight18_load_loc_out_full_n;
    end else begin
        HwReg_layerHeight18_load_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_layerHeight18_load_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (1'b0 == HwReg_layer3_buf1_empty_n) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (p_read6_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_loc_out_write = 1'b1;
    end else begin
        HwReg_layerHeight18_load_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_layerHeight18_load_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (1'b0 == HwReg_layer3_buf1_empty_n) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (p_read6_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight18_load_loc_read = 1'b1;
    end else begin
        HwReg_layerHeight18_load_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_309_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state112 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state112 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((p_read_61_reg_330 == 1'd0) | ((icmp_ln23_1_fu_250_p2 == 1'd1) | (icmp_ln23_reg_349 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_386_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        bytesLayer3_plane0_blk_n = bytesLayer3_plane0_full_n;
    end else begin
        bytesLayer3_plane0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_386_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bytesLayer3_plane0_write = 1'b1;
    end else begin
        bytesLayer3_plane0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((p_read_61_reg_330 == 1'd0) | ((icmp_ln23_1_fu_250_p2 == 1'd1) | (icmp_ln23_reg_349 == 1'd1))))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (m_axi_mm_video3_ARREADY == 1'b1))) begin
        m_axi_mm_video3_ARVALID = 1'b1;
    end else begin
        m_axi_mm_video3_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_386 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_mm_video3_RREADY = 1'b1;
    end else begin
        m_axi_mm_video3_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mm_video3_blk_n_AR = m_axi_mm_video3_ARREADY;
    end else begin
        mm_video3_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_386 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mm_video3_blk_n_R = m_axi_mm_video3_RVALID;
    end else begin
        mm_video3_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_blk_n = p_read3_empty_n;
    end else begin
        p_read3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_out_blk_n = p_read3_out_full_n;
    end else begin
        p_read3_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_layerHeight18_load_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (1'b0 == HwReg_layer3_buf1_empty_n) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (p_read6_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_out_write = 1'b1;
    end else begin
        p_read3_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_layerHeight18_load_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (1'b0 == HwReg_layer3_buf1_empty_n) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (p_read6_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read3_read = 1'b1;
    end else begin
        p_read3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read6_blk_n = p_read6_empty_n;
    end else begin
        p_read6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_layerHeight18_load_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (1'b0 == HwReg_layer3_buf1_empty_n) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (p_read6_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read6_read = 1'b1;
    end else begin
        p_read6_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == HwReg_layerHeight18_load_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (1'b0 == HwReg_layer3_buf1_empty_n) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (p_read6_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((p_read_61_reg_330 == 1'd0) | ((icmp_ln23_1_fu_250_p2 == 1'd1) | (icmp_ln23_reg_349 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((cmp41_i_i_reg_353 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (m_axi_mm_video3_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln30_fu_309_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln30_fu_309_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_layerHeight18_load_loc_out_din = HwReg_layerHeight18_load_loc_dout;

assign WidthInBytes_cast_i_i_fu_204_p1 = p_read;

assign add_ln30_1_fu_303_p2 = (x_reg_189 + 13'd1);

assign add_ln30_fu_278_p2 = (HwReg_layer3_buf1_read_reg_320 + zext_ln30_fu_274_p1);

assign and_ln_fu_264_p4 = {{{{1'd0}, {tmp_fu_255_p4}}}, {4'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln30_reg_386_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (bytesLayer3_plane0_full_n == 1'b0)) | ((icmp_ln30_reg_386 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_mm_video3_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln30_reg_386_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (bytesLayer3_plane0_full_n == 1'b0)) | ((icmp_ln30_reg_386 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_mm_video3_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln30_reg_386_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (bytesLayer3_plane0_full_n == 1'b0)) | ((icmp_ln30_reg_386 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_mm_video3_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == HwReg_layerHeight18_load_loc_out_full_n) | (1'b0 == HwReg_layerHeight18_load_loc_empty_n) | (1'b0 == HwReg_layer3_buf1_empty_n) | (p_read3_out_full_n == 1'b0) | (p_read3_empty_n == 1'b0) | (p_read6_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state112_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state113_pp0_stage0_iter1 = ((icmp_ln30_reg_386 == 1'd0) & (m_axi_mm_video3_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state114_pp0_stage0_iter2 = ((icmp_ln30_reg_386_pp0_iter1_reg == 1'd0) & (bytesLayer3_plane0_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bytesLayer3_plane0_din = fb_pix_reg_390;

assign cmp41_i_i_fu_234_p2 = ((loopWidth_fu_214_p4 == 13'd0) ? 1'b1 : 1'b0);

assign conv1_i_i_fu_200_p1 = p_read6_dout;

assign grp_fu_314_p0 = grp_fu_314_p00;

assign grp_fu_314_p00 = y_reg_178;

assign grp_fu_314_p1 = conv1_i_i_reg_334;

assign icmp_ln23_1_fu_250_p2 = ((y_reg_178 == HwReg_layerHeight18_load_loc_read_reg_325) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_228_p2 = ((HwReg_layerHeight18_load_loc_dout == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_309_p2 = ((x_reg_189 == loopWidth_reg_339) ? 1'b1 : 1'b0);

assign loopWidth_fu_214_p4 = {{sub_i_i_fu_208_p2[16:4]}};

assign m_axi_mm_video3_ARADDR = sext_ln30_fu_293_p1;

assign m_axi_mm_video3_ARBURST = 2'd0;

assign m_axi_mm_video3_ARCACHE = 4'd0;

assign m_axi_mm_video3_ARID = 1'd0;

assign m_axi_mm_video3_ARLEN = zext_ln23_reg_344;

assign m_axi_mm_video3_ARLOCK = 2'd0;

assign m_axi_mm_video3_ARPROT = 3'd0;

assign m_axi_mm_video3_ARQOS = 4'd0;

assign m_axi_mm_video3_ARREGION = 4'd0;

assign m_axi_mm_video3_ARSIZE = 3'd0;

assign m_axi_mm_video3_ARUSER = 1'd0;

assign m_axi_mm_video3_AWADDR = 64'd0;

assign m_axi_mm_video3_AWBURST = 2'd0;

assign m_axi_mm_video3_AWCACHE = 4'd0;

assign m_axi_mm_video3_AWID = 1'd0;

assign m_axi_mm_video3_AWLEN = 32'd0;

assign m_axi_mm_video3_AWLOCK = 2'd0;

assign m_axi_mm_video3_AWPROT = 3'd0;

assign m_axi_mm_video3_AWQOS = 4'd0;

assign m_axi_mm_video3_AWREGION = 4'd0;

assign m_axi_mm_video3_AWSIZE = 3'd0;

assign m_axi_mm_video3_AWUSER = 1'd0;

assign m_axi_mm_video3_AWVALID = 1'b0;

assign m_axi_mm_video3_BREADY = 1'b0;

assign m_axi_mm_video3_WDATA = 128'd0;

assign m_axi_mm_video3_WID = 1'd0;

assign m_axi_mm_video3_WLAST = 1'b0;

assign m_axi_mm_video3_WSTRB = 16'd0;

assign m_axi_mm_video3_WUSER = 1'd0;

assign m_axi_mm_video3_WVALID = 1'b0;

assign p_read3_out_din = p_read3_dout;

assign p_read_61_read_fu_138_p2 = p_read3_dout;

assign sext_ln30_fu_293_p1 = $signed(trunc_ln_reg_370);

assign start_out = real_start;

assign sub_i_i_fu_208_p2 = (WidthInBytes_cast_i_i_fu_204_p1 + 17'd15);

assign tmp_fu_255_p4 = {{grp_fu_314_p2[30:4]}};

assign y_26_fu_240_p2 = (y_reg_178 + 16'd1);

assign zext_ln23_fu_224_p1 = loopWidth_fu_214_p4;

assign zext_ln30_fu_274_p1 = and_ln_fu_264_p4;

always @ (posedge ap_clk) begin
    conv1_i_i_reg_334[31:16] <= 16'b0000000000000000;
    zext_ln23_reg_344[31:13] <= 19'b0000000000000000000;
end

endmodule //bd_v_mix_0_0_AXIMMvideo2Bytes_1_s
